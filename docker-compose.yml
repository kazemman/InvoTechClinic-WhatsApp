version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: invotech_clinic_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: node:20-alpine
    container_name: invotech_clinic_migrate
    working_dir: /app
    command: sh -c "npm ci && npm run db:push"
    environment:
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGDATABASE: ${PGDATABASE}
      PGHOST: postgres
      PGPORT: 5432
      DATABASE_URL: postgresql://${PGUSER}:${PGPASSWORD}@postgres:5432/${PGDATABASE}
    volumes:
      - .:/app
      - node_modules_cache:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - migration

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: invotech_clinic_app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGDATABASE: ${PGDATABASE}
      PGHOST: postgres
      PGPORT: 5432
      N8N_WEBHOOK_URL: ${N8N_WEBHOOK_URL}
      N8N_BIRTHDAY_WEBHOOK_URL: ${N8N_BIRTHDAY_WEBHOOK_URL}
      SESSION_SECRET: ${SESSION_SECRET}
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  node_modules_cache:
