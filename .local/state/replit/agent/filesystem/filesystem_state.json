{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport crypto from 'crypto';\nimport { Request, Response, NextFunction } from 'express';\nimport { storage } from './storage';\nimport { User } from '@shared/schema';\n\nconst JWT_SECRET = process.env.SESSION_SECRET || 'your-secret-key';\nconst SALT_ROUNDS = 10;\n\nexport interface AuthenticatedRequest extends Request {\n  user?: User;\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, SALT_ROUNDS);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\nexport function generateToken(userId: string): string {\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: '24h' });\n}\n\nexport function verifyToken(token: string): { userId: string } | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as { userId: string };\n  } catch {\n    return null;\n  }\n}\n\nexport function generateApiKey(): string {\n  const randomBytes = crypto.randomBytes(32);\n  return `sk_${randomBytes.toString('hex')}`;\n}\n\nexport function hashApiKey(apiKey: string): string {\n  return crypto.createHash('sha256').update(apiKey).digest('hex');\n}\n\nexport async function authenticateToken(\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    if (token.startsWith('sk_')) {\n      const keyHash = hashApiKey(token);\n      const apiKey = await storage.getApiKeyByHash(keyHash);\n      \n      if (!apiKey) {\n        return res.status(403).json({ message: 'Invalid API key' });\n      }\n\n      const user = await storage.getUser(apiKey.userId);\n      if (!user || !user.isActive) {\n        return res.status(403).json({ message: 'User not found or inactive' });\n      }\n\n      await storage.updateApiKeyLastUsed(apiKey.id);\n      req.user = user;\n      next();\n    } else {\n      const decoded = verifyToken(token);\n      if (!decoded) {\n        return res.status(403).json({ message: 'Invalid token' });\n      }\n\n      const user = await storage.getUser(decoded.userId);\n      if (!user || !user.isActive) {\n        return res.status(403).json({ message: 'User not found or inactive' });\n      }\n\n      req.user = user;\n      next();\n    }\n  } catch (error) {\n    return res.status(500).json({ message: 'Internal server error' });\n  }\n}\n\nexport function requireRole(roles: string[]) {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ message: 'Insufficient permissions' });\n    }\n\n    next();\n  };\n}\n","size_bytes":2908},"server/db.ts":{"content":"import pkg from 'pg';\nconst { Pool } = pkg;\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\n// Support both DATABASE_URL and individual PG* environment variables\n// This provides flexibility for different deployment environments\nlet pool: InstanceType<typeof Pool>;\n\nif (process.env.DATABASE_URL) {\n  // Use DATABASE_URL if available (common in production)\n  pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.NODE_ENV === 'production' && process.env.DATABASE_URL.includes('sslmode=require')\n      ? { rejectUnauthorized: false }\n      : undefined\n  });\n} else if (process.env.PGHOST) {\n  // Use individual PG* variables (common in Docker/VPS deployments)\n  pool = new Pool({\n    user: process.env.PGUSER,\n    password: process.env.PGPASSWORD,\n    database: process.env.PGDATABASE,\n    host: process.env.PGHOST,\n    port: parseInt(process.env.PGPORT || '5432', 10),\n  });\n} else {\n  throw new Error(\n    \"Database configuration missing. Set either DATABASE_URL or PGHOST/PGUSER/PGPASSWORD/PGDATABASE environment variables.\"\n  );\n}\n\nexport { pool };\nexport const db = drizzle(pool, { schema });","size_bytes":1177},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport * as cron from 'node-cron';\nimport { DatabaseStorage } from './storage';\nimport { log } from './logger';\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  // Only capture response bodies in development for debugging\n  if (app.get(\"env\") === \"development\") {\n    const originalResJson = res.json;\n    res.json = function (bodyJson, ...args) {\n      capturedJsonResponse = bodyJson;\n      return originalResJson.apply(res, [bodyJson, ...args]);\n    };\n  }\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      // In production, only log method, path, status, and duration (no response body for privacy)\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      \n      // Only include response body in development\n      if (app.get(\"env\") === \"development\" && capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Initialize storage for cron job\n  const storage = new DatabaseStorage();\n\n  // Set up daily cleanup cron job at 1:00 AM\n  cron.schedule('0 1 * * *', async () => {\n    try {\n      const result = await storage.cleanupOldBirthdayWishes();\n      log(`Daily cleanup at 1 AM: Deleted ${result.deletedCount} old birthday wishes`);\n    } catch (error) {\n      log(`Error during daily cleanup: ${error}`);\n    }\n  }, {\n    timezone: \"Africa/Johannesburg\" // South African timezone\n  });\n  \n  log('Daily birthday cleanup scheduler started (runs at 1:00 AM daily)');\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    \n    // Log full error details server-side for debugging\n    log(`Error: ${err.message || err}`, 'error');\n    if (err.stack) {\n      log(err.stack, 'error');\n    }\n    \n    // In production, send generic messages for 500 errors to avoid leaking internal details\n    // For 4xx errors, preserve the specific message (validation, auth, etc.)\n    const message = app.get(\"env\") === \"production\" && status >= 500\n      ? \"Internal Server Error\"\n      : (err.message || \"Internal Server Error\");\n    \n    res.status(status).json({ message });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    const { setupVite } = await import(\"./vite\");\n    await setupVite(app, server);\n  } else {\n    const { serveStatic } = await import(\"./static\");\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3529},"server/routes.ts":{"content":"import express, { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport bcrypt from 'bcrypt';\nimport multer from 'multer';\nimport path from 'path';\nimport { storage } from \"./storage\";\nimport { \n  loginSchema, passwordResetSchema, insertUserSchema, insertPatientSchema, \n  insertAppointmentSchema, insertCheckInSchema, insertQueueSchema,\n  insertConsultationSchema, insertPaymentSchema, insertActivityLogSchema,\n  insertMedicalAttachmentSchema, insertMedicalAidClaimSchema, updateMedicalAidClaimSchema,\n  insertBirthdayWishSchema, insertAppointmentReminderSchema,\n  type User\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { authenticateToken, requireRole, generateToken, hashPassword, verifyPassword, AuthenticatedRequest } from \"./auth\";\n\n// Configure multer for patient photo uploads\nconst upload = multer({\n  dest: 'uploads/patient-photos/',\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|gif/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n\n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  },\n});\n\n// Configure multer for medical file attachments\nconst medicalUpload = multer({\n  dest: 'uploads/medical-attachments/',\n  limits: {\n    fileSize: 25 * 1024 * 1024, // 25MB limit for medical files\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow common medical file types\n    const allowedTypes = /pdf|doc|docx|txt|jpeg|jpg|png|gif|tiff|dcm|xml|json/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const allowedMimeTypes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'text/plain',\n      'image/jpeg',\n      'image/jpg', \n      'image/png',\n      'image/gif',\n      'image/tiff',\n      'application/dicom', // DICOM medical imaging\n      'application/xml',\n      'text/xml',\n      'application/json'\n    ];\n    const mimetypeAllowed = allowedMimeTypes.includes(file.mimetype);\n\n    if (mimetypeAllowed && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('File type not supported. Supported types: PDF, DOC, DOCX, TXT, images (JPG, PNG, GIF, TIFF), DICOM, XML, JSON'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws: WebSocket) => {\n    console.log('Client connected to WebSocket');\n    \n    ws.on('close', () => {\n      console.log('Client disconnected from WebSocket');\n    });\n  });\n\n  // Broadcast queue updates to all connected clients\n  function broadcastQueueUpdate() {\n    wss.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify({ type: 'queue_update' }));\n      }\n    });\n  }\n\n  // Authentication routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: 'No account found with this email address' });\n      }\n      \n      if (!user.isActive) {\n        return res.status(401).json({ message: 'Account is disabled. Please contact an administrator' });\n      }\n\n      const isValid = await verifyPassword(password, user.passwordHash);\n      if (!isValid) {\n        return res.status(401).json({ message: 'Password is incorrect. Please check your password and try again' });\n      }\n\n      const token = generateToken(user.id);\n      \n      // Log activity\n      await storage.createActivityLog({\n        userId: user.id,\n        action: 'login',\n        details: `User ${user.name} logged in`\n      });\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role\n        }\n      });\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid request data' });\n    }\n  });\n\n  app.post('/api/auth/logout', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'logout',\n          details: `User ${req.user.name} logged out`\n        });\n      }\n      res.json({ message: 'Logged out successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Logout failed' });\n    }\n  });\n\n  app.get('/api/auth/me', authenticateToken, (req: AuthenticatedRequest, res) => {\n    if (req.user) {\n      res.json({\n        id: req.user.id,\n        email: req.user.email,\n        name: req.user.name,\n        role: req.user.role\n      });\n    } else {\n      res.status(401).json({ message: 'Not authenticated' });\n    }\n  });\n\n  // User management routes\n  app.get('/api/users', authenticateToken, requireRole(['staff', 'admin', 'doctor']), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users.map(user => ({\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        isActive: user.isActive,\n        createdAt: user.createdAt\n      })));\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  app.post('/api/users', authenticateToken, requireRole(['admin']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const hashedPassword = await hashPassword(userData.passwordHash);\n      \n      const user = await storage.createUser({\n        ...userData,\n        passwordHash: hashedPassword\n      });\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'create_user',\n          details: `Created new user: ${user.name} (${user.role})`\n        });\n      }\n\n      res.status(201).json({\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        isActive: user.isActive,\n        createdAt: user.createdAt\n      });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to create user' });\n    }\n  });\n\n  app.put('/api/users/:id', authenticateToken, requireRole(['admin']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const userData = req.body;\n      \n      if (userData.passwordHash) {\n        userData.passwordHash = await hashPassword(userData.passwordHash);\n      }\n\n      const user = await storage.updateUser(id, userData);\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'update_user',\n          details: `Updated user: ${user.name}`\n        });\n      }\n\n      res.json({\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        isActive: user.isActive,\n        createdAt: user.createdAt\n      });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update user' });\n    }\n  });\n\n  app.delete('/api/users/:id', authenticateToken, requireRole(['admin']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(id);\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'delete_user',\n          details: `Deleted user with ID: ${id}`\n        });\n      }\n\n      res.json({ message: 'User deleted successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to delete user' });\n    }\n  });\n\n  // Patient routes\n  app.get('/api/patients', authenticateToken, async (req, res) => {\n    try {\n      const patients = await storage.getAllPatients();\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch patients' });\n    }\n  });\n\n  app.get('/api/patients/search', authenticateToken, async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: 'Search query required' });\n      }\n      \n      const patients = await storage.searchPatients(q);\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to search patients' });\n    }\n  });\n\n  // Customer Relations routes - defined before :id route to avoid conflicts\n  app.get('/api/patients/birthdays', authenticateToken, requireRole(['staff', 'admin']), async (req, res) => {\n    try {\n      const birthdayPatients = await storage.getTodaysBirthdayPatients();\n      res.json(birthdayPatients);\n    } catch (error) {\n      console.error('Failed to fetch birthday patients:', error);\n      res.status(500).json({ message: 'Failed to fetch birthday patients' });\n    }\n  });\n\n  app.get('/api/patients/:id', authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const patient = await storage.getPatient(id);\n      \n      if (!patient) {\n        return res.status(404).json({ message: 'Patient not found' });\n      }\n      \n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch patient' });\n    }\n  });\n\n  app.post('/api/patients', authenticateToken, upload.single('photo'), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Transform FormData fields for proper parsing\n      const bodyData = { ...req.body };\n      if (bodyData.dateOfBirth && typeof bodyData.dateOfBirth === 'string') {\n        bodyData.dateOfBirth = new Date(bodyData.dateOfBirth);\n      }\n      \n      const patientData = insertPatientSchema.parse(bodyData);\n      \n      if (req.file) {\n        patientData.photoUrl = `/uploads/patient-photos/${req.file.filename}`;\n      }\n\n      const patient = await storage.createPatient(patientData);\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'create_patient',\n          details: `Registered new patient: ${patient.firstName} ${patient.lastName}`\n        });\n      }\n\n      res.status(201).json(patient);\n    } catch (error: any) {\n      console.error('Patient creation error:', error);\n      \n      // Handle specific database errors\n      if (error.code === '23505' || error.message?.includes('unique')) {\n        return res.status(409).json({ \n          message: 'This ID/Passport number is already registered. Please check the number and try again.' \n        });\n      }\n      \n      // Handle Zod validation errors\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: 'Invalid patient data provided.',\n          errors: error.errors \n        });\n      }\n      \n      res.status(400).json({ message: 'Failed to create patient' });\n    }\n  });\n\n  app.put('/api/patients/:id', authenticateToken, upload.single('photo'), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Transform FormData fields for proper parsing (same as POST route)\n      const bodyData = { ...req.body };\n      if (bodyData.dateOfBirth && typeof bodyData.dateOfBirth === 'string') {\n        bodyData.dateOfBirth = new Date(bodyData.dateOfBirth);\n      }\n      \n      // Use a partial schema for updates (don't require all fields)\n      const updateSchema = insertPatientSchema.partial();\n      const patientData = updateSchema.parse(bodyData);\n      \n      if (req.file) {\n        patientData.photoUrl = `/uploads/patient-photos/${req.file.filename}`;\n      }\n\n      console.log('Updating patient with ID:', id);\n      console.log('Patient data to update:', JSON.stringify(patientData, null, 2));\n      \n      const patient = await storage.updatePatient(id, patientData);\n      \n      console.log('Updated patient result:', JSON.stringify(patient, null, 2));\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'update_patient',\n          details: `Updated patient: ${patient.firstName} ${patient.lastName}`\n        });\n      }\n\n      res.json(patient);\n    } catch (error: any) {\n      console.error('Patient update error:', error);\n      \n      // Handle specific database errors\n      if (error.code === '23505' || error.message?.includes('unique')) {\n        return res.status(409).json({ \n          message: 'This ID/Passport number is already registered. Please check the number and try again.' \n        });\n      }\n      \n      // Handle Zod validation errors\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: 'Invalid patient data provided.',\n          errors: error.errors \n        });\n      }\n      \n      res.status(400).json({ message: 'Failed to update patient' });\n    }\n  });\n\n  // Appointment routes\n  app.get('/api/appointments', authenticateToken, async (req, res) => {\n    try {\n      const { date, doctorId } = req.query;\n      let appointments;\n\n      if (date) {\n        const appointmentDate = new Date(date as string);\n        if (doctorId) {\n          appointments = await storage.getAppointmentsByDoctor(doctorId as string, appointmentDate);\n        } else {\n          appointments = await storage.getAppointmentsByDate(appointmentDate);\n        }\n      } else if (doctorId) {\n        appointments = await storage.getAppointmentsByDoctor(doctorId as string);\n      } else {\n        const today = new Date();\n        appointments = await storage.getAppointmentsByDate(today);\n      }\n\n      res.json(appointments);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch appointments' });\n    }\n  });\n\n  app.post('/api/appointments', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      console.log('Appointment creation request body:', JSON.stringify(req.body, null, 2));\n      \n      // Schema automatically normalizes dates via transform(), no manual conversion needed\n      const appointmentData = insertAppointmentSchema.parse(req.body);\n      console.log('Validated and normalized appointment data:', JSON.stringify(appointmentData, null, 2));\n      \n      // Check for appointment conflicts\n      const hasConflict = await storage.checkAppointmentConflict(\n        appointmentData.doctorId, \n        appointmentData.appointmentDate\n      );\n      \n      if (hasConflict) {\n        console.log('Appointment conflict detected for doctor:', appointmentData.doctorId, 'at time:', appointmentData.appointmentDate);\n        return res.status(409).json({ \n          message: 'This doctor already has an appointment at the selected time. Please choose a different time slot.',\n          conflict: true\n        });\n      }\n      \n      const appointment = await storage.createAppointment(appointmentData);\n      console.log('Created appointment:', JSON.stringify(appointment, null, 2));\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'create_appointment',\n          details: `Scheduled appointment for patient ID: ${appointment.patientId}`\n        });\n      }\n\n      res.status(201).json(appointment);\n    } catch (error: any) {\n      console.error('Appointment creation error:', error);\n      console.error('Error details:', {\n        name: error.name,\n        message: error.message,\n        code: error.code,\n        stack: error.stack\n      });\n      \n      // Handle Zod validation errors\n      if (error.name === 'ZodError') {\n        console.error('Zod validation errors:', error.errors);\n        return res.status(400).json({ \n          message: 'Invalid appointment data provided.',\n          errors: error.errors \n        });\n      }\n      \n      // Handle database constraint errors (appointment slot conflicts)\n      if (error.code === '23505' || error.message?.includes('unique')) {\n        return res.status(409).json({ \n          message: 'This doctor already has an appointment at the selected time. Please choose a different time slot.',\n          conflict: true\n        });\n      }\n      \n      // Handle other database errors\n      if (error.code?.startsWith('23')) {\n        return res.status(400).json({ \n          message: 'Database constraint violation.',\n          details: error.message \n        });\n      }\n      \n      res.status(400).json({ \n        message: 'Failed to create appointment',\n        error: error.message \n      });\n    }\n  });\n\n  app.put('/api/appointments/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Schema automatically normalizes dates via transform(), no manual conversion needed\n      // Validate update data with partial schema\n      const updateSchema = insertAppointmentSchema.partial();\n      const validatedData = updateSchema.parse(req.body);\n      \n      // Fetch existing appointment to compute effective values\n      const existingAppointment = await storage.getAppointment(id);\n      if (!existingAppointment) {\n        return res.status(404).json({ message: 'Appointment not found' });\n      }\n      \n      // Compute effective doctorId and appointmentDate (updated value || existing value)\n      const effectiveDoctorId = validatedData.doctorId || existingAppointment.doctorId;\n      const effectiveAppointmentDate = validatedData.appointmentDate || existingAppointment.appointmentDate;\n      \n      // Always check for conflicts when either doctorId or appointmentDate could change\n      if (validatedData.doctorId || validatedData.appointmentDate) {\n        const hasConflict = await storage.checkAppointmentConflict(\n          effectiveDoctorId, \n          effectiveAppointmentDate,\n          id // Exclude current appointment from conflict check\n        );\n        \n        if (hasConflict) {\n          console.log('Appointment update conflict detected for doctor:', effectiveDoctorId, 'at time:', effectiveAppointmentDate);\n          return res.status(409).json({ \n            message: 'This doctor already has another appointment at the selected time. Please choose a different time slot.',\n            conflict: true\n          });\n        }\n      }\n      \n      const appointment = await storage.updateAppointment(id, validatedData);\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'update_appointment',\n          details: `Updated appointment ID: ${id}`\n        });\n      }\n\n      res.json(appointment);\n    } catch (error: any) {\n      console.error('Appointment update error:', error);\n      \n      // Handle database constraint violations\n      if (error.code === '23505' || error.message?.includes('unique')) {\n        return res.status(409).json({ \n          message: 'This doctor already has an appointment at the selected time. Please choose a different time slot.',\n          conflict: true\n        });\n      }\n      \n      // Handle Zod validation errors\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: 'Invalid appointment data. Appointments must be scheduled in 30-minute slots.',\n          errors: error.errors \n        });\n      }\n      \n      res.status(400).json({ message: 'Failed to update appointment' });\n    }\n  });\n\n  app.get('/api/appointments/available-slots', authenticateToken, async (req, res) => {\n    try {\n      const { doctorId, date } = req.query;\n      \n      if (!doctorId || !date) {\n        return res.status(400).json({ \n          message: 'doctorId and date are required query parameters' \n        });\n      }\n      \n      const appointmentDate = new Date(date as string);\n      \n      if (isNaN(appointmentDate.getTime())) {\n        return res.status(400).json({ \n          message: 'Invalid date format. Please use ISO 8601 format (YYYY-MM-DD)' \n        });\n      }\n      \n      const availableSlots = await storage.getAvailableAppointmentSlots(\n        doctorId as string, \n        appointmentDate\n      );\n      \n      res.json({\n        date: appointmentDate.toISOString().split('T')[0],\n        doctorId: doctorId,\n        availableSlots: availableSlots,\n        totalSlots: availableSlots.length\n      });\n    } catch (error) {\n      console.error('Failed to fetch available slots:', error);\n      res.status(500).json({ message: 'Failed to fetch available appointment slots' });\n    }\n  });\n\n  app.get('/api/appointments/available-slots/all', authenticateToken, async (req, res) => {\n    try {\n      console.log('📍 /all endpoint called with query:', req.query);\n      const { date } = req.query;\n      \n      if (!date) {\n        console.log('❌ Missing date parameter');\n        return res.status(400).json({ \n          message: 'date is required query parameter' \n        });\n      }\n      \n      const appointmentDate = new Date(date as string);\n      console.log('📅 Parsed date:', appointmentDate);\n      \n      if (isNaN(appointmentDate.getTime())) {\n        console.log('❌ Invalid date format');\n        return res.status(400).json({ \n          message: 'Invalid date format. Please use ISO 8601 format (YYYY-MM-DD)' \n        });\n      }\n      \n      console.log('🔍 Fetching doctors with available slots...');\n      const doctorsWithSlots = await storage.getAvailableAppointmentSlotsForAllDoctors(appointmentDate);\n      console.log('✅ Doctors fetched:', doctorsWithSlots.length);\n      \n      const response = {\n        date: appointmentDate.toISOString().split('T')[0],\n        doctors: doctorsWithSlots.map(doc => ({\n          doctorId: doc.doctorId,\n          doctorName: doc.doctorName,\n          availableSlots: doc.availableSlots,\n          totalSlots: doc.availableSlots.length\n        })),\n        totalDoctors: doctorsWithSlots.length\n      };\n      \n      console.log('📤 Sending response:', JSON.stringify(response).substring(0, 200));\n      res.json(response);\n    } catch (error: any) {\n      console.error('💥 ERROR in /all endpoint:', error);\n      console.error('Error stack:', error.stack);\n      res.status(500).json({ message: 'Failed to fetch available appointment slots for all doctors', error: error.message });\n    }\n  });\n\n  // Appointment reminder routes\n  app.get('/api/appointments/reminders/weekly', authenticateToken, requireRole(['admin', 'staff']), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Get appointments scheduled for 7 days from now\n      const targetDate = new Date();\n      targetDate.setDate(targetDate.getDate() + 7);\n      targetDate.setHours(0, 0, 0, 0);\n\n      const endDate = new Date(targetDate);\n      endDate.setHours(23, 59, 59, 999);\n\n      const weeklyAppointments = await storage.getAppointmentsBetweenDates(targetDate, endDate);\n      \n      // Filter out appointments that already have weekly reminders sent\n      // For now, we'll allow all appointments (no database tracking yet)\n      const candidateAppointments = weeklyAppointments || [];\n      \n      res.json(candidateAppointments);\n    } catch (error) {\n      console.error('Failed to fetch weekly reminder candidates:', error);\n      res.status(500).json({ message: 'Failed to fetch weekly reminder candidates' });\n    }\n  });\n\n  app.get('/api/appointments/reminders/daily', authenticateToken, requireRole(['admin', 'staff']), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Get appointments scheduled for tomorrow\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      tomorrow.setHours(0, 0, 0, 0);\n\n      const endOfTomorrow = new Date(tomorrow);\n      endOfTomorrow.setHours(23, 59, 59, 999);\n\n      const tomorrowAppointments = await storage.getAppointmentsBetweenDates(tomorrow, endOfTomorrow);\n      \n      // Filter out appointments that already have daily reminders sent\n      // For now, we'll allow all appointments (no database tracking yet)\n      const candidateAppointments = tomorrowAppointments || [];\n      \n      res.json(candidateAppointments);\n    } catch (error) {\n      console.error('Failed to fetch daily reminder candidates:', error);\n      res.status(500).json({ message: 'Failed to fetch daily reminder candidates' });\n    }\n  });\n\n  app.post('/api/appointments/reminders/weekly', authenticateToken, requireRole(['admin', 'staff']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { appointmentIds, customMessage } = req.body;\n      \n      if (!appointmentIds || !Array.isArray(appointmentIds) || appointmentIds.length === 0) {\n        return res.status(400).json({ message: 'appointmentIds array is required' });\n      }\n\n      const results = [];\n      const timestamp = new Date().toISOString();\n\n      console.log('Processing appointmentIds:', appointmentIds);\n      \n      for (const appointmentId of appointmentIds) {\n        console.log('Processing appointment:', appointmentId);\n        try {\n          const appointment = await storage.getAppointmentWithDetails(appointmentId);\n          console.log('Retrieved appointment:', appointment ? 'found' : 'not found');\n          if (!appointment) {\n            results.push({ appointmentId, success: false, error: 'Appointment not found' });\n            continue;\n          }\n\n          // Check for existing successful reminder to prevent duplicates\n          const existingReminder = await storage.getAppointmentReminderByAppointmentAndType(appointmentId, 'weekly');\n          console.log('Existing reminder check:', existingReminder ? 'found' : 'none');\n          if (existingReminder && existingReminder.webhookResponse) {\n            console.log('Skipping - reminder already sent');\n            results.push({ appointmentId, success: false, error: 'Weekly reminder already sent', skipped: true, patientName: `${appointment.patient?.firstName} ${appointment.patient?.lastName}` });\n            continue;\n          }\n\n          // Generate unique requestId for this appointment\n          const requestId = `weekly_${appointmentId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n          // Format reminder message\n          const appointmentDate = new Date(appointment.appointmentDate);\n          const dayName = appointmentDate.toLocaleDateString('en-US', { weekday: 'long' });\n          const timeStr = appointmentDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\n          \n          // Use custom message if provided, otherwise use default\n          let reminderMessage = customMessage || `Hello ${appointment.patient?.firstName} ${appointment.patient?.lastName}! ⏰ Friendly reminder: You have an upcoming appointment in one week on ${dayName} at ${timeStr} with Dr ${appointment.doctor?.name}. You can respond if you wish to reschedule.`;\n          \n          // Replace placeholders in custom message\n          if (customMessage) {\n            reminderMessage = customMessage\n              .replace(/\\[name and Lastname\\]/g, `${appointment.patient?.firstName} ${appointment.patient?.lastName}`)\n              .replace(/\\[name\\]/g, appointment.doctor?.name || 'Doctor')\n              .replace(/Tuesday/g, dayName)\n              .replace(/13:00/g, timeStr);\n          }\n\n          // Prepare clean webhook payload for n8n\n          const webhookPayload = {\n            patients: [\n              {\n                id: appointment.patient?.id,\n                firstName: appointment.patient?.firstName,\n                lastName: appointment.patient?.lastName,\n                phoneNumber: appointment.patient?.phone,\n                reminderMessage: reminderMessage,\n                reminderType: \"weekly\",\n                appointmentDate: appointment.appointmentDate\n              }\n            ],\n            requestId: requestId,\n            timestamp: timestamp,\n            messageType: \"weekly_reminder\"\n          };\n\n          // Send to webhook\n          if (process.env.N8N_BIRTHDAY_WEBHOOK_URL) {\n            console.log('Sending webhook to:', process.env.N8N_BIRTHDAY_WEBHOOK_URL);\n            console.log('Webhook payload:', JSON.stringify(webhookPayload, null, 2));\n            \n            try {\n              const response = await fetch(process.env.N8N_BIRTHDAY_WEBHOOK_URL, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(webhookPayload)\n              });\n\n              const responseText = await response.text();\n              console.log('Webhook response status:', response.status, response.statusText);\n              console.log('Webhook response body:', responseText);\n              \n              if (response.ok) {\n                // Only create reminder record after successful send\n                await storage.insertAppointmentReminder({\n                  appointmentId,\n                  patientId: appointment.patientId,\n                  reminderType: 'weekly',\n                  requestId,\n                  webhookResponse: responseText,\n                });\n                results.push({ appointmentId, success: true, message: 'Weekly reminder sent', patientName: `${appointment.patient?.firstName} ${appointment.patient?.lastName}` });\n              } else {\n                console.error('Webhook failed with status:', response.status, response.statusText);\n                results.push({ appointmentId, success: false, error: `Webhook failed: ${response.status} ${response.statusText}`, patientName: `${appointment.patient?.firstName} ${appointment.patient?.lastName}` });\n              }\n            } catch (fetchError: any) {\n              console.error('Webhook fetch error:', fetchError);\n              results.push({ appointmentId, success: false, error: `Webhook error: ${fetchError.message}`, patientName: `${appointment.patient?.firstName} ${appointment.patient?.lastName}` });\n            }\n          } else {\n            console.log('N8N_BIRTHDAY_WEBHOOK_URL not configured, skipping webhook send');\n            results.push({ appointmentId, success: false, error: 'Webhook URL not configured' });\n          }\n        } catch (error: any) {\n          results.push({ appointmentId, success: false, error: error.message });\n        }\n      }\n\n      const successful = results.filter(r => r.success).length;\n      res.json({\n        message: `Sent ${successful} of ${appointmentIds.length} weekly reminders`,\n        results,\n        debug: {\n          appointmentIds,\n          webhookUrl: process.env.N8N_BIRTHDAY_WEBHOOK_URL ? 'configured' : 'missing',\n          timestamp\n        }\n      });\n\n    } catch (error: any) {\n      console.error('Weekly reminder send error:', error);\n      res.status(500).json({ message: 'Failed to send weekly reminders', error: error.message });\n    }\n  });\n\n  app.post('/api/appointments/reminders/daily', authenticateToken, requireRole(['admin', 'staff']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { appointmentIds, customMessage } = req.body;\n      \n      if (!appointmentIds || !Array.isArray(appointmentIds) || appointmentIds.length === 0) {\n        return res.status(400).json({ message: 'appointmentIds array is required' });\n      }\n\n      const results = [];\n      const timestamp = new Date().toISOString();\n\n      for (const appointmentId of appointmentIds) {\n        try {\n          const appointment = await storage.getAppointmentWithDetails(appointmentId);\n          if (!appointment) {\n            results.push({ appointmentId, success: false, error: 'Appointment not found' });\n            continue;\n          }\n\n          // Check for existing successful reminder to prevent duplicates\n          const existingReminder = await storage.getAppointmentReminderByAppointmentAndType(appointmentId, 'daily');\n          if (existingReminder && existingReminder.webhookResponse) {\n            results.push({ appointmentId, success: false, error: 'Daily reminder already sent', skipped: true, patientName: `${appointment.patient?.firstName} ${appointment.patient?.lastName}` });\n            continue;\n          }\n\n          // Generate unique requestId for this appointment\n          const requestId = `daily_${appointmentId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n          // Format reminder message  \n          const appointmentDate = new Date(appointment.appointmentDate);\n          const dayName = appointmentDate.toLocaleDateString('en-US', { weekday: 'long' });\n          const timeStr = appointmentDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\n          \n          // Use custom message if provided, otherwise use default\n          let reminderMessage = customMessage || `Hello ${appointment.patient?.firstName} ${appointment.patient?.lastName}! ⏰ Reminder: You have an appointment tomorrow (${dayName}) at ${timeStr} with Dr ${appointment.doctor?.name}. Please arrive 15 minutes early.`;\n          \n          // Replace placeholders in custom message\n          if (customMessage) {\n            reminderMessage = customMessage\n              .replace(/\\[name and Last name\\]/g, `${appointment.patient?.firstName} ${appointment.patient?.lastName}`)\n              .replace(/\\[time\\]/g, timeStr)\n              .replace(/\\[name\\]/g, appointment.doctor?.name || 'Doctor');\n          }\n\n          // Prepare clean webhook payload for n8n\n          const webhookPayload = {\n            patients: [\n              {\n                id: appointment.patient?.id,\n                firstName: appointment.patient?.firstName,\n                lastName: appointment.patient?.lastName,\n                phoneNumber: appointment.patient?.phone,\n                reminderMessage: reminderMessage,\n                reminderType: \"daily\",\n                appointmentDate: appointment.appointmentDate\n              }\n            ],\n            requestId: requestId,\n            timestamp: timestamp,\n            messageType: \"daily_reminder\"\n          };\n\n          // Send to webhook\n          if (process.env.N8N_BIRTHDAY_WEBHOOK_URL) {\n            console.log('Sending webhook to:', process.env.N8N_BIRTHDAY_WEBHOOK_URL);\n            console.log('Webhook payload:', JSON.stringify(webhookPayload, null, 2));\n            \n            try {\n              const response = await fetch(process.env.N8N_BIRTHDAY_WEBHOOK_URL, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(webhookPayload)\n              });\n\n              const responseText = await response.text();\n              console.log('Webhook response status:', response.status, response.statusText);\n              console.log('Webhook response body:', responseText);\n              \n              if (response.ok) {\n                // Only create reminder record after successful send\n                await storage.insertAppointmentReminder({\n                  appointmentId,\n                  patientId: appointment.patientId,\n                  reminderType: 'daily',\n                  requestId,\n                  webhookResponse: responseText,\n                });\n                results.push({ appointmentId, success: true, message: 'Daily reminder sent', patientName: `${appointment.patient?.firstName} ${appointment.patient?.lastName}` });\n              } else {\n                console.error('Webhook failed with status:', response.status, response.statusText);\n                results.push({ appointmentId, success: false, error: `Webhook failed: ${response.status} ${response.statusText}`, patientName: `${appointment.patient?.firstName} ${appointment.patient?.lastName}` });\n              }\n            } catch (fetchError: any) {\n              console.error('Webhook fetch error:', fetchError);\n              results.push({ appointmentId, success: false, error: `Webhook error: ${fetchError.message}`, patientName: `${appointment.patient?.firstName} ${appointment.patient?.lastName}` });\n            }\n          } else {\n            console.log('N8N_BIRTHDAY_WEBHOOK_URL not configured, skipping webhook send');\n            results.push({ appointmentId, success: false, error: 'Webhook URL not configured' });\n          }\n        } catch (error: any) {\n          results.push({ appointmentId, success: false, error: error.message });\n        }\n      }\n\n      const successful = results.filter(r => r.success).length;\n      res.json({\n        message: `Sent ${successful} of ${appointmentIds.length} daily reminders`,\n        results\n      });\n\n    } catch (error: any) {\n      console.error('Daily reminder send error:', error);\n      res.status(500).json({ message: 'Failed to send daily reminders', error: error.message });\n    }\n  });\n\n  // Get reminder statuses for appointments\n  app.post('/api/appointments/reminders/statuses', authenticateToken, requireRole(['admin', 'staff']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { appointmentIds } = req.body;\n      \n      if (!appointmentIds || !Array.isArray(appointmentIds)) {\n        return res.status(400).json({ message: 'appointmentIds array is required' });\n      }\n      \n      const statuses = await storage.getAppointmentReminderStatuses(appointmentIds);\n      res.json(statuses);\n    } catch (error: any) {\n      console.error('Failed to fetch reminder statuses:', error);\n      res.status(500).json({ message: 'Failed to fetch reminder statuses', error: error.message });\n    }\n  });\n\n  // Check-in routes\n  app.post('/api/checkins', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { paymentAmount, doctorId, priority, ...checkInBody } = req.body;\n      \n      // Server-side validation for payment amount\n      if (paymentAmount !== undefined) {\n        if (typeof paymentAmount !== 'number' || isNaN(paymentAmount)) {\n          return res.status(400).json({ message: 'Payment amount must be a valid number' });\n        }\n        if (paymentAmount <= 0) {\n          return res.status(400).json({ message: 'Payment amount must be greater than 0' });\n        }\n      }\n\n      // Validate payment method requirements\n      const paymentMethod = checkInBody.paymentMethod;\n      if ((paymentMethod === 'cash' || paymentMethod === 'both') && !paymentAmount) {\n        return res.status(400).json({ message: 'Payment amount is required for cash payments' });\n      }\n\n      // Validate medical aid eligibility for medical aid payments\n      if (paymentMethod === 'medical_aid' || paymentMethod === 'both') {\n        const patient = await storage.getPatient(checkInBody.patientId);\n        if (!patient || !patient.medicalAidScheme || !patient.medicalAidNumber) {\n          return res.status(400).json({ \n            message: 'Selected patient is not eligible for medical aid payment. Patient must have medical aid details on file.' \n          });\n        }\n      }\n\n      const checkInData = insertCheckInSchema.parse(checkInBody);\n      const checkIn = await storage.createCheckIn(checkInData);\n\n      // Create payment record if payment amount is provided\n      if (paymentAmount && paymentAmount > 0) {\n        const paymentData = insertPaymentSchema.parse({\n          patientId: checkIn.patientId,\n          checkInId: checkIn.id,\n          amount: paymentAmount, // Schema handles coercion to string\n          paymentMethod: checkIn.paymentMethod\n        });\n        await storage.createPayment(paymentData);\n      }\n\n      // Auto-create medical aid claim if payment method includes medical aid\n      if (checkIn.paymentMethod === 'medical_aid' || checkIn.paymentMethod === 'both') {\n        console.log('📋 Creating medical aid claim for payment method:', checkIn.paymentMethod);\n        try {\n          const medicalAidClaimData = {\n            patientId: checkIn.patientId,\n            checkInId: checkIn.id,\n            status: 'pending' as const,\n            notes: 'Auto-created claim from check-in process'\n          };\n          console.log('📋 Medical aid claim data:', medicalAidClaimData);\n          const createdClaim = await storage.createMedicalAidClaim(medicalAidClaimData);\n          console.log('✅ Successfully created medical aid claim:', createdClaim.id);\n          \n          // Log medical aid claim creation\n          if (req.user) {\n            await storage.createActivityLog({\n              userId: req.user.id,\n              action: 'create_medical_aid_claim',\n              details: `Auto-created medical aid claim for patient ID: ${checkIn.patientId}`\n            });\n          }\n        } catch (claimError: any) {\n          // Log error but don't fail the entire check-in process\n          console.error('❌ Failed to create medical aid claim:', claimError);\n          console.error('❌ Error details:', claimError.message, claimError.stack);\n          if (req.user) {\n            await storage.createActivityLog({\n              userId: req.user.id,\n              action: 'medical_aid_claim_error',\n              details: `Failed to auto-create medical aid claim for patient ID: ${checkIn.patientId}. Error: ${claimError.message}`\n            });\n          }\n        }\n      }\n\n      // If there's an appointment, update its status to confirmed\n      if (checkIn.appointmentId) {\n        await storage.updateAppointment(checkIn.appointmentId, { status: 'confirmed' });\n      }\n\n      // Add to queue\n      const queueData = insertQueueSchema.parse({\n        patientId: checkIn.patientId,\n        checkInId: checkIn.id,\n        doctorId: doctorId,\n        status: 'waiting',\n        priority: priority || 0\n      });\n\n      await storage.addToQueue(queueData);\n      broadcastQueueUpdate();\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'patient_checkin',\n          details: `Patient checked in: ID ${checkIn.patientId}${paymentAmount ? ` with payment of R${paymentAmount}` : ''}`\n        });\n      }\n\n      res.status(201).json(checkIn);\n    } catch (error: any) {\n      console.error('Check-in error:', error);\n      \n      // Handle specific validation errors\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: 'Invalid check-in data provided.',\n          errors: error.errors \n        });\n      }\n      \n      // Handle payment-related errors\n      if (error.message?.includes('payment amount') || error.message?.includes('Payment amount')) {\n        return res.status(400).json({ message: error.message });\n      }\n      \n      // Handle medical aid eligibility errors\n      if (error.message?.includes('medical aid') || error.message?.includes('eligible')) {\n        return res.status(400).json({ message: error.message });\n      }\n      \n      // Handle database constraint violations\n      if (error.code === '23505' || error.message?.includes('unique')) {\n        return res.status(409).json({ \n          message: 'This patient has already been checked in today.' \n        });\n      }\n      \n      res.status(400).json({ message: 'Failed to check in patient' });\n    }\n  });\n\n  // Check-in GET route\n  app.get('/api/checkins', authenticateToken, async (req, res) => {\n    try {\n      const { date } = req.query;\n      \n      if (date && typeof date === 'string') {\n        const checkInDate = new Date(date);\n        const checkIns = await storage.getCheckInsByDate(checkInDate);\n        res.json(checkIns);\n      } else {\n        // If no date provided, return empty array or all check-ins for today\n        const today = new Date();\n        const checkIns = await storage.getCheckInsByDate(today);\n        res.json(checkIns);\n      }\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch check-ins' });\n    }\n  });\n\n  // Queue routes\n  app.get('/api/queue', authenticateToken, async (req, res) => {\n    try {\n      const { doctorId } = req.query;\n      let queueItems;\n      if (doctorId && typeof doctorId === 'string') {\n        queueItems = await storage.getQueueByDoctor(doctorId);\n      } else {\n        queueItems = await storage.getQueue();\n      }\n      res.json(queueItems);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch queue' });\n    }\n  });\n\n  app.put('/api/queue/:id/status', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      const now = new Date();\n      let startedAt, completedAt;\n      \n      if (status === 'in_progress') {\n        startedAt = now;\n      } else if (status === 'completed') {\n        completedAt = now;\n      }\n\n      const queueItem = await storage.updateQueueStatus(id, status, startedAt, completedAt);\n      broadcastQueueUpdate();\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'update_queue_status',\n          details: `Updated queue status to ${status} for queue ID: ${id}`\n        });\n      }\n\n      res.json(queueItem);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update queue status' });\n    }\n  });\n\n  app.delete('/api/queue/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.removeFromQueue(id);\n      broadcastQueueUpdate();\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'remove_from_queue',\n          details: `Removed from queue: ID ${id}`\n        });\n      }\n\n      res.json({ message: 'Removed from queue successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to remove from queue' });\n    }\n  });\n\n  // Consultation routes\n  app.post('/api/consultations', authenticateToken, requireRole(['doctor', 'admin']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const consultationData = insertConsultationSchema.parse(req.body);\n      const consultation = await storage.createConsultation(consultationData);\n\n      // Update queue status to completed only if queueId exists\n      if (consultation.queueId && consultation.queueId.trim()) {\n        await storage.updateQueueStatus(consultation.queueId, 'completed', undefined, new Date());\n        broadcastQueueUpdate();\n      }\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'create_consultation',\n          details: `Completed consultation for patient ID: ${consultation.patientId}`\n        });\n      }\n\n      res.status(201).json(consultation);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to create consultation' });\n    }\n  });\n\n  app.get('/api/consultations/patient/:patientId', authenticateToken, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const consultations = await storage.getConsultationsByPatient(patientId);\n      res.json(consultations);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch consultations' });\n    }\n  });\n\n  // Helper function to check if user has access to a consultation\n  async function hasConsultationAccess(userId: string, consultationId: string, userRole: string): Promise<boolean> {\n    if (userRole === 'admin') return true;\n    \n    const consultation = await storage.getConsultation(consultationId);\n    if (!consultation) return false;\n    \n    // Doctors can access consultations they created\n    if (userRole === 'doctor' && consultation.doctorId === userId) return true;\n    \n    return false;\n  }\n\n  // Medical attachment routes\n  app.post('/api/medical-attachments', authenticateToken, medicalUpload.array('files', 5), async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {\n        return res.status(400).json({ message: 'No files uploaded' });\n      }\n\n      const { consultationId } = req.body;\n      if (!consultationId) {\n        return res.status(400).json({ message: 'Consultation ID is required' });\n      }\n\n      // Check if user has access to this consultation\n      if (!req.user || !(await hasConsultationAccess(req.user.id, consultationId, req.user.role))) {\n        return res.status(403).json({ message: 'Access denied: You do not have permission to upload files for this consultation' });\n      }\n\n      const attachments = [];\n\n      for (const file of req.files) {\n        const attachmentData = {\n          consultationId,\n          fileName: file.filename,\n          originalName: file.originalname,\n          filePath: file.path,\n          fileSize: file.size,\n          mimeType: file.mimetype,\n          uploadedBy: req.user?.id || ''\n        };\n\n        const attachment = await storage.createMedicalAttachment(attachmentData);\n        attachments.push(attachment);\n      }\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'upload_medical_attachment',\n          details: `Uploaded ${attachments.length} medical file(s) for consultation: ${consultationId}`\n        });\n      }\n\n      res.status(201).json(attachments);\n    } catch (error) {\n      console.error('Medical attachment upload error:', error);\n      res.status(400).json({ message: 'Failed to upload medical attachments' });\n    }\n  });\n\n  app.get('/api/medical-attachments/:consultationId', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { consultationId } = req.params;\n      \n      // Check if user has access to this consultation\n      if (!req.user || !(await hasConsultationAccess(req.user.id, consultationId, req.user.role))) {\n        return res.status(403).json({ message: 'Access denied: You do not have permission to view attachments for this consultation' });\n      }\n      \n      const attachments = await storage.getMedicalAttachmentsByConsultation(consultationId);\n      res.json(attachments);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch medical attachments' });\n    }\n  });\n\n  app.get('/api/medical-attachments/file/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const attachment = await storage.getMedicalAttachment(id);\n      \n      if (!attachment) {\n        return res.status(404).json({ message: 'Medical attachment not found' });\n      }\n\n      // Check if user has access to this consultation\n      if (!req.user || !(await hasConsultationAccess(req.user.id, attachment.consultationId, req.user.role))) {\n        return res.status(403).json({ message: 'Access denied: You do not have permission to download this file' });\n      }\n\n      // Set proper headers for file download\n      res.setHeader('Content-Disposition', `attachment; filename=\"${attachment.originalName}\"`);\n      res.setHeader('Content-Type', attachment.mimeType);\n      res.sendFile(path.resolve(attachment.filePath));\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to download medical attachment' });\n    }\n  });\n\n  app.delete('/api/medical-attachments/:id', authenticateToken, requireRole(['doctor', 'admin']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const attachment = await storage.getMedicalAttachment(id);\n      \n      if (!attachment) {\n        return res.status(404).json({ message: 'Medical attachment not found' });\n      }\n\n      // Check if user has access to this consultation\n      if (!req.user || !(await hasConsultationAccess(req.user.id, attachment.consultationId, req.user.role))) {\n        return res.status(403).json({ message: 'Access denied: You do not have permission to delete this file' });\n      }\n\n      // Delete file from filesystem\n      const fs = require('fs');\n      if (fs.existsSync(attachment.filePath)) {\n        fs.unlinkSync(attachment.filePath);\n      }\n\n      // Delete database record\n      await storage.deleteMedicalAttachment(id);\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'delete_medical_attachment',\n          details: `Deleted medical attachment: ${attachment.originalName}`\n        });\n      }\n\n      res.json({ message: 'Medical attachment deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete medical attachment' });\n    }\n  });\n\n  // Payment routes\n  app.post('/api/payments', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const paymentData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(paymentData);\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'create_payment',\n          details: `Processed payment: R${payment.amount} via ${payment.paymentMethod}`\n        });\n      }\n\n      res.status(201).json(payment);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to create payment' });\n    }\n  });\n\n  app.get('/api/payments', authenticateToken, requireRole(['admin', 'staff']), async (req, res) => {\n    try {\n      const { date } = req.query;\n      const paymentDate = date ? new Date(date as string) : new Date();\n      const payments = await storage.getPaymentsByDate(paymentDate);\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch payments' });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', authenticateToken, async (req, res) => {\n    try {\n      const today = new Date();\n      const stats = await storage.getDashboardStats(today);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch dashboard stats' });\n    }\n  });\n\n  // Monthly comparison stats\n  app.get('/api/dashboard/monthly-stats', authenticateToken, async (req, res) => {\n    try {\n      const monthsBack = req.query.months ? parseInt(req.query.months as string) : 12;\n      const stats = await storage.getMonthlyStats(monthsBack);\n      res.json(stats);\n    } catch (error) {\n      console.error('Failed to fetch monthly stats:', error);\n      res.status(500).json({ message: 'Failed to fetch monthly stats' });\n    }\n  });\n\n  // Patient retention analytics\n  app.get('/api/dashboard/patient-retention', authenticateToken, async (req, res) => {\n    try {\n      const stats = await storage.getPatientRetentionStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Failed to fetch patient retention stats:', error);\n      res.status(500).json({ message: 'Failed to fetch patient retention stats' });\n    }\n  });\n\n  // Peak hours analysis\n  app.get('/api/dashboard/peak-hours', authenticateToken, async (req, res) => {\n    try {\n      const stats = await storage.getPeakHoursAnalysis();\n      res.json(stats);\n    } catch (error) {\n      console.error('Failed to fetch peak hours analysis:', error);\n      res.status(500).json({ message: 'Failed to fetch peak hours analysis' });\n    }\n  });\n\n  // Activity logs\n  app.get('/api/activity-logs', authenticateToken, requireRole(['admin']), async (req, res) => {\n    try {\n      const { limit } = req.query;\n      const logs = await storage.getActivityLogs(limit ? parseInt(limit as string) : undefined);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch activity logs' });\n    }\n  });\n\n  // Medical Aid Claims routes\n  app.get('/api/medical-aid-claims', authenticateToken, requireRole(['staff', 'admin']), async (req, res) => {\n    try {\n      const claims = await storage.getAllMedicalAidClaims();\n      res.json(claims);\n    } catch (error) {\n      console.error('Failed to fetch medical aid claims:', error);\n      res.status(500).json({ message: 'Failed to fetch medical aid claims' });\n    }\n  });\n\n  app.put('/api/medical-aid-claims/:id', authenticateToken, requireRole(['staff', 'admin']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Use restricted schema for updates - only allow updating safe fields\n      const updateSchema = updateMedicalAidClaimSchema.partial().extend({\n        // When setting status to 'submitted', automatically set submittedAt to current time\n        // When setting status to 'approved', automatically set approvedAt to current time\n        submittedAt: z.coerce.date().optional(),\n        approvedAt: z.coerce.date().optional(),\n      });\n      \n      let claimData = updateSchema.parse(req.body);\n      \n      // Auto-set timestamps based on status changes\n      if (claimData.status === 'submitted' && !claimData.submittedAt) {\n        claimData.submittedAt = new Date();\n      }\n      if (claimData.status === 'approved' && !claimData.approvedAt) {\n        claimData.approvedAt = new Date();\n      }\n      \n      const updatedClaim = await storage.updateMedicalAidClaim(id, claimData);\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'update_medical_aid_claim',\n          details: `Updated medical aid claim status to: ${claimData.status || 'unknown'}`\n        });\n      }\n\n      res.json(updatedClaim);\n    } catch (error: any) {\n      console.error('Medical aid claim update error:', error);\n      \n      // Handle Zod validation errors\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: 'Invalid claim data provided.',\n          errors: error.errors \n        });\n      }\n      \n      res.status(400).json({ message: 'Failed to update medical aid claim' });\n    }\n  });\n\n  // Customer Relations routes\n\n  app.get('/api/birthday-wishes', authenticateToken, requireRole(['staff', 'admin']), async (req, res) => {\n    try {\n      const today = new Date();\n      const birthdayWishes = await storage.getBirthdayWishesByDate(today);\n      res.json(birthdayWishes);\n    } catch (error) {\n      console.error('Failed to fetch birthday wishes:', error);\n      res.status(500).json({ message: 'Failed to fetch birthday wishes' });\n    }\n  });\n\n  app.post('/api/send-birthday-wish', authenticateToken, requireRole(['staff', 'admin']), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Validate request body with Zod\n      const bodySchema = z.object({\n        patientId: z.string().min(1, 'Patient ID is required'),\n        customMessage: z.string().optional()\n      });\n      \n      const validationResult = bodySchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: 'Invalid request data',\n          errors: validationResult.error.errors \n        });\n      }\n\n      const { patientId, customMessage } = validationResult.data;\n\n      // Get patient details\n      const patient = await storage.getPatient(patientId);\n      if (!patient) {\n        return res.status(404).json({ message: 'Patient not found' });\n      }\n\n      // Check for idempotency - prevent duplicate birthday wishes for same patient on same day\n      const today = new Date();\n      const existingWishes = await storage.getBirthdayWishesByDate(today);\n      const alreadySent = existingWishes.some(wish => wish.patientId === patientId);\n      \n      if (alreadySent) {\n        return res.status(409).json({ \n          message: 'Birthday wish already sent to this patient today' \n        });\n      }\n\n      // Generate birthday message\n      const message = customMessage?.trim() || \n        `Happy Birthday ${patient.firstName}! 🎉 Wishing you a wonderful year ahead filled with health and happiness. From all of us at the clinic! 🎂`;\n\n      // Send to N8N birthday webhook\n      const webhookUrl = process.env.N8N_BIRTHDAY_WEBHOOK_URL;\n      if (!webhookUrl) {\n        return res.status(500).json({ message: 'Birthday webhook URL not configured' });\n      }\n\n      const webhookPayload = {\n        patients: [\n          {\n            id: parseInt(patient.id) || patient.id,\n            firstName: patient.firstName,\n            lastName: patient.lastName,\n            phoneNumber: patient.phone,\n            birthdayMessage: message\n          }\n        ],\n        requestId: `birthday_req_${new Date().toISOString().split('T')[0].replace(/-/g, '')}`,\n        timestamp: new Date().toISOString(),\n        messageType: \"birthday\"\n      };\n\n      console.log('Sending birthday webhook POST to:', webhookUrl);\n      console.log('Birthday webhook payload:', JSON.stringify(webhookPayload, null, 2));\n\n      const response = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(webhookPayload),\n        signal: AbortSignal.timeout(10000) // 10 second timeout\n      });\n\n      if (!response.ok) {\n        console.error(`Webhook failed with status ${response.status}: ${response.statusText}`);\n        return res.status(502).json({ \n          message: 'Failed to send message - webhook service unavailable' \n        });\n      }\n\n      const webhookResponse = await response.text();\n\n      // Save birthday wish record\n      await storage.createBirthdayWish({\n        patientId: patient.id,\n        sentBy: req.user!.id,\n        message: message,\n        webhookResponse: webhookResponse\n      });\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'send_birthday_wish',\n          details: `Sent birthday wish to ${patient.firstName} ${patient.lastName}`\n        });\n      }\n\n      res.json({ \n        message: message, \n        success: true,\n        webhookResponse: response.ok \n      });\n    } catch (error: any) {\n      console.error('Failed to send birthday wish:', error);\n      \n      // Handle specific error types\n      if (error.name === 'AbortError') {\n        return res.status(504).json({ message: 'Request timeout - webhook service not responding' });\n      }\n      \n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: 'Invalid request data',\n          errors: error.errors \n        });\n      }\n      \n      res.status(500).json({ message: 'Failed to send birthday wish' });\n    }\n  });\n\n  // Broadcast message endpoint\n  app.post('/api/send-broadcast', authenticateToken, requireRole(['staff', 'admin']), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Validate request body with Zod\n      const bodySchema = z.object({\n        message: z.string().min(1, 'Message is required')\n      });\n      \n      const validationResult = bodySchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: 'Invalid request data',\n          errors: validationResult.error.errors \n        });\n      }\n\n      const { message } = validationResult.data;\n\n      // Get webhook URL\n      const webhookUrl = process.env.N8N_WEBHOOK_URL;\n      if (!webhookUrl) {\n        return res.status(500).json({ message: 'Webhook URL not configured' });\n      }\n\n      // Generate unique requestId for this broadcast\n      const requestId = `broadcast_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // Prepare clean webhook payload for n8n\n      const webhookPayload = {\n        message: message,\n        requestId: requestId,\n        timestamp: new Date().toISOString(),\n        messageType: \"broadcast\"\n      };\n\n      try {\n        // Build query parameters for POST request\n        const params = new URLSearchParams({\n          message: message,\n          requestId: requestId,\n          timestamp: new Date().toISOString(),\n          messageType: \"broadcast\"\n        });\n        \n        const postUrl = `${webhookUrl}?${params.toString()}`;\n        console.log('Sending webhook POST to:', postUrl);\n        \n        const response = await fetch(postUrl, {\n          method: 'POST',\n          signal: AbortSignal.timeout(10000) // 10 second timeout\n        });\n\n        const responseText = await response.text();\n        console.log('Webhook response status:', response.status);\n        console.log('Webhook response text:', responseText);\n\n        // Log activity\n        await storage.createActivityLog({\n          userId: req.user!.id,\n          action: 'send_broadcast',\n          details: `Sent broadcast message: \"${message}\" - Status: ${response.status}`\n        });\n\n        res.status(response.ok ? 200 : 502).json({\n          success: response.ok,\n          message: response.ok ? 'Broadcast message sent successfully' : `Webhook failed with status ${response.status}`,\n          statusCode: response.status,\n          webhookResponse: responseText\n        });\n\n      } catch (error: any) {\n        console.error('Failed to send broadcast message:', error);\n        let errorMessage = 'Webhook error';\n        if (error.name === 'AbortError') {\n          errorMessage = 'Webhook timeout';\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n        \n        res.status(504).json({ \n          success: false,\n          message: 'Failed to send broadcast message to webhook',\n          error: errorMessage\n        });\n      }\n\n    } catch (error) {\n      console.error('Failed to send broadcast:', error);\n      res.status(500).json({ message: 'Failed to send broadcast message' });\n    }\n  });\n\n  // Deprecated health advice endpoint\n  app.post('/api/send-health-advice', authenticateToken, requireRole(['staff', 'admin']), async (req: AuthenticatedRequest, res) => {\n    res.status(410).json({ \n      message: 'This endpoint is deprecated. Please use /api/send-broadcast instead.',\n      deprecated: true \n    });\n  });\n\n  // Legacy health advice endpoint (to be removed)\n  app.post('/api/send-health-advice-legacy', authenticateToken, requireRole(['staff', 'admin']), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Validate request body with Zod\n      const bodySchema = z.object({\n        adviceId: z.string().optional(),\n        customMessage: z.string().optional(),\n        patientIds: z.array(z.string().min(1)).min(1, 'At least one patient ID is required')\n      }).refine(\n        (data) => data.adviceId || data.customMessage,\n        { message: 'Either adviceId or customMessage must be provided' }\n      );\n      \n      const validationResult = bodySchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: 'Invalid request data',\n          errors: validationResult.error.errors \n        });\n      }\n\n      const { adviceId, customMessage, patientIds } = validationResult.data;\n\n      const predefinedAdvice = [\n        {\n          id: '1',\n          title: 'Stay Hydrated',\n          content: 'Remember to drink at least 8 glasses of water daily. Proper hydration is essential for your overall health and well-being.'\n        },\n        {\n          id: '2', \n          title: 'Regular Exercise',\n          content: 'Aim for at least 30 minutes of moderate exercise daily. Even a simple walk can make a significant difference to your health.'\n        },\n        {\n          id: '3',\n          title: 'Balanced Diet',\n          content: 'Include plenty of fruits, vegetables, and whole grains in your diet. A balanced diet provides essential nutrients for optimal health.'\n        },\n        {\n          id: '4',\n          title: 'Regular Check-ups',\n          content: 'Schedule regular medical check-ups to monitor your health and catch any potential issues early.'\n        },\n        {\n          id: '5',\n          title: 'Mental Health',\n          content: 'Take time for mental health. Practice stress management techniques like meditation, deep breathing, or talking to someone you trust.'\n        }\n      ];\n\n      let finalMessage = customMessage;\n      if (adviceId) {\n        const advice = predefinedAdvice.find(a => a.id === adviceId);\n        if (advice) {\n          finalMessage = `${advice.title}\\n\\n${advice.content}`;\n        }\n      }\n\n      if (!finalMessage) {\n        return res.status(400).json({ message: 'Unable to generate health advice message' });\n      }\n\n      // Get webhook URL\n      const webhookUrl = process.env.N8N_WEBHOOK_URL;\n      if (!webhookUrl) {\n        return res.status(500).json({ message: 'Webhook URL not configured' });\n      }\n\n      let sentCount = 0;\n      const results = [];\n\n      // Send to each patient\n      for (const patientId of patientIds) {\n        try {\n          const patient = await storage.getPatient(patientId);\n          if (!patient) {\n            results.push({ patientId, success: false, error: 'Patient not found' });\n            continue;\n          }\n\n          const webhookPayload = {\n            patients: [\n              {\n                id: parseInt(patient.id) || patient.id,\n                firstName: patient.firstName,\n                lastName: patient.lastName,\n                phoneNumber: patient.phone,\n                message: finalMessage\n              }\n            ],\n            requestId: `health_advice_req_${new Date().toISOString().split('T')[0].replace(/-/g, '')}`,\n            timestamp: new Date().toISOString()\n          };\n\n          const response = await fetch(webhookUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(webhookPayload),\n            signal: AbortSignal.timeout(10000) // 10 second timeout\n          });\n\n          if (response.ok) {\n            sentCount++;\n            results.push({ patientId, success: true });\n          } else {\n            console.error(`Webhook failed for patient ${patientId}: ${response.status} ${response.statusText}`);\n            results.push({ patientId, success: false, error: `Webhook failed: ${response.status}` });\n          }\n        } catch (error: any) {\n          let errorMessage = 'Send failed';\n          if (error.name === 'AbortError') {\n            errorMessage = 'Timeout';\n          } else if (error.message) {\n            errorMessage = error.message;\n          }\n          results.push({ patientId, success: false, error: errorMessage });\n        }\n      }\n\n      // Log activity\n      if (req.user) {\n        await storage.createActivityLog({\n          userId: req.user.id,\n          action: 'send_health_advice',\n          details: `Sent health advice to ${sentCount} patients`\n        });\n      }\n\n      res.json({ \n        sentCount,\n        totalRequested: patientIds.length,\n        results,\n        message: finalMessage\n      });\n    } catch (error: any) {\n      console.error('Failed to send health advice:', error);\n      \n      // Handle specific error types\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: 'Invalid request data',\n          errors: error.errors \n        });\n      }\n      \n      res.status(500).json({ message: 'Failed to send health advice' });\n    }\n  });\n\n  // PUBLIC API ENDPOINTS FOR N8N WHATSAPP WORKFLOW\n  // These endpoints don't require authentication for external n8n access\n\n  // Check if patient exists by phone number\n  app.get('/api/public/patient/lookup/:phone', async (req, res) => {\n    try {\n      const { phone } = req.params;\n      \n      if (!phone || phone.length < 10) {\n        return res.status(400).json({ \n          exists: false, \n          message: 'Valid phone number required' \n        });\n      }\n\n      // Clean phone number (remove spaces, dashes, etc.)\n      const cleanPhone = phone.replace(/[\\s\\-\\(\\)]/g, '');\n      \n      const patient = await storage.getPatientByPhone(cleanPhone);\n      \n      if (patient) {\n        res.json({\n          exists: true,\n          patientId: patient.id,\n          firstName: patient.firstName,\n          lastName: patient.lastName,\n          phone: patient.phone\n        });\n      } else {\n        res.json({\n          exists: false,\n          message: 'Patient not found'\n        });\n      }\n    } catch (error: any) {\n      console.error('Patient lookup error:', error);\n      res.status(500).json({ \n        exists: false, \n        message: 'Error checking patient existence' \n      });\n    }\n  });\n\n  // Public patient registration endpoint\n  app.post('/api/public/patient/register', async (req, res) => {\n    try {\n      // Validate request body\n      const bodySchema = z.object({\n        firstName: z.string().min(1, 'First name is required'),\n        lastName: z.string().min(1, 'Last name is required'),\n        phone: z.string().min(10, 'Valid phone number is required'),\n        email: z.string().min(1, 'Email is required').email('Valid email is required'),\n        dateOfBirth: z.string(),\n        gender: z.enum(['male', 'female', 'other']),\n        idNumber: z.string().min(1, 'ID number is required'),\n        address: z.string().optional().or(z.literal(\"\")),\n        medicalAidScheme: z.string().optional().or(z.literal(\"\")),\n        medicalAidNumber: z.string().optional().or(z.literal(\"\")),\n        allergies: z.string().optional().or(z.literal(\"\"))\n      });\n\n      const validationResult = bodySchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: 'Invalid patient data',\n          errors: validationResult.error.errors\n        });\n      }\n\n      const patientData = validationResult.data;\n\n      // Check if patient already exists by phone or ID number\n      const existingPatient = await storage.getPatientByPhone(patientData.phone);\n      if (existingPatient) {\n        return res.status(409).json({\n          success: false,\n          message: 'Patient with this phone number already exists',\n          patientId: existingPatient.id\n        });\n      }\n\n      // Create new patient\n      const newPatient = await storage.createPatient({\n        ...patientData,\n        dateOfBirth: new Date(patientData.dateOfBirth)\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'Patient registered successfully',\n        patientId: newPatient.id,\n        patient: {\n          id: newPatient.id,\n          firstName: newPatient.firstName,\n          lastName: newPatient.lastName,\n          phone: newPatient.phone,\n          email: newPatient.email\n        }\n      });\n\n    } catch (error: any) {\n      console.error('Patient registration error:', error);\n      \n      if (error.message?.includes('unique constraint')) {\n        return res.status(409).json({\n          success: false,\n          message: 'Patient with this ID number or phone already exists'\n        });\n      }\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to register patient'\n      });\n    }\n  });\n\n  // Public appointment booking endpoint\n  app.post('/api/public/appointment/book', async (req, res) => {\n    try {\n      const bodySchema = z.object({\n        patientId: z.string().min(1, 'Patient ID is required'),\n        doctorId: z.string().min(1, 'Doctor ID is required'),\n        appointmentDate: z.string(),\n        appointmentType: z.string().min(1, 'Appointment type is required'),\n        notes: z.string().optional()\n      });\n\n      const validationResult = bodySchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({\n          success: false,\n          message: 'Invalid appointment data',\n          errors: validationResult.error.errors\n        });\n      }\n\n      const { patientId, doctorId, appointmentDate, appointmentType, notes } = validationResult.data;\n\n      // Verify patient exists\n      const patient = await storage.getPatient(patientId);\n      if (!patient) {\n        return res.status(404).json({\n          success: false,\n          message: 'Patient not found'\n        });\n      }\n\n      // Verify doctor exists\n      const doctor = await storage.getUser(doctorId);\n      if (!doctor || doctor.role !== 'doctor') {\n        return res.status(404).json({\n          success: false,\n          message: 'Doctor not found'\n        });\n      }\n\n      // Create appointment\n      const newAppointment = await storage.createAppointment({\n        patientId,\n        doctorId,\n        appointmentDate: new Date(appointmentDate),\n        appointmentType,\n        notes: notes || '',\n        status: 'scheduled'\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'Appointment booked successfully',\n        appointmentId: newAppointment.id,\n        appointment: {\n          id: newAppointment.id,\n          patientName: `${patient.firstName} ${patient.lastName}`,\n          doctorName: doctor.name,\n          appointmentDate: newAppointment.appointmentDate,\n          appointmentType: newAppointment.appointmentType,\n          status: newAppointment.status\n        }\n      });\n\n    } catch (error: any) {\n      console.error('Appointment booking error:', error);\n      \n      if (error.message?.includes('unique constraint')) {\n        return res.status(409).json({\n          success: false,\n          message: 'Doctor is not available at this time slot'\n        });\n      }\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to book appointment'\n      });\n    }\n  });\n\n  // Get available doctors for appointment booking\n  app.get('/api/public/doctors', async (req, res) => {\n    try {\n      const allUsers = await storage.getAllUsers();\n      const availableDoctors = allUsers\n        .filter((user: User) => user.role === 'doctor' && user.isActive)\n        .map((doctor: User) => ({\n          id: doctor.id,\n          name: doctor.name,\n          email: doctor.email\n        }));\n\n      res.json({\n        success: true,\n        doctors: availableDoctors\n      });\n    } catch (error: any) {\n      console.error('Error fetching doctors:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch doctors'\n      });\n    }\n  });\n\n  // Serve uploaded files\n  // Static file serving for uploads with proper headers for inline viewing\n  app.use('/uploads', express.static('uploads', {\n    setHeaders: (res, path) => {\n      if (path.includes('patient-photos')) {\n        res.setHeader('Content-Disposition', 'inline');\n        res.setHeader('Content-Type', 'image/jpeg');\n      }\n    }\n  }));\n\n  return httpServer;\n}\n","size_bytes":78854},"server/storage.ts":{"content":"import { \n  users, patients, appointments, checkIns, queue, consultations, payments, activityLogs, medicalAttachments, medicalAidClaims, birthdayWishes, appointmentReminders, apiKeys,\n  type User, type InsertUser, type Patient, type InsertPatient, \n  type Appointment, type InsertAppointment, type CheckIn, type InsertCheckIn,\n  type Queue, type InsertQueue, type Consultation, type InsertConsultation,\n  type Payment, type InsertPayment, type ActivityLog, type InsertActivityLog,\n  type MedicalAttachment, type InsertMedicalAttachment, type MedicalAidClaim, type InsertMedicalAidClaim,\n  type BirthdayWish, type InsertBirthdayWish, type AppointmentReminder, type InsertAppointmentReminder,\n  type ApiKey, type InsertApiKey\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, lt, sql, isNotNull, asc, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Appointment reminder methods\n  insertAppointmentReminder(reminder: InsertAppointmentReminder): Promise<AppointmentReminder>;\n  getAppointmentReminderByAppointmentAndType(appointmentId: string, reminderType: 'weekly' | 'daily'): Promise<AppointmentReminder | undefined>;\n  updateAppointmentReminderResponse(requestId: string, response: string): Promise<void>;\n  getAppointmentReminderStatuses(appointmentIds: string[]): Promise<{appointmentId: string, weeklyReminder?: AppointmentReminder, dailyReminder?: AppointmentReminder}[]>;\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  getAllUsers(): Promise<User[]>;\n\n  // Patient methods\n  getPatient(id: string): Promise<Patient | undefined>;\n  getPatientByPhone(phone: string): Promise<Patient | undefined>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(id: string, patient: Partial<InsertPatient>): Promise<Patient>;\n  searchPatients(query: string): Promise<Patient[]>;\n  getAllPatients(): Promise<Patient[]>;\n\n  // Appointment methods\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment>;\n  getAppointmentsByDate(date: Date): Promise<Appointment[]>;\n  getAppointmentsByDoctor(doctorId: string, date?: Date): Promise<Appointment[]>;\n  getAppointmentsByPatient(patientId: string): Promise<Appointment[]>;\n  checkAppointmentConflict(doctorId: string, appointmentDate: Date, excludeId?: string): Promise<boolean>;\n  getAppointmentsBetweenDates(startDate: Date, endDate: Date): Promise<any[]>;\n  getAppointmentWithDetails(id: string): Promise<any | undefined>;\n  getAvailableAppointmentSlots(doctorId: string, date: Date): Promise<string[]>;\n  getAvailableAppointmentSlotsForAllDoctors(date: Date): Promise<Array<{doctorId: string, doctorName: string, availableSlots: string[]}>>;\n\n  // Check-in methods\n  createCheckIn(checkIn: InsertCheckIn): Promise<CheckIn>;\n  getCheckInsByDate(date: Date): Promise<CheckIn[]>;\n\n  // Queue methods\n  getQueue(): Promise<Queue[]>;\n  addToQueue(queueItem: InsertQueue): Promise<Queue>;\n  updateQueueStatus(id: string, status: string, startedAt?: Date, completedAt?: Date): Promise<Queue>;\n  removeFromQueue(id: string): Promise<void>;\n  getQueueByDoctor(doctorId: string): Promise<Queue[]>;\n\n  // Consultation methods\n  getConsultation(id: string): Promise<Consultation | undefined>;\n  createConsultation(consultation: InsertConsultation): Promise<Consultation>;\n  getConsultationsByPatient(patientId: string): Promise<Consultation[]>;\n  getConsultationsByDoctor(doctorId: string): Promise<Consultation[]>;\n  deleteConsultation(id: string): Promise<void>;\n\n  // Payment methods\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  getPaymentsByDate(date: Date): Promise<Payment[]>;\n  getTotalRevenue(startDate: Date, endDate: Date): Promise<number>;\n\n  // Activity log methods\n  createActivityLog(log: InsertActivityLog): Promise<ActivityLog>;\n  getActivityLogs(limit?: number): Promise<ActivityLog[]>;\n\n  // Medical attachment methods\n  createMedicalAttachment(attachment: InsertMedicalAttachment): Promise<MedicalAttachment>;\n  getMedicalAttachmentsByConsultation(consultationId: string): Promise<MedicalAttachment[]>;\n  deleteMedicalAttachment(id: string): Promise<void>;\n  getMedicalAttachment(id: string): Promise<MedicalAttachment | undefined>;\n  deleteMedicalAttachmentsByConsultation(consultationId: string): Promise<void>;\n\n  // Medical aid claim methods\n  createMedicalAidClaim(claim: InsertMedicalAidClaim): Promise<MedicalAidClaim>;\n  getAllMedicalAidClaims(): Promise<MedicalAidClaim[]>;\n  updateMedicalAidClaim(id: string, claim: Partial<InsertMedicalAidClaim>): Promise<MedicalAidClaim>;\n\n  // Dashboard stats\n  getDashboardStats(date: Date): Promise<{\n    todayAppointments: number;\n    queueCount: number;\n    todayRevenue: number;\n    newPatients: number;\n  }>;\n\n  // Monthly comparison stats\n  getMonthlyStats(monthsBack: number): Promise<{\n    monthlyData: Array<{\n      month: string;\n      year: number;\n      revenue: number;\n      appointments: number;\n      patients: number;\n      completionRate: number;\n    }>;\n  }>;\n\n  // Patient retention and trends analytics\n  getPatientRetentionStats(): Promise<{\n    newVsReturning: {\n      newPatients: number;\n      returningPatients: number;\n      totalPatients: number;\n      newPatientRate: number;\n      returningPatientRate: number;\n    };\n    registrationTrends: Array<{\n      month: string;\n      year: number;\n      newRegistrations: number;\n      returningPatients: number;\n    }>;\n    retentionRates: {\n      thirtyDay: number;\n      sixtyDay: number;\n      ninetyDay: number;\n    };\n  }>;\n\n  // Peak hours analysis\n  getPeakHoursAnalysis(): Promise<{\n    hourlyDistribution: Array<{\n      hour: number;\n      count: number;\n      percentage: number;\n    }>;\n    dailyDistribution: Array<{\n      day: string;\n      dayNumber: number;\n      count: number;\n      percentage: number;\n    }>;\n    peakHour: {\n      hour: number;\n      count: number;\n      timeLabel: string;\n    };\n    peakDay: {\n      day: string;\n      count: number;\n    };\n  }>;\n\n  // Birthday wishes methods\n  createBirthdayWish(wish: InsertBirthdayWish): Promise<BirthdayWish>;\n  getBirthdayWishesByDate(date: Date): Promise<BirthdayWish[]>;\n  getTodaysBirthdayPatients(): Promise<Patient[]>;\n  cleanupOldBirthdayWishes(): Promise<{ deletedCount: number }>;\n\n  // API key methods\n  createApiKey(apiKey: InsertApiKey): Promise<ApiKey>;\n  getApiKeysByUser(userId: string): Promise<ApiKey[]>;\n  getApiKeyByHash(keyHash: string): Promise<ApiKey | undefined>;\n  revokeApiKey(id: string): Promise<void>;\n  updateApiKeyLastUsed(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User> {\n    const [updatedUser] = await db.update(users).set(user).where(eq(users.id, id)).returning();\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  // Patient methods\n  async getPatient(id: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.id, id));\n    return patient || undefined;\n  }\n\n  async getPatientByPhone(phone: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.phone, phone));\n    return patient || undefined;\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const [patient] = await db.insert(patients).values(insertPatient).returning();\n    return patient;\n  }\n\n  async updatePatient(id: string, patient: Partial<InsertPatient>): Promise<Patient> {\n    const [updatedPatient] = await db.update(patients).set(patient).where(eq(patients.id, id)).returning();\n    return updatedPatient;\n  }\n\n  async searchPatients(query: string): Promise<Patient[]> {\n    return await db.select().from(patients)\n      .where(sql`lower(${patients.firstName}) LIKE lower(${`%${query}%`}) OR lower(${patients.lastName}) LIKE lower(${`%${query}%`}) OR ${patients.phone} LIKE ${`%${query}%`} OR lower(${patients.idNumber}) LIKE lower(${`%${query}%`})`)\n      .orderBy(patients.firstName, patients.lastName);\n  }\n\n  async getAllPatients(): Promise<Patient[]> {\n    return await db.select().from(patients).orderBy(patients.firstName, patients.lastName);\n  }\n\n  // Appointment methods\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    const [appointment] = await db.select().from(appointments).where(eq(appointments.id, id));\n    return appointment || undefined;\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const normalizedAppointment = {\n      ...insertAppointment,\n      appointmentDate: this.normalizeAppointmentDate(insertAppointment.appointmentDate)\n    };\n    const [appointment] = await db.insert(appointments).values(normalizedAppointment).returning();\n    return appointment;\n  }\n\n  async updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment> {\n    const updateData = appointment.appointmentDate \n      ? { ...appointment, appointmentDate: this.normalizeAppointmentDate(appointment.appointmentDate) }\n      : appointment;\n    const [updatedAppointment] = await db.update(appointments).set(updateData).where(eq(appointments.id, id)).returning();\n    return updatedAppointment;\n  }\n\n  private normalizeAppointmentDate(date: Date): Date {\n    const normalized = new Date(date);\n    normalized.setSeconds(0, 0);\n    return normalized;\n  }\n\n  async getAppointmentsByDate(date: Date): Promise<Appointment[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db.query.appointments.findMany({\n      where: and(\n        gte(appointments.appointmentDate, startOfDay),\n        lte(appointments.appointmentDate, endOfDay)\n      ),\n      with: {\n        patient: true,\n        doctor: true\n      },\n      orderBy: appointments.appointmentDate\n    });\n  }\n\n  async getAppointmentsByDoctor(doctorId: string, date?: Date): Promise<Appointment[]> {\n    if (date) {\n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      return await db.query.appointments.findMany({\n        where: and(\n          eq(appointments.doctorId, doctorId),\n          gte(appointments.appointmentDate, startOfDay),\n          lte(appointments.appointmentDate, endOfDay)\n        ),\n        with: {\n          patient: true,\n          doctor: true\n        },\n        orderBy: appointments.appointmentDate\n      });\n    }\n    \n    return await db.query.appointments.findMany({\n      where: eq(appointments.doctorId, doctorId),\n      with: {\n        patient: true,\n        doctor: true\n      },\n      orderBy: appointments.appointmentDate\n    });\n  }\n\n  async getAppointmentsByPatient(patientId: string): Promise<Appointment[]> {\n    return await db.query.appointments.findMany({\n      where: eq(appointments.patientId, patientId),\n      with: {\n        patient: true,\n        doctor: true\n      },\n      orderBy: desc(appointments.appointmentDate)\n    });\n  }\n\n  async checkAppointmentConflict(doctorId: string, appointmentDate: Date, excludeId?: string): Promise<boolean> {\n    // Normalize appointment date to ensure consistent comparisons\n    // Strip seconds and milliseconds for exact 30-minute slot matching\n    const slotStart = new Date(appointmentDate);\n    slotStart.setSeconds(0, 0);\n    \n    console.log('🔍 Conflict Check Debug:', {\n      originalDate: appointmentDate.toISOString(),\n      slotStart: slotStart.toISOString(),\n      doctorId,\n      excludeId\n    });\n    \n    // Validate that the time is on a 30-minute boundary\n    const minutes = slotStart.getMinutes();\n    if (minutes !== 0 && minutes !== 30) {\n      throw new Error('Appointment time must be scheduled in 30-minute intervals');\n    }\n    \n    // For conflict checking, we need to check if there's an appointment at the EXACT same slot time\n    // We normalize both the input time and compare against normalized database times\n    // This ensures we only block exact slot matches, not adjacent slots\n    \n    console.log('🕐 Checking for exact slot match at:', slotStart.toISOString());\n    \n    // Check for appointments at the exact same normalized time slot\n    // We use a tight range check to handle minor timestamp differences (seconds/milliseconds)\n    // but keep it precise to only match the same 30-minute slot\n    const slotEnd = new Date(slotStart);\n    slotEnd.setMinutes(slotEnd.getMinutes() + 29, 59, 999); // End at 29:59.999 to stay within the slot\n    \n    let whereConditions = and(\n      eq(appointments.doctorId, doctorId),\n      gte(appointments.appointmentDate, slotStart),\n      lte(appointments.appointmentDate, slotEnd), // Use lte with proper drizzle function\n      sql`${appointments.status} NOT IN ('cancelled')`\n    );\n    \n    // If updating an existing appointment, exclude it from conflict check\n    if (excludeId) {\n      whereConditions = and(\n        whereConditions,\n        sql`${appointments.id} != ${excludeId}`\n      );\n    }\n    \n    const conflictingAppointments = await db.select().from(appointments)\n      .where(whereConditions)\n      .limit(1);\n    \n    console.log('🔍 Conflict Query Results:', {\n      slotStart: slotStart.toISOString(),\n      slotEnd: slotEnd.toISOString(),\n      conflictCount: conflictingAppointments.length,\n      conflicts: conflictingAppointments.map(apt => ({\n        id: apt.id,\n        appointmentDate: apt.appointmentDate.toISOString(),\n        status: apt.status\n      }))\n    });\n    \n    return conflictingAppointments.length > 0;\n  }\n\n  async getAppointmentsBetweenDates(startDate: Date, endDate: Date): Promise<any[]> {\n    return await db.select({\n      id: appointments.id,\n      patientId: appointments.patientId,\n      doctorId: appointments.doctorId,\n      appointmentDate: appointments.appointmentDate,\n      status: appointments.status,\n      appointmentType: appointments.appointmentType,\n      notes: appointments.notes,\n      patient: {\n        id: patients.id,\n        firstName: patients.firstName,\n        lastName: patients.lastName,\n        phone: patients.phone\n      },\n      doctor: {\n        id: users.id,\n        name: users.name\n      }\n    })\n    .from(appointments)\n    .leftJoin(patients, eq(appointments.patientId, patients.id))\n    .leftJoin(users, eq(appointments.doctorId, users.id))\n    .where(and(\n      gte(appointments.appointmentDate, startDate),\n      lte(appointments.appointmentDate, endDate)\n    ))\n    .orderBy(asc(appointments.appointmentDate));\n  }\n\n  async getAppointmentWithDetails(id: string): Promise<any | undefined> {\n    const [appointment] = await db.select({\n      id: appointments.id,\n      patientId: appointments.patientId,\n      doctorId: appointments.doctorId,\n      appointmentDate: appointments.appointmentDate,\n      status: appointments.status,\n      appointmentType: appointments.appointmentType,\n      notes: appointments.notes,\n      patient: {\n        id: patients.id,\n        firstName: patients.firstName,\n        lastName: patients.lastName,\n        phone: patients.phone\n      },\n      doctor: {\n        id: users.id,\n        name: users.name\n      }\n    })\n    .from(appointments)\n    .leftJoin(patients, eq(appointments.patientId, patients.id))\n    .leftJoin(users, eq(appointments.doctorId, users.id))\n    .where(eq(appointments.id, id));\n    return appointment || undefined;\n  }\n\n  async getAvailableAppointmentSlots(doctorId: string, date: Date): Promise<string[]> {\n    const dayOfWeek = date.getDay();\n    \n    if (dayOfWeek === 0) {\n      return [];\n    }\n    \n    if (this.isSouthAfricanPublicHoliday(date)) {\n      return [];\n    }\n    \n    const slots: string[] = [];\n    let startHour = 8;\n    let endHour = 17;\n    \n    if (dayOfWeek === 6) {\n      endHour = 13;\n    }\n    \n    for (let hour = startHour; hour < endHour; hour++) {\n      for (let minute of [0, 30]) {\n        const slotTime = new Date(date);\n        slotTime.setHours(hour, minute, 0, 0);\n        \n        const hasConflict = await this.checkAppointmentConflict(doctorId, slotTime);\n        if (!hasConflict) {\n          const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n          slots.push(timeString);\n        }\n      }\n    }\n    \n    return slots;\n  }\n\n  private getSouthAfricanPublicHolidays(year: number): Date[] {\n    const holidays = [\n      new Date(year, 0, 1),\n      new Date(year, 2, 21),\n      new Date(year, 3, 27),\n      new Date(year, 4, 1),\n      new Date(year, 5, 16),\n      new Date(year, 7, 9),\n      new Date(year, 8, 24),\n      new Date(year, 11, 16),\n      new Date(year, 11, 25),\n      new Date(year, 11, 26),\n    ];\n    \n    const easterSunday = this.getEasterSunday(year);\n    holidays.push(\n      new Date(easterSunday.getTime() - 2 * 24 * 60 * 60 * 1000),\n      new Date(easterSunday.getTime() + 1 * 24 * 60 * 60 * 1000)\n    );\n    \n    return holidays;\n  }\n\n  private getEasterSunday(year: number): Date {\n    const a = year % 19;\n    const b = Math.floor(year / 100);\n    const c = year % 100;\n    const d = Math.floor(b / 4);\n    const e = b % 4;\n    const f = Math.floor((b + 8) / 25);\n    const g = Math.floor((b - f + 1) / 3);\n    const h = (19 * a + b - d - g + 15) % 30;\n    const i = Math.floor(c / 4);\n    const k = c % 4;\n    const l = (32 + 2 * e + 2 * i - h - k) % 7;\n    const m = Math.floor((a + 11 * h + 22 * l) / 451);\n    const month = Math.floor((h + l - 7 * m + 114) / 31) - 1;\n    const day = ((h + l - 7 * m + 114) % 31) + 1;\n    return new Date(year, month, day);\n  }\n\n  private isSouthAfricanPublicHoliday(date: Date): boolean {\n    const holidays = this.getSouthAfricanPublicHolidays(date.getFullYear());\n    return holidays.some(holiday => \n      holiday.getFullYear() === date.getFullYear() &&\n      holiday.getMonth() === date.getMonth() &&\n      holiday.getDate() === date.getDate()\n    );\n  }\n\n  async getAvailableAppointmentSlotsForAllDoctors(date: Date): Promise<Array<{doctorId: string, doctorName: string, availableSlots: string[]}>> {\n    const doctors = await db.select().from(users).where(eq(users.role, 'doctor'));\n    \n    const results = [];\n    \n    for (const doctor of doctors) {\n      const availableSlots = await this.getAvailableAppointmentSlots(doctor.id, date);\n      results.push({\n        doctorId: doctor.id,\n        doctorName: doctor.name,\n        availableSlots: availableSlots\n      });\n    }\n    \n    return results;\n  }\n\n  // Check-in methods\n  async createCheckIn(insertCheckIn: InsertCheckIn): Promise<CheckIn> {\n    const [checkIn] = await db.insert(checkIns).values(insertCheckIn).returning();\n    return checkIn;\n  }\n\n  async getCheckInsByDate(date: Date): Promise<CheckIn[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db.select().from(checkIns)\n      .where(and(\n        gte(checkIns.checkInTime, startOfDay),\n        lte(checkIns.checkInTime, endOfDay)\n      ))\n      .orderBy(desc(checkIns.checkInTime));\n  }\n\n  // Queue methods\n  async getQueue(): Promise<Queue[]> {\n    return await db.query.queue.findMany({\n      where: sql`${queue.status} IN ('waiting', 'in_progress')`,\n      with: {\n        patient: true,\n        doctor: true\n      },\n      orderBy: [queue.enteredAt, queue.priority]\n    });\n  }\n\n  async addToQueue(insertQueue: InsertQueue): Promise<Queue> {\n    const [queueItem] = await db.insert(queue).values(insertQueue).returning();\n    return queueItem;\n  }\n\n  async updateQueueStatus(id: string, status: string, startedAt?: Date, completedAt?: Date): Promise<Queue> {\n    const updateData: any = { status };\n    if (startedAt) updateData.startedAt = startedAt;\n    if (completedAt) updateData.completedAt = completedAt;\n    \n    const [updatedQueue] = await db.update(queue).set(updateData).where(eq(queue.id, id)).returning();\n    return updatedQueue;\n  }\n\n  async removeFromQueue(id: string): Promise<void> {\n    await db.delete(queue).where(eq(queue.id, id));\n  }\n\n  async getQueueByDoctor(doctorId: string): Promise<Queue[]> {\n    return await db.query.queue.findMany({\n      where: and(\n        eq(queue.doctorId, doctorId),\n        sql`${queue.status} IN ('waiting', 'in_progress')`\n      ),\n      with: {\n        patient: true,\n        doctor: true\n      },\n      orderBy: [queue.enteredAt, queue.priority]\n    });\n  }\n\n  // Consultation methods\n  async createConsultation(insertConsultation: InsertConsultation): Promise<Consultation> {\n    const [consultation] = await db.insert(consultations).values(insertConsultation).returning();\n    return consultation;\n  }\n\n  async getConsultation(id: string): Promise<Consultation | undefined> {\n    const result = await db.select().from(consultations)\n      .where(eq(consultations.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async getConsultationsByPatient(patientId: string): Promise<Consultation[]> {\n    return await db.select().from(consultations)\n      .where(eq(consultations.patientId, patientId))\n      .orderBy(desc(consultations.consultationDate));\n  }\n\n  async getConsultationsByDoctor(doctorId: string): Promise<Consultation[]> {\n    return await db.select().from(consultations)\n      .where(eq(consultations.doctorId, doctorId))\n      .orderBy(desc(consultations.consultationDate));\n  }\n\n  // Payment methods\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const [payment] = await db.insert(payments).values(insertPayment).returning();\n    return payment;\n  }\n\n  async getPaymentsByDate(date: Date): Promise<Payment[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db.select().from(payments)\n      .where(and(\n        gte(payments.paymentDate, startOfDay),\n        lte(payments.paymentDate, endOfDay)\n      ))\n      .orderBy(desc(payments.paymentDate));\n  }\n\n  async getTotalRevenue(startDate: Date, endDate: Date): Promise<number> {\n    const result = await db.select({ total: sql<number>`COALESCE(SUM(${payments.amount}), 0)` })\n      .from(payments)\n      .where(and(\n        gte(payments.paymentDate, startDate),\n        lte(payments.paymentDate, endDate)\n      ));\n    \n    return result[0]?.total || 0;\n  }\n\n  // Activity log methods\n  async createActivityLog(insertLog: InsertActivityLog): Promise<ActivityLog> {\n    const [log] = await db.insert(activityLogs).values(insertLog).returning();\n    return log;\n  }\n\n  async getActivityLogs(limit: number = 50): Promise<ActivityLog[]> {\n    return await db.select().from(activityLogs)\n      .orderBy(desc(activityLogs.timestamp))\n      .limit(limit);\n  }\n\n  // Medical attachment methods\n  async createMedicalAttachment(insertAttachment: InsertMedicalAttachment): Promise<MedicalAttachment> {\n    const [attachment] = await db.insert(medicalAttachments).values(insertAttachment).returning();\n    return attachment;\n  }\n\n  async getMedicalAttachmentsByConsultation(consultationId: string): Promise<MedicalAttachment[]> {\n    return await db.query.medicalAttachments.findMany({\n      where: eq(medicalAttachments.consultationId, consultationId),\n      with: {\n        uploadedByUser: {\n          columns: {\n            id: true,\n            name: true,\n            email: true\n          }\n        }\n      },\n      orderBy: desc(medicalAttachments.uploadedAt)\n    });\n  }\n\n  async deleteMedicalAttachment(id: string): Promise<void> {\n    await db.delete(medicalAttachments).where(eq(medicalAttachments.id, id));\n  }\n\n  async getMedicalAttachment(id: string): Promise<MedicalAttachment | undefined> {\n    const [attachment] = await db.select().from(medicalAttachments).where(eq(medicalAttachments.id, id));\n    return attachment || undefined;\n  }\n\n  async deleteMedicalAttachmentsByConsultation(consultationId: string): Promise<void> {\n    // Get all attachments for this consultation first (to delete files from disk)\n    const attachments = await this.getMedicalAttachmentsByConsultation(consultationId);\n    \n    // Delete files from disk\n    const fs = require('fs');\n    attachments.forEach(attachment => {\n      if (fs.existsSync(attachment.filePath)) {\n        try {\n          fs.unlinkSync(attachment.filePath);\n        } catch (error) {\n          console.error(`Failed to delete file ${attachment.filePath}:`, error);\n        }\n      }\n    });\n\n    // Delete database records\n    await db.delete(medicalAttachments).where(eq(medicalAttachments.consultationId, consultationId));\n  }\n\n  async deleteConsultation(id: string): Promise<void> {\n    // First delete all associated medical attachments (cascade cleanup)\n    await this.deleteMedicalAttachmentsByConsultation(id);\n    \n    // Then delete the consultation record\n    await db.delete(consultations).where(eq(consultations.id, id));\n  }\n\n  // Medical aid claim methods\n  async createMedicalAidClaim(insertClaim: InsertMedicalAidClaim): Promise<MedicalAidClaim> {\n    const [claim] = await db.insert(medicalAidClaims).values(insertClaim).returning();\n    return claim;\n  }\n\n  async getAllMedicalAidClaims(): Promise<MedicalAidClaim[]> {\n    return await db.query.medicalAidClaims.findMany({\n      with: {\n        patient: {\n          columns: {\n            id: true,\n            firstName: true,\n            lastName: true,\n            medicalAidScheme: true,\n            medicalAidNumber: true,\n            phone: true\n          }\n        },\n        checkIn: {\n          columns: {\n            id: true,\n            checkInTime: true,\n            paymentMethod: true\n          }\n        }\n      },\n      orderBy: desc(medicalAidClaims.createdAt)\n    });\n  }\n\n  async updateMedicalAidClaim(id: string, claim: Partial<InsertMedicalAidClaim>): Promise<MedicalAidClaim> {\n    const [updatedClaim] = await db.update(medicalAidClaims).set(claim).where(eq(medicalAidClaims.id, id)).returning();\n    return updatedClaim;\n  }\n\n  // Dashboard stats\n  async getDashboardStats(date: Date): Promise<{\n    todayAppointments: number;\n    queueCount: number;\n    todayRevenue: number;\n    newPatients: number;\n  }> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    // Today's appointments\n    const appointmentsResult = await db.select({ count: sql<number>`COUNT(*)` })\n      .from(appointments)\n      .where(and(\n        gte(appointments.appointmentDate, startOfDay),\n        lte(appointments.appointmentDate, endOfDay)\n      ));\n\n    // Queue count\n    const queueResult = await db.select({ count: sql<number>`COUNT(*)` })\n      .from(queue)\n      .where(sql`${queue.status} IN ('waiting', 'in_progress')`);\n\n    // Today's revenue\n    const revenueResult = await db.select({ total: sql<number>`COALESCE(SUM(${payments.amount}), 0)` })\n      .from(payments)\n      .where(and(\n        gte(payments.paymentDate, startOfDay),\n        lte(payments.paymentDate, endOfDay)\n      ));\n\n    // New patients (this week)\n    const weekStart = new Date(date);\n    weekStart.setDate(weekStart.getDate() - weekStart.getDay());\n    weekStart.setHours(0, 0, 0, 0);\n\n    const newPatientsResult = await db.select({ count: sql<number>`COUNT(*)` })\n      .from(patients)\n      .where(gte(patients.createdAt, weekStart));\n\n    return {\n      todayAppointments: appointmentsResult[0]?.count || 0,\n      queueCount: queueResult[0]?.count || 0,\n      todayRevenue: revenueResult[0]?.total || 0,\n      newPatients: newPatientsResult[0]?.count || 0,\n    };\n  }\n\n  // Monthly comparison stats\n  async getMonthlyStats(monthsBack: number = 12): Promise<{\n    monthlyData: Array<{\n      month: string;\n      year: number;\n      revenue: number;\n      appointments: number;\n      patients: number;\n      completionRate: number;\n    }>;\n  }> {\n    const monthlyData = [];\n    const currentDate = new Date();\n\n    for (let i = 0; i < monthsBack; i++) {\n      const targetDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);\n      const startOfMonth = new Date(targetDate.getFullYear(), targetDate.getMonth(), 1);\n      const endOfMonth = new Date(targetDate.getFullYear(), targetDate.getMonth() + 1, 0, 23, 59, 59, 999);\n\n      // Monthly revenue from payments\n      const revenueResult = await db.select({ total: sql<number>`COALESCE(SUM(${payments.amount}), 0)` })\n        .from(payments)\n        .where(and(\n          gte(payments.paymentDate, startOfMonth),\n          lte(payments.paymentDate, endOfMonth)\n        ));\n\n      // Monthly appointments\n      const appointmentsResult = await db.select({ \n        total: sql<number>`COUNT(*)`,\n        completed: sql<number>`SUM(CASE WHEN ${appointments.status} = 'completed' THEN 1 ELSE 0 END)`\n      })\n        .from(appointments)\n        .where(and(\n          gte(appointments.appointmentDate, startOfMonth),\n          lte(appointments.appointmentDate, endOfMonth)\n        ));\n\n      // Monthly new patients\n      const patientsResult = await db.select({ count: sql<number>`COUNT(*)` })\n        .from(patients)\n        .where(and(\n          gte(patients.createdAt, startOfMonth),\n          lte(patients.createdAt, endOfMonth)\n        ));\n\n      // Get approved medical aid claims for this month\n      const approvedClaimsResult = await db.select({ \n        total: sql<number>`COALESCE(SUM(CAST(${medicalAidClaims.claimAmount} AS DECIMAL)), 0)`\n      })\n        .from(medicalAidClaims)\n        .where(and(\n          eq(medicalAidClaims.status, 'approved'),\n          isNotNull(medicalAidClaims.claimAmount),\n          gte(medicalAidClaims.approvedAt, startOfMonth),\n          lte(medicalAidClaims.approvedAt, endOfMonth)\n        ));\n\n      const totalRevenue = (revenueResult[0]?.total || 0) + (approvedClaimsResult[0]?.total || 0);\n      const totalAppointments = appointmentsResult[0]?.total || 0;\n      const completedAppointments = appointmentsResult[0]?.completed || 0;\n      const completionRate = totalAppointments > 0 ? Math.round((completedAppointments / totalAppointments) * 100) : 0;\n\n      monthlyData.push({\n        month: targetDate.toLocaleDateString('en-US', { month: 'long' }),\n        year: targetDate.getFullYear(),\n        revenue: totalRevenue,\n        appointments: totalAppointments,\n        patients: patientsResult[0]?.count || 0,\n        completionRate: completionRate\n      });\n    }\n\n    return {\n      monthlyData: monthlyData.reverse() // Reverse to show oldest to newest\n    };\n  }\n\n  // Patient retention and trends analytics\n  async getPatientRetentionStats(): Promise<{\n    newVsReturning: {\n      newPatients: number;\n      returningPatients: number;\n      totalPatients: number;\n      newPatientRate: number;\n      returningPatientRate: number;\n    };\n    registrationTrends: Array<{\n      month: string;\n      year: number;\n      newRegistrations: number;\n      returningPatients: number;\n    }>;\n    retentionRates: {\n      thirtyDay: number;\n      sixtyDay: number;\n      ninetyDay: number;\n    };\n  }> {\n    const currentDate = new Date();\n    const currentMonthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const currentMonthEnd = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0, 23, 59, 59, 999);\n\n    // Get all completed appointments to analyze patient behavior\n    const allAppointments = await db.select({\n      patientId: appointments.patientId,\n      appointmentDate: appointments.appointmentDate\n    })\n      .from(appointments)\n      .where(eq(appointments.status, 'completed'))\n      .orderBy(appointments.appointmentDate);\n\n    // Create map of patient first appointment dates\n    const patientFirstVisit = new Map<string, Date>();\n    allAppointments.forEach(apt => {\n      if (!patientFirstVisit.has(apt.patientId) || apt.appointmentDate < patientFirstVisit.get(apt.patientId)!) {\n        patientFirstVisit.set(apt.patientId, apt.appointmentDate);\n      }\n    });\n\n    // Get appointments in current month\n    const currentMonthAppointments = allAppointments.filter(apt => \n      apt.appointmentDate >= currentMonthStart && apt.appointmentDate <= currentMonthEnd\n    );\n\n    // Calculate new vs returning for current month\n    const currentMonthPatients = new Set(currentMonthAppointments.map(apt => apt.patientId));\n    let newPatients = 0;\n    let returningPatients = 0;\n\n    currentMonthPatients.forEach(patientId => {\n      const firstVisit = patientFirstVisit.get(patientId);\n      if (firstVisit && firstVisit >= currentMonthStart && firstVisit <= currentMonthEnd) {\n        newPatients++;\n      } else {\n        returningPatients++;\n      }\n    });\n\n    const totalPatients = newPatients + returningPatients;\n    const newPatientRate = totalPatients > 0 ? Math.round((newPatients / totalPatients) * 100) : 0;\n    const returningPatientRate = totalPatients > 0 ? Math.round((returningPatients / totalPatients) * 100) : 0;\n\n    // Calculate registration trends for last 6 months\n    const registrationTrends = [];\n    \n    // Get all patient registrations for the period\n    const sixMonthsAgo = new Date(currentDate.getFullYear(), currentDate.getMonth() - 5, 1);\n    const allPatientRegistrations = await db.select({\n      id: patients.id,\n      createdAt: patients.createdAt\n    })\n      .from(patients)\n      .where(gte(patients.createdAt, sixMonthsAgo));\n\n    for (let i = 5; i >= 0; i--) {\n      const targetDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);\n      const startOfMonth = new Date(targetDate.getFullYear(), targetDate.getMonth(), 1);\n      const endOfMonth = new Date(targetDate.getFullYear(), targetDate.getMonth() + 1, 0, 23, 59, 59, 999);\n\n      // New registrations in this month\n      const newRegistrations = allPatientRegistrations.filter(p => \n        p.createdAt >= startOfMonth && p.createdAt <= endOfMonth\n      ).length;\n\n      // Returning patients (unique patients with appointments in this month who had first visit before this month)\n      const monthAppointments = allAppointments.filter(apt => \n        apt.appointmentDate >= startOfMonth && apt.appointmentDate <= endOfMonth\n      );\n      \n      const returningPatientsInMonth = new Set();\n      monthAppointments.forEach(apt => {\n        const firstVisit = patientFirstVisit.get(apt.patientId);\n        if (firstVisit && firstVisit < startOfMonth) {\n          returningPatientsInMonth.add(apt.patientId);\n        }\n      });\n\n      registrationTrends.push({\n        month: targetDate.toLocaleDateString('en-US', { month: 'long' }),\n        year: targetDate.getFullYear(),\n        newRegistrations,\n        returningPatients: returningPatientsInMonth.size\n      });\n    }\n\n    // Calculate cohort-based retention rates\n    const thirtyDaysAgo = new Date(currentDate.getTime() - 30 * 24 * 60 * 60 * 1000);\n    const sixtyDaysAgo = new Date(currentDate.getTime() - 60 * 24 * 60 * 60 * 1000);\n    const ninetyDaysAgo = new Date(currentDate.getTime() - 90 * 24 * 60 * 60 * 1000);\n\n    // For retention rates, we need patients whose first visit was in each period\n    // and check if they returned within the timeframe\n    const calculateRetentionRate = (periodStart: Date): number => {\n      const periodEnd = new Date(periodStart.getTime() + 30 * 24 * 60 * 60 * 1000); // 30 days after period start\n      \n      // Find patients whose first visit was in this period\n      const cohortPatients = Array.from(patientFirstVisit.entries()).filter(([_, firstVisit]) => \n        firstVisit >= periodStart && firstVisit < periodEnd\n      );\n\n      if (cohortPatients.length === 0) return 0;\n\n      // Check how many returned after their first visit\n      let retainedCount = 0;\n      cohortPatients.forEach(([patientId, firstVisit]) => {\n        const laterAppointments = allAppointments.filter(apt => \n          apt.patientId === patientId && apt.appointmentDate > firstVisit\n        );\n        if (laterAppointments.length > 0) {\n          retainedCount++;\n        }\n      });\n\n      return Math.round((retainedCount / cohortPatients.length) * 100);\n    };\n\n    const thirtyDayRate = calculateRetentionRate(thirtyDaysAgo);\n    const sixtyDayRate = calculateRetentionRate(sixtyDaysAgo);\n    const ninetyDayRate = calculateRetentionRate(ninetyDaysAgo);\n\n    return {\n      newVsReturning: {\n        newPatients,\n        returningPatients,\n        totalPatients,\n        newPatientRate,\n        returningPatientRate\n      },\n      registrationTrends,\n      retentionRates: {\n        thirtyDay: thirtyDayRate,\n        sixtyDay: sixtyDayRate,\n        ninetyDay: ninetyDayRate\n      }\n    };\n  }\n\n  // Peak hours analysis\n  async getPeakHoursAnalysis(): Promise<{\n    hourlyDistribution: Array<{\n      hour: number;\n      count: number;\n      percentage: number;\n    }>;\n    dailyDistribution: Array<{\n      day: string;\n      dayNumber: number;\n      count: number;\n      percentage: number;\n    }>;\n    peakHour: {\n      hour: number;\n      count: number;\n      timeLabel: string;\n    };\n    peakDay: {\n      day: string;\n      count: number;\n    };\n  }> {\n    // Get all completed appointments in the last 3 months for analysis\n    const threeMonthsAgo = new Date();\n    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);\n\n    const appointmentData = await db.select({\n      appointmentDate: appointments.appointmentDate\n    })\n      .from(appointments)\n      .where(and(\n        sql`${appointments.status} IN ('completed', 'scheduled')`,\n        gte(appointments.appointmentDate, threeMonthsAgo)\n      ));\n\n    // Initialize hourly distribution (0-23 hours)\n    const hourlyData = Array.from({ length: 24 }, (_, hour) => ({\n      hour,\n      count: 0,\n      percentage: 0\n    }));\n\n    // Initialize daily distribution (0=Sunday, 1=Monday, etc.)\n    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const dailyData = Array.from({ length: 7 }, (_, day) => ({\n      day: dayNames[day],\n      dayNumber: day,\n      count: 0,\n      percentage: 0\n    }));\n\n    const totalAppointments = appointmentData.length;\n\n    // Process each appointment\n    appointmentData.forEach((apt: { appointmentDate: Date }) => {\n      const date = new Date(apt.appointmentDate);\n      const hour = date.getHours();\n      const dayOfWeek = date.getDay();\n\n      hourlyData[hour].count++;\n      dailyData[dayOfWeek].count++;\n    });\n\n    // Calculate percentages\n    hourlyData.forEach(hourData => {\n      hourData.percentage = totalAppointments > 0 \n        ? Math.round((hourData.count / totalAppointments) * 100) \n        : 0;\n    });\n\n    dailyData.forEach(dayData => {\n      dayData.percentage = totalAppointments > 0 \n        ? Math.round((dayData.count / totalAppointments) * 100) \n        : 0;\n    });\n\n    // Find peak hour\n    const peakHourData = hourlyData.reduce((max, current) => \n      current.count > max.count ? current : max\n    );\n\n    // Format peak hour time label\n    const formatHour = (hour: number): string => {\n      if (hour === 0) return '12:00 AM';\n      if (hour < 12) return `${hour}:00 AM`;\n      if (hour === 12) return '12:00 PM';\n      return `${hour - 12}:00 PM`;\n    };\n\n    const peakHour = {\n      hour: peakHourData.hour,\n      count: peakHourData.count,\n      timeLabel: formatHour(peakHourData.hour)\n    };\n\n    // Find peak day\n    const peakDayData = dailyData.reduce((max, current) => \n      current.count > max.count ? current : max\n    );\n\n    const peakDay = {\n      day: peakDayData.day,\n      count: peakDayData.count\n    };\n\n    return {\n      hourlyDistribution: hourlyData,\n      dailyDistribution: dailyData,\n      peakHour,\n      peakDay\n    };\n  }\n\n  // Birthday wishes methods\n  async createBirthdayWish(wish: InsertBirthdayWish): Promise<BirthdayWish> {\n    const [result] = await db.insert(birthdayWishes).values(wish).returning();\n    return result;\n  }\n\n  async getBirthdayWishesByDate(date: Date): Promise<BirthdayWish[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    \n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db\n      .select()\n      .from(birthdayWishes)\n      .where(and(\n        gte(birthdayWishes.sentAt, startOfDay),\n        lte(birthdayWishes.sentAt, endOfDay)\n      ))\n      .orderBy(desc(birthdayWishes.sentAt));\n  }\n\n  async getTodaysBirthdayPatients(): Promise<Patient[]> {\n    const today = new Date();\n    const todayMonth = today.getMonth() + 1; // getMonth() returns 0-11, we need 1-12\n    const todayDay = today.getDate();\n\n    return await db\n      .select()\n      .from(patients)\n      .where(\n        sql`EXTRACT(MONTH FROM ${patients.dateOfBirth}) = ${todayMonth} AND EXTRACT(DAY FROM ${patients.dateOfBirth}) = ${todayDay}`\n      );\n  }\n\n  async cleanupOldBirthdayWishes(): Promise<{ deletedCount: number }> {\n    // Delete all birthday wishes that are older than today (previous days)\n    const startOfToday = new Date();\n    startOfToday.setHours(0, 0, 0, 0);\n\n    const result = await db\n      .delete(birthdayWishes)\n      .where(lt(birthdayWishes.sentAt, startOfToday));\n    \n    return { deletedCount: result.rowCount || 0 };\n  }\n\n  // Appointment reminder methods\n  async insertAppointmentReminder(reminder: InsertAppointmentReminder): Promise<AppointmentReminder> {\n    const [result] = await db.insert(appointmentReminders).values(reminder).returning();\n    return result;\n  }\n\n  async getAppointmentReminderByAppointmentAndType(appointmentId: string, reminderType: 'weekly' | 'daily'): Promise<AppointmentReminder | undefined> {\n    const [result] = await db\n      .select()\n      .from(appointmentReminders)\n      .where(and(\n        eq(appointmentReminders.appointmentId, appointmentId),\n        eq(appointmentReminders.reminderType, reminderType)\n      ));\n    return result;\n  }\n\n  async updateAppointmentReminderResponse(requestId: string, response: string): Promise<void> {\n    await db\n      .update(appointmentReminders)\n      .set({ webhookResponse: response })\n      .where(eq(appointmentReminders.requestId, requestId));\n  }\n\n  async getAppointmentReminderStatuses(appointmentIds: string[]): Promise<{appointmentId: string, weeklyReminder?: AppointmentReminder, dailyReminder?: AppointmentReminder}[]> {\n    if (appointmentIds.length === 0) return [];\n    \n    const reminders = await db\n      .select()\n      .from(appointmentReminders)\n      .where(inArray(appointmentReminders.appointmentId, appointmentIds));\n    \n    // Group reminders by appointment ID and type\n    const result = appointmentIds.map(appointmentId => {\n      const weeklyReminder = reminders.find(r => r.appointmentId === appointmentId && r.reminderType === 'weekly');\n      const dailyReminder = reminders.find(r => r.appointmentId === appointmentId && r.reminderType === 'daily');\n      \n      return {\n        appointmentId,\n        weeklyReminder,\n        dailyReminder\n      };\n    });\n    \n    return result;\n  }\n\n  // API key methods\n  async createApiKey(apiKey: InsertApiKey): Promise<ApiKey> {\n    const [result] = await db.insert(apiKeys).values(apiKey).returning();\n    return result;\n  }\n\n  async getApiKeysByUser(userId: string): Promise<ApiKey[]> {\n    return await db\n      .select()\n      .from(apiKeys)\n      .where(eq(apiKeys.userId, userId))\n      .orderBy(desc(apiKeys.createdAt));\n  }\n\n  async getApiKeyByHash(keyHash: string): Promise<ApiKey | undefined> {\n    const [result] = await db\n      .select()\n      .from(apiKeys)\n      .where(and(\n        eq(apiKeys.keyHash, keyHash),\n        eq(apiKeys.isActive, true)\n      ));\n    return result;\n  }\n\n  async revokeApiKey(id: string): Promise<void> {\n    await db\n      .update(apiKeys)\n      .set({ isActive: false })\n      .where(eq(apiKeys.id, id));\n  }\n\n  async updateApiKeyLastUsed(id: string): Promise<void> {\n    await db\n      .update(apiKeys)\n      .set({ lastUsedAt: new Date() })\n      .where(eq(apiKeys.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":45083},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, decimal, boolean, pgEnum, uniqueIndex, index } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const userRoleEnum = pgEnum(\"user_role\", [\"staff\", \"admin\", \"doctor\"]);\nexport const appointmentStatusEnum = pgEnum(\"appointment_status\", [\"scheduled\", \"confirmed\", \"in_progress\", \"completed\", \"cancelled\"]);\nexport const queueStatusEnum = pgEnum(\"queue_status\", [\"waiting\", \"in_progress\", \"completed\"]);\nexport const paymentMethodEnum = pgEnum(\"payment_method\", [\"cash\", \"medical_aid\", \"both\"]);\nexport const genderEnum = pgEnum(\"gender\", [\"male\", \"female\", \"other\"]);\nexport const medicalAidClaimStatusEnum = pgEnum(\"medical_aid_claim_status\", [\"pending\", \"submitted\", \"approved\", \"rejected\"]);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  name: text(\"name\").notNull(),\n  role: userRoleEnum(\"role\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const patients = pgTable(\"patients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\").notNull(),\n  dateOfBirth: timestamp(\"date_of_birth\").notNull(),\n  gender: genderEnum(\"gender\").notNull(),\n  idNumber: text(\"id_number\").notNull().unique(),\n  address: text(\"address\"),\n  medicalAidScheme: text(\"medical_aid_scheme\"),\n  medicalAidNumber: text(\"medical_aid_number\"),\n  allergies: text(\"allergies\"),\n  photoUrl: text(\"photo_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => users.id),\n  appointmentDate: timestamp(\"appointment_date\").notNull(),\n  status: appointmentStatusEnum(\"status\").default(\"scheduled\").notNull(),\n  appointmentType: text(\"appointment_type\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    // Unique constraint to prevent double-booking at database level\n    uniqueSlot: uniqueIndex(\"unique_doctor_appointment_slot\").on(table.doctorId, table.appointmentDate),\n  };\n});\n\nexport const checkIns = pgTable(\"check_ins\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id),\n  checkInTime: timestamp(\"check_in_time\").defaultNow().notNull(),\n  paymentMethod: paymentMethodEnum(\"payment_method\").notNull(),\n  isWalkIn: boolean(\"is_walk_in\").default(false).notNull(),\n  notes: text(\"notes\"),\n});\n\nexport const queue = pgTable(\"queue\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  checkInId: varchar(\"check_in_id\").notNull().references(() => checkIns.id),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => users.id),\n  status: queueStatusEnum(\"status\").default(\"waiting\").notNull(),\n  priority: integer(\"priority\").default(0).notNull(),\n  estimatedWaitTime: integer(\"estimated_wait_time\"),\n  actualWaitTime: integer(\"actual_wait_time\"),\n  enteredAt: timestamp(\"entered_at\").defaultNow().notNull(),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const consultations = pgTable(\"consultations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => users.id),\n  queueId: varchar(\"queue_id\").references(() => queue.id),\n  notes: text(\"notes\"),\n  diagnosis: text(\"diagnosis\"),\n  prescription: text(\"prescription\"),\n  consultationDate: timestamp(\"consultation_date\").defaultNow().notNull(),\n});\n\nexport const medicalAttachments = pgTable(\"medical_attachments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  consultationId: varchar(\"consultation_id\").notNull().references(() => consultations.id),\n  fileName: text(\"file_name\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow().notNull(),\n  uploadedBy: varchar(\"uploaded_by\").notNull().references(() => users.id),\n}, (table) => {\n  return {\n    // Index for performance when querying attachments by consultation\n    consultationIdIdx: index(\"medical_attachments_consultation_id_idx\").on(table.consultationId),\n  };\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  checkInId: varchar(\"check_in_id\").notNull().references(() => checkIns.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: paymentMethodEnum(\"payment_method\").notNull(),\n  paymentDate: timestamp(\"payment_date\").defaultNow().notNull(),\n});\n\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(),\n  details: text(\"details\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const medicalAidClaims = pgTable(\"medical_aid_claims\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  checkInId: varchar(\"check_in_id\").notNull().references(() => checkIns.id),\n  status: medicalAidClaimStatusEnum(\"status\").default(\"pending\").notNull(),\n  submittedAt: timestamp(\"submitted_at\"),\n  approvedAt: timestamp(\"approved_at\"),\n  claimAmount: decimal(\"claim_amount\", { precision: 10, scale: 2 }),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    // Unique constraint to ensure only one claim per check-in\n    uniqueCheckIn: uniqueIndex(\"unique_medical_aid_claim_check_in\").on(table.checkInId),\n    // Index for performance when querying claims by patient\n    patientIdIdx: index(\"medical_aid_claims_patient_id_idx\").on(table.patientId),\n  };\n});\n\nexport const birthdayWishes = pgTable(\"birthday_wishes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  sentBy: varchar(\"sent_by\").notNull().references(() => users.id),\n  message: text(\"message\").notNull(),\n  sentAt: timestamp(\"sent_at\").defaultNow().notNull(),\n  webhookResponse: text(\"webhook_response\"),\n}, (table) => {\n  return {\n    // Index for performance when querying by patient and date\n    patientDateIdx: index(\"birthday_wishes_patient_date_idx\").on(table.patientId, table.sentAt),\n  };\n});\n\nexport const apiKeys = pgTable(\"api_keys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  keyHash: text(\"key_hash\").notNull().unique(),\n  lastUsedAt: timestamp(\"last_used_at\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    userIdIdx: index(\"api_keys_user_id_idx\").on(table.userId),\n  };\n});\n\nexport const apptReminderTypeEnum = pgEnum(\"appt_reminder_type_enum\", [\"weekly\", \"daily\"]);\n\nexport const appointmentReminders = pgTable(\"appointment_reminders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appointmentId: varchar(\"appointment_id\").notNull().references(() => appointments.id),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  reminderType: apptReminderTypeEnum(\"reminder_type\").notNull(),\n  sentAt: timestamp(\"sent_at\").defaultNow().notNull(),\n  requestId: text(\"request_id\").notNull(),\n  webhookResponse: text(\"webhook_response\"),\n}, (table) => {\n  return {\n    // Unique constraint to prevent duplicate reminders for the same appointment and type\n    uniqueReminder: uniqueIndex(\"unique_appointment_reminder\").on(table.appointmentId, table.reminderType),\n  };\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  appointments: many(appointments),\n  queue: many(queue),\n  consultations: many(consultations),\n  activityLogs: many(activityLogs),\n  birthdayWishes: many(birthdayWishes),\n  apiKeys: many(apiKeys),\n}));\n\nexport const patientsRelations = relations(patients, ({ many }) => ({\n  appointments: many(appointments),\n  checkIns: many(checkIns),\n  queue: many(queue),\n  consultations: many(consultations),\n  payments: many(payments),\n  medicalAidClaims: many(medicalAidClaims),\n  birthdayWishes: many(birthdayWishes),\n}));\n\nexport const appointmentsRelations = relations(appointments, ({ one, many }) => ({\n  patient: one(patients, {\n    fields: [appointments.patientId],\n    references: [patients.id],\n  }),\n  doctor: one(users, {\n    fields: [appointments.doctorId],\n    references: [users.id],\n  }),\n  checkIns: many(checkIns),\n}));\n\nexport const checkInsRelations = relations(checkIns, ({ one, many }) => ({\n  patient: one(patients, {\n    fields: [checkIns.patientId],\n    references: [patients.id],\n  }),\n  appointment: one(appointments, {\n    fields: [checkIns.appointmentId],\n    references: [appointments.id],\n  }),\n  queue: many(queue),\n  payments: many(payments),\n  medicalAidClaim: one(medicalAidClaims, {\n    fields: [checkIns.id],\n    references: [medicalAidClaims.checkInId],\n  }),\n}));\n\nexport const queueRelations = relations(queue, ({ one }) => ({\n  patient: one(patients, {\n    fields: [queue.patientId],\n    references: [patients.id],\n  }),\n  checkIn: one(checkIns, {\n    fields: [queue.checkInId],\n    references: [checkIns.id],\n  }),\n  doctor: one(users, {\n    fields: [queue.doctorId],\n    references: [users.id],\n  }),\n}));\n\nexport const consultationsRelations = relations(consultations, ({ one, many }) => ({\n  patient: one(patients, {\n    fields: [consultations.patientId],\n    references: [patients.id],\n  }),\n  doctor: one(users, {\n    fields: [consultations.doctorId],\n    references: [users.id],\n  }),\n  queue: one(queue, {\n    fields: [consultations.queueId],\n    references: [queue.id],\n  }),\n  medicalAttachments: many(medicalAttachments),\n}));\n\nexport const medicalAttachmentsRelations = relations(medicalAttachments, ({ one }) => ({\n  consultation: one(consultations, {\n    fields: [medicalAttachments.consultationId],\n    references: [consultations.id],\n  }),\n  uploadedByUser: one(users, {\n    fields: [medicalAttachments.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const medicalAidClaimsRelations = relations(medicalAidClaims, ({ one }) => ({\n  patient: one(patients, {\n    fields: [medicalAidClaims.patientId],\n    references: [patients.id],\n  }),\n  checkIn: one(checkIns, {\n    fields: [medicalAidClaims.checkInId],\n    references: [checkIns.id],\n  }),\n}));\n\nexport const birthdayWishesRelations = relations(birthdayWishes, ({ one }) => ({\n  patient: one(patients, {\n    fields: [birthdayWishes.patientId],\n    references: [patients.id],\n  }),\n  sentByUser: one(users, {\n    fields: [birthdayWishes.sentBy],\n    references: [users.id],\n  }),\n}));\n\nexport const appointmentRemindersRelations = relations(appointmentReminders, ({ one }) => ({\n  appointment: one(appointments, {\n    fields: [appointmentReminders.appointmentId],\n    references: [appointments.id],\n  }),\n  patient: one(patients, {\n    fields: [appointmentReminders.patientId],\n    references: [patients.id],\n  }),\n}));\n\nexport const apiKeysRelations = relations(apiKeys, ({ one }) => ({\n  user: one(users, {\n    fields: [apiKeys.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  appointmentDate: z.coerce.date().transform(\n    (date) => {\n      // Normalize appointment date by zeroing seconds and milliseconds\n      // This ensures consistent timestamps for conflict detection and database constraints\n      const normalizedDate = new Date(date);\n      normalizedDate.setSeconds(0, 0);\n      return normalizedDate;\n    }\n  ).refine(\n    (date) => {\n      // Ensure appointment is scheduled in 30-minute intervals\n      const minutes = date.getMinutes();\n      return minutes === 0 || minutes === 30;\n    },\n    {\n      message: \"Appointment time must be scheduled in 30-minute intervals (e.g., 09:00, 09:30, 10:00)\",\n    }\n  )\n});\n\nexport const insertCheckInSchema = createInsertSchema(checkIns).omit({\n  id: true,\n  checkInTime: true,\n});\n\nexport const insertQueueSchema = createInsertSchema(queue).omit({\n  id: true,\n  enteredAt: true,\n});\n\nexport const insertConsultationSchema = createInsertSchema(consultations).omit({\n  id: true,\n  consultationDate: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  paymentDate: true,\n}).extend({\n  amount: z.union([z.number(), z.string()]).transform((val) => {\n    // Convert both numbers and strings to string format for database storage\n    const numVal = typeof val === 'number' ? val : parseFloat(val);\n    if (isNaN(numVal) || numVal <= 0) {\n      throw new Error('Amount must be a positive number');\n    }\n    return numVal.toString();\n  })\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertMedicalAttachmentSchema = createInsertSchema(medicalAttachments).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertMedicalAidClaimSchema = createInsertSchema(medicalAidClaims).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const updateMedicalAidClaimSchema = createInsertSchema(medicalAidClaims).pick({\n  status: true,\n  notes: true,\n  submittedAt: true,\n  approvedAt: true,\n  claimAmount: true,\n});\n\nexport const insertBirthdayWishSchema = createInsertSchema(birthdayWishes).omit({\n  id: true,\n  sentAt: true,\n});\n\nexport const insertAppointmentReminderSchema = createInsertSchema(appointmentReminders).omit({\n  id: true,\n  sentAt: true,\n});\n\nexport const insertApiKeySchema = createInsertSchema(apiKeys).omit({\n  id: true,\n  createdAt: true,\n  lastUsedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type CheckIn = typeof checkIns.$inferSelect;\nexport type InsertCheckIn = z.infer<typeof insertCheckInSchema>;\nexport type Queue = typeof queue.$inferSelect;\nexport type InsertQueue = z.infer<typeof insertQueueSchema>;\nexport type Consultation = typeof consultations.$inferSelect;\nexport type InsertConsultation = z.infer<typeof insertConsultationSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\nexport type MedicalAttachment = typeof medicalAttachments.$inferSelect;\nexport type InsertMedicalAttachment = z.infer<typeof insertMedicalAttachmentSchema>;\nexport type MedicalAidClaim = typeof medicalAidClaims.$inferSelect;\nexport type InsertMedicalAidClaim = z.infer<typeof insertMedicalAidClaimSchema>;\nexport type BirthdayWish = typeof birthdayWishes.$inferSelect;\nexport type InsertBirthdayWish = z.infer<typeof insertBirthdayWishSchema>;\nexport type AppointmentReminder = typeof appointmentReminders.$inferSelect;\nexport type InsertAppointmentReminder = z.infer<typeof insertAppointmentReminderSchema>;\nexport type ApiKey = typeof apiKeys.$inferSelect;\nexport type InsertApiKey = z.infer<typeof insertApiKeySchema>;\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport type LoginRequest = z.infer<typeof loginSchema>;\n\n// Password reset schema\nexport const passwordResetSchema = z.object({\n  email: z.string().email(),\n});\n\nexport type PasswordResetRequest = z.infer<typeof passwordResetSchema>;\n","size_bytes":17166},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/Login\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport PatientRegistration from \"@/pages/PatientRegistration\";\nimport Appointments from \"@/pages/Appointments\";\nimport CheckIn from \"@/pages/CheckIn\";\nimport QueueManagement from \"@/pages/QueueManagement\";\nimport DoctorPage from \"@/pages/DoctorPage\";\nimport BusinessInsights from \"@/pages/BusinessInsights\";\nimport UserManagement from \"@/pages/UserManagement\";\nimport SystemAdmin from \"@/pages/SystemAdmin\";\nimport MedicalAid from \"@/pages/MedicalAid\";\nimport CustomerRelations from \"@/pages/CustomerRelations\";\nimport PublicPatientRegistration from \"@/pages/PublicPatientRegistration\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport Layout from \"@/components/Layout\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public Routes - No Authentication Required */}\n      <Route path=\"/register-patient\" component={PublicPatientRegistration} />\n      <Route path=\"/login\" component={Login} />\n      \n      <Route path=\"/\">\n        <ProtectedRoute>\n          <Layout>\n            <Dashboard />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/patients\">\n        <ProtectedRoute requiredRoles={['staff', 'admin']}>\n          <Layout>\n            <PatientRegistration />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/patient-registration\">\n        <ProtectedRoute requiredRoles={['staff', 'admin']}>\n          <Layout>\n            <PatientRegistration />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/appointments\">\n        <ProtectedRoute requiredRoles={['staff', 'admin', 'doctor']}>\n          <Layout>\n            <Appointments />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/checkin\">\n        <ProtectedRoute requiredRoles={['staff', 'admin']}>\n          <Layout>\n            <CheckIn />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/queue\">\n        <ProtectedRoute requiredRoles={['staff', 'admin', 'doctor']}>\n          <Layout>\n            <QueueManagement />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/customer-relations\">\n        <ProtectedRoute requiredRoles={['staff', 'admin']}>\n          <Layout>\n            <CustomerRelations />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/doctor\">\n        <ProtectedRoute requiredRoles={['doctor', 'admin']}>\n          <Layout>\n            <DoctorPage />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/medical-aid\">\n        <ProtectedRoute requiredRoles={['staff', 'admin']}>\n          <Layout>\n            <MedicalAid />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/insights\">\n        <ProtectedRoute requiredRoles={['admin']}>\n          <Layout>\n            <BusinessInsights />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/users\">\n        <ProtectedRoute requiredRoles={['admin']}>\n          <Layout>\n            <UserManagement />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin\">\n        <ProtectedRoute requiredRoles={['admin']}>\n          <Layout>\n            <SystemAdmin />\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4160},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(214, 84%, 56%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(188, 78%, 41%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(142, 69%, 58%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(214, 84%, 56%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(214, 84%, 56%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-accent-foreground: hsl(214, 84%, 56%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(214, 84%, 56%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214, 84%, 56%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214, 84%, 56%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214, 84%, 56%, 0.00), 0px 1px 2px -1px hsl(214, 84%, 56%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214, 84%, 56%, 0.00), 0px 1px 2px -1px hsl(214, 84%, 56%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214, 84%, 56%, 0.00), 0px 2px 4px -1px hsl(214, 84%, 56%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214, 84%, 56%, 0.00), 0px 4px 6px -1px hsl(214, 84%, 56%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214, 84%, 56%, 0.00), 0px 8px 10px -1px hsl(214, 84%, 56%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214, 84%, 56%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(214, 84%, 56%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(188, 78%, 41%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(142, 69%, 58%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(214, 84%, 56%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(214, 84%, 56%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 5.2632%, 14.9020%);\n  --sidebar-accent-foreground: hsl(214, 84%, 56%);\n  --sidebar-border: hsl(210, 5.2632%, 14.9020%);\n  --sidebar-ring: hsl(214, 84%, 56%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.sidebar-transition {\n  transition: transform 0.3s ease-in-out;\n}\n\n.badge-waiting {\n  @apply bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400 dark:border-yellow-800;\n}\n\n.badge-in-progress {\n  @apply bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800;\n}\n\n.badge-completed {\n  @apply bg-green-100 text-green-800 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800;\n}\n\n.badge-urgent {\n  @apply bg-red-100 text-red-800 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800;\n}\n\n@media (max-width: 768px) {\n  .sidebar-mobile {\n    transform: translateX(-100%);\n  }\n  .sidebar-mobile.open {\n    transform: translateX(0);\n  }\n}\n","size_bytes":4150},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Layout.tsx":{"content":"import { useState } from 'react';\nimport Sidebar from '@/components/Sidebar';\nimport { useIsMobile } from '@/hooks/use-mobile';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar \n        isOpen={sidebarOpen} \n        onClose={() => setSidebarOpen(false)}\n        isMobile={isMobile}\n      />\n      \n      {/* Mobile Overlay */}\n      {isMobile && sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20\" \n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <button \n                data-testid=\"button-open-sidebar\"\n                onClick={() => setSidebarOpen(true)}\n                className=\"lg:hidden text-muted-foreground hover:text-foreground\"\n              >\n                <i className=\"fas fa-bars text-xl\"></i>\n              </button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">Dashboard</h1>\n                <p className=\"text-sm text-muted-foreground\">Welcome back, manage your clinic efficiently</p>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1714},"client/src/components/ProtectedRoute.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/auth';\nimport { getToken } from '@/lib/auth';\nimport { Loader2 } from 'lucide-react';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRoles?: string[];\n}\n\nexport default function ProtectedRoute({ children, requiredRoles }: ProtectedRouteProps) {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: async () => {\n      const token = getToken();\n      if (!token) {\n        throw new Error('No token');\n      }\n      const res = await apiRequest('GET', '/api/auth/me');\n      return res.json();\n    },\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (error || !user) {\n    window.location.href = '/login';\n    return null;\n  }\n\n  if (requiredRoles && !requiredRoles.includes(user.role)) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Access Denied</h1>\n          <p className=\"text-muted-foreground\">You don't have permission to access this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":1368},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest, logout } from '@/lib/auth';\nimport { \n  LayoutDashboard, UserPlus, Calendar, ClipboardCheck, \n  Users, UserRound, TrendingUp, Settings, Shield,\n  X, CreditCard, Sun, Moon, Heart\n} from 'lucide-react';\nimport invoTechLogo from '@assets/invotech-high-resolution-logo (1)_1757968142020.png';\nimport { useTheme } from './ThemeProvider';\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  isMobile: boolean;\n}\n\nexport default function Sidebar({ isOpen, onClose, isMobile }: SidebarProps) {\n  const [location] = useLocation();\n  const { theme, toggleTheme } = useTheme();\n  \n  const { data: user } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/auth/me');\n      return res.json();\n    },\n  });\n\n  const { data: queueCount } = useQuery({\n    queryKey: ['/api/queue'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/queue');\n      const queue = await res.json();\n      return queue.length;\n    },\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const menuItems = [\n    { icon: LayoutDashboard, label: 'Dashboard', path: '/', roles: ['staff', 'admin', 'doctor'] },\n    { icon: UserPlus, label: 'Patient Registration', path: '/patients', roles: ['staff', 'admin'] },\n    { icon: Calendar, label: 'Appointments', path: '/appointments', roles: ['staff', 'admin', 'doctor'] },\n    { icon: ClipboardCheck, label: 'Check-in', path: '/checkin', roles: ['staff', 'admin'] },\n    { icon: Users, label: 'Queue Management', path: '/queue', roles: ['staff', 'admin', 'doctor'] },\n    { icon: Heart, label: 'Customer Relations', path: '/customer-relations', roles: ['staff', 'admin'] },\n    { icon: UserRound, label: \"Doctor's Page\", path: '/doctor', roles: ['doctor', 'admin'] },\n    { icon: CreditCard, label: 'Medical Aid Claims', path: '/medical-aid', roles: ['staff', 'admin'] },\n    { icon: TrendingUp, label: 'Business Insights', path: '/insights', roles: ['admin'] },\n    { icon: Settings, label: 'User Management', path: '/users', roles: ['admin'] },\n    { icon: Shield, label: 'System Admin', path: '/admin', roles: ['admin'] },\n  ];\n\n  const filteredMenuItems = menuItems.filter(item => \n    user && item.roles.includes(user.role)\n  );\n\n  const sidebarClasses = `\n    sidebar-transition bg-card border-r border-border w-64 flex-shrink-0 z-30\n    ${isMobile ? `sidebar-mobile fixed inset-y-0 left-0 ${isOpen ? 'open' : ''}` : ''}\n  `;\n\n  return (\n    <div className={sidebarClasses}>\n      <div className=\"flex flex-col h-full\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <img \n              src={invoTechLogo} \n              alt=\"InvoTech Logo\" \n              className=\"w-10 h-10 object-contain\"\n            />\n            <div>\n              <h1 className=\"text-lg font-semibold text-foreground\">InvoTech</h1>\n              <p className=\"text-sm text-muted-foreground\">Clinic Management</p>\n            </div>\n          </div>\n          {isMobile && (\n            <button \n              data-testid=\"button-close-sidebar\"\n              onClick={onClose} \n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              <X className=\"w-5 h-5\" />\n            </button>\n          )}\n        </div>\n\n        {/* User Info */}\n        {user && (\n          <div className=\"p-4 border-b border-border bg-muted/30\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                <span className=\"text-primary-foreground font-semibold\">\n                  {user.name.charAt(0).toUpperCase()}\n                </span>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-user-name\">\n                  {user.name}\n                </p>\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-user-role\">\n                  {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n          {filteredMenuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n            \n            return (\n              <Link \n                key={item.path} \n                href={item.path}\n                className={`\n                  flex items-center space-x-3 px-3 py-2 rounded-md transition-colors\n                  ${isActive \n                    ? 'bg-primary text-primary-foreground font-medium' \n                    : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'\n                  }\n                `}\n                data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                onClick={isMobile ? onClose : undefined}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.label}</span>\n                {item.label === 'Queue Management' && queueCount !== undefined && queueCount > 0 && (\n                  <span \n                    className=\"ml-auto bg-accent text-accent-foreground text-xs px-2 py-1 rounded-full font-medium\"\n                    data-testid=\"text-queue-count\"\n                  >\n                    {queueCount}\n                  </span>\n                )}\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Theme Toggle & Logout */}\n        <div className=\"p-4 border-t border-border space-y-2\">\n          <button \n            onClick={toggleTheme}\n            data-testid=\"button-toggle-theme\"\n            className=\"flex items-center space-x-3 px-3 py-2 rounded-md text-muted-foreground hover:text-foreground hover:bg-muted/50 transition-colors w-full\"\n            title={theme === 'light' ? 'Switch to dark mode' : 'Switch to light mode'}\n          >\n            {theme === 'light' ? <Moon className=\"w-5 h-5\" /> : <Sun className=\"w-5 h-5\" />}\n            <span>{theme === 'light' ? 'Dark Mode' : 'Light Mode'}</span>\n          </button>\n          \n          <button \n            onClick={logout}\n            data-testid=\"button-logout\"\n            className=\"flex items-center space-x-3 px-3 py-2 rounded-md text-muted-foreground hover:text-foreground hover:bg-muted/50 transition-colors w-full\"\n          >\n            <i className=\"fas fa-sign-out-alt w-5\"></i>\n            <span>Logout</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6840},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { queryClient } from './queryClient';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: User;\n}\n\nconst TOKEN_KEY = 'clinic_token';\n\nexport function getToken(): string | null {\n  return localStorage.getItem(TOKEN_KEY);\n}\n\nexport function setToken(token: string): void {\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\nexport function removeToken(): void {\n  localStorage.removeItem(TOKEN_KEY);\n}\n\nexport function logout(): void {\n  removeToken();\n  queryClient.clear();\n  window.location.href = '/login';\n}\n\nexport function getAuthHeaders(): Record<string, string> {\n  const token = getToken();\n  return token ? { Authorization: `Bearer ${token}` } : {};\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown,\n): Promise<Response> {\n  const headers: Record<string, string> = {\n    ...getAuthHeaders(),\n  };\n\n  let body: string | FormData | undefined;\n  \n  if (data instanceof FormData) {\n    // Don't set Content-Type for FormData - browser will set it with boundary\n    body = data;\n  } else if (data) {\n    headers['Content-Type'] = 'application/json';\n    body = JSON.stringify(data);\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body,\n  });\n\n  if (res.status === 401) {\n    logout();\n    throw new Error('Unauthorized');\n  }\n\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n\n  return res;\n}\n","size_bytes":1526},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nconst TOKEN_KEY = 'clinic_token';\n\nfunction getToken(): string | null {\n  return localStorage.getItem(TOKEN_KEY);\n}\n\nfunction getAuthHeaders(): Record<string, string> {\n  const token = getToken();\n  return token ? { Authorization: `Bearer ${token}` } : {};\n}\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = {\n    ...getAuthHeaders(),\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: getAuthHeaders(),\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1760},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Format a date to dd/mm/year format\n */\nexport function formatDate(date: Date | string | null | undefined): string {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  \n  return d.toLocaleDateString('en-GB', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  });\n}\n\n/**\n * Format a date to dd/mm/year with time\n */\nexport function formatDateTime(date: Date | string | null | undefined): string {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  \n  const dateStr = d.toLocaleDateString('en-GB', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  });\n  const timeStr = d.toLocaleTimeString('en-GB', {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false\n  });\n  \n  return `${dateStr} ${timeStr}`;\n}\n\n/**\n * Format time only\n */\nexport function formatTime(date: Date | string | null | undefined): string {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  \n  return d.toLocaleTimeString('en-GB', {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false\n  });\n}\n\n/**\n * Convert Date to datetime-local input format (YYYY-MM-DDTHH:mm) in local timezone\n * This avoids the timezone conversion issues with toISOString()\n */\nexport function dateToLocalDateTimeString(date: Date | string | null | undefined): string {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  \n  // Get local date and time components to avoid UTC conversion\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  const hours = String(d.getHours()).padStart(2, '0');\n  const minutes = String(d.getMinutes()).padStart(2, '0');\n  \n  return `${year}-${month}-${day}T${hours}:${minutes}`;\n}\n\n/**\n * Convert datetime-local input string to Date object, preserving local timezone\n * This ensures the date represents the exact time the user selected\n */\nexport function localDateTimeStringToDate(dateTimeString: string): Date {\n  if (!dateTimeString) return new Date();\n  \n  // The datetime-local input provides YYYY-MM-DDTHH:mm format in local time\n  // We create a Date object directly from this, which treats it as local time\n  return new Date(dateTimeString);\n}\n\n/**\n * Round a date to the nearest 30-minute interval\n * This ensures appointments are scheduled in 30-minute slots\n */\nexport function roundToNearest30Minutes(date: Date): Date {\n  const rounded = new Date(date);\n  const minutes = rounded.getMinutes();\n  \n  // Round to nearest 30-minute interval\n  if (minutes < 15) {\n    rounded.setMinutes(0, 0, 0); // Round down to :00\n  } else if (minutes < 45) {\n    rounded.setMinutes(30, 0, 0); // Round to :30\n  } else {\n    rounded.setMinutes(0, 0, 0); // Round up to next hour :00\n    rounded.setHours(rounded.getHours() + 1);\n  }\n  \n  return rounded;\n}\n\n/**\n * Check if a date is aligned to a 30-minute boundary\n */\nexport function isAlignedTo30Minutes(date: Date): boolean {\n  const minutes = date.getMinutes();\n  return minutes === 0 || minutes === 30;\n}\n\n/**\n * Get the next available 30-minute slot from the current time\n * Useful for setting default appointment times\n */\nexport function getNextAvailable30MinuteSlot(): Date {\n  const now = new Date();\n  const next = new Date(now);\n  \n  // Add 30 minutes to current time as buffer\n  next.setMinutes(next.getMinutes() + 30);\n  \n  // Round to next 30-minute boundary\n  return roundToNearest30Minutes(next);\n}\n","size_bytes":3705},"client/src/lib/websocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<any>(null);\n  const ws = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        setLastMessage(message);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return { isConnected, lastMessage, sendMessage };\n}\n","size_bytes":1329},"client/src/pages/Appointments.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { insertAppointmentSchema, type InsertAppointment } from '@shared/schema';\nimport { apiRequest } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatDate, formatTime, dateToLocalDateTimeString, localDateTimeStringToDate, roundToNearest30Minutes, getNextAvailable30MinuteSlot } from '@/lib/utils';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Calendar, Clock, User, CalendarPlus, Search, X, Send, Loader2 } from 'lucide-react';\n\nexport default function Appointments() {\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [patientSearchQuery, setPatientSearchQuery] = useState('');\n  const [selectedPatient, setSelectedPatient] = useState<any | null>(null);\n  const [showPatientResults, setShowPatientResults] = useState(false);\n  const [selectedWeeklyReminder, setSelectedWeeklyReminder] = useState<string | null>(null);\n  const [selectedDailyReminder, setSelectedDailyReminder] = useState<string | null>(null);\n  const [processingSendId, setProcessingSendId] = useState<string | null>(null);\n  const [weeklyReminderMessage, setWeeklyReminderMessage] = useState(\"Hello [name and Lastname]! ⏰ Friendly reminder: You have an upcoming appointment in one week on Tuesday at 13:00 with Dr [name]. You can respond if you wish to reschedule.\");\n  const [dailyReminderMessage, setDailyReminderMessage] = useState(\"Hello [name and Last name] ⏰ Friendly reminder: You have an upcoming appointment tomorrow at [time]with Dr [name]. Please arrive 15 minutes before so you can be attended to on time.\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Helper functions for quick date selection\n  const getTodayDate = () => new Date().toISOString().split('T')[0];\n  const getTomorrowDate = () => {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    return tomorrow.toISOString().split('T')[0];\n  };\n\n  const setToday = () => setSelectedDate(getTodayDate());\n  const setTomorrow = () => setSelectedDate(getTomorrowDate());\n\n  const isToday = selectedDate === getTodayDate();\n  const isTomorrow = selectedDate === getTomorrowDate();\n\n  // Helper functions for reminder status\n  const getReminderStatus = (appointmentId: string, reminderType: 'weekly' | 'daily') => {\n    if (!reminderStatuses) return null;\n    const status = reminderStatuses.find((s: any) => s.appointmentId === appointmentId);\n    if (!status) return null;\n    return reminderType === 'weekly' ? status.weeklyReminder : status.dailyReminder;\n  };\n\n  const isReminderSent = (appointmentId: string, reminderType: 'weekly' | 'daily') => {\n    const reminder = getReminderStatus(appointmentId, reminderType);\n    // Check if reminder exists and has been sent (webhookResponse exists, even if empty string)\n    return !!(reminder && reminder.hasOwnProperty('webhookResponse'));\n  };\n\n  const form = useForm<InsertAppointment>({\n    resolver: zodResolver(insertAppointmentSchema),\n    defaultValues: {\n      patientId: '',\n      doctorId: '',\n      appointmentDate: getNextAvailable30MinuteSlot(),\n      appointmentType: '',\n      notes: '',\n    },\n  });\n\n  const { data: appointments } = useQuery({\n    queryKey: ['/api/appointments', selectedDate],\n    queryFn: async () => {\n      const res = await apiRequest('GET', `/api/appointments?date=${selectedDate}`);\n      return res.json();\n    },\n  });\n\n  const { data: patientSearchResults } = useQuery({\n    queryKey: ['/api/patients/search', patientSearchQuery],\n    queryFn: async () => {\n      if (!patientSearchQuery.trim()) return [];\n      const res = await apiRequest('GET', `/api/patients/search?q=${encodeURIComponent(patientSearchQuery)}`);\n      return res.json();\n    },\n    enabled: patientSearchQuery.length > 2,\n  });\n\n  const { data: doctors, error: doctorsError, isLoading: doctorsLoading } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/users');\n      const users = await res.json();\n      return users.filter((user: any) => user.role === 'doctor');\n    },\n  });\n\n  // Get weekly reminder candidates (appointments in 7 days)\n  const { data: weeklyReminderCandidates, isLoading: loadingWeeklyReminders } = useQuery({\n    queryKey: ['api', 'appointments', 'reminders', 'weekly'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/appointments/reminders/weekly');\n      return res.json();\n    },\n  });\n\n  // Get daily reminder candidates (appointments tomorrow)\n  const { data: dailyReminderCandidates, isLoading: loadingDailyReminders } = useQuery({\n    queryKey: ['api', 'appointments', 'reminders', 'daily'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/appointments/reminders/daily');\n      return res.json();\n    },\n  });\n\n  // Get reminder statuses for all candidates\n  const { data: reminderStatuses } = useQuery({\n    queryKey: ['api', 'appointments', 'reminders', 'statuses'],\n    queryFn: async () => {\n      const allAppointmentIds = [\n        ...(weeklyReminderCandidates?.map((apt: any) => apt.id) || []),\n        ...(dailyReminderCandidates?.map((apt: any) => apt.id) || [])\n      ];\n      \n      if (allAppointmentIds.length === 0) return [];\n      \n      const res = await apiRequest('POST', '/api/appointments/reminders/statuses', { \n        appointmentIds: allAppointmentIds \n      });\n      return res.json();\n    },\n    enabled: !!(weeklyReminderCandidates || dailyReminderCandidates),\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (data: InsertAppointment) => {\n      const res = await apiRequest('POST', '/api/appointments', data);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Appointment Scheduled',\n        description: 'The appointment has been successfully scheduled.',\n      });\n      // Preserve doctor selection for convenience, but reset other fields\n      const currentDoctorId = form.getValues('doctorId');\n      form.reset({\n        patientId: '',\n        doctorId: currentDoctorId, // Keep the same doctor selected\n        appointmentDate: getNextAvailable30MinuteSlot(),\n        appointmentType: '',\n        notes: '',\n      });\n      // Clear patient selection state\n      setSelectedPatient(null);\n      setPatientSearchQuery('');\n      setShowPatientResults(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Scheduling Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateAppointmentMutation = useMutation({\n    mutationFn: async ({ id, ...data }: { id: string } & Partial<InsertAppointment>) => {\n      const res = await apiRequest('PUT', `/api/appointments/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Appointment Updated',\n        description: 'The appointment has been successfully updated.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Update Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const selectPatient = (patient: any) => {\n    setSelectedPatient(patient);\n    setPatientSearchQuery('');\n    setShowPatientResults(false);\n    form.setValue('patientId', patient.id);\n  };\n\n  const clearSelectedPatient = () => {\n    setSelectedPatient(null);\n    setPatientSearchQuery('');\n    setShowPatientResults(false);\n    form.setValue('patientId', '');\n  };\n\n  const onSubmit = (data: InsertAppointment) => {\n    // Debug logging\n    console.log('🔍 Form submission data:', data);\n    console.log('🔍 Current form values:', form.getValues());\n    \n    // Check if required fields are filled\n    if (!data.patientId) {\n      console.error('❌ Missing patientId in form data');\n      toast({\n        title: 'Missing Patient',\n        description: 'Please select a patient before booking the appointment.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    if (!data.doctorId) {\n      console.error('❌ Missing doctorId in form data');\n      toast({\n        title: 'Missing Doctor',\n        description: 'Please select a doctor before booking the appointment.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    if (!data.appointmentType) {\n      console.error('❌ Missing appointmentType in form data');\n      toast({\n        title: 'Missing Appointment Type',\n        description: 'Please select an appointment type before booking.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    createAppointmentMutation.mutate(data);\n  };\n\n  const getStatusBadgeClass = (status: string) => {\n    switch (status) {\n      case 'scheduled': return 'badge-waiting';\n      case 'confirmed': return 'badge-in-progress';\n      case 'in_progress': return 'badge-in-progress';\n      case 'completed': return 'badge-completed';\n      case 'cancelled': return 'badge-urgent';\n      default: return 'badge-waiting';\n    }\n  };\n\n  const updateAppointmentStatus = (id: string, status: 'scheduled' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled') => {\n    updateAppointmentMutation.mutate({ id, status });\n  };\n\n  // Send appointment reminders mutation\n  const sendRemindersMutation = useMutation({\n    mutationFn: async ({ appointmentIds, reminderType, customMessage }: { appointmentIds: string[], reminderType: 'weekly' | 'daily', customMessage?: string }) => {\n      const res = await apiRequest('POST', `/api/appointments/reminders/${reminderType}`, { appointmentIds, customMessage });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Reminder sent!\",\n        description: \"Appointment reminder has been sent successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['api', 'appointments', 'reminders'] });\n      queryClient.invalidateQueries({ queryKey: ['api', 'appointments', 'reminders', 'statuses'] });\n      setSelectedWeeklyReminder(null);\n      setSelectedDailyReminder(null);\n      setProcessingSendId(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send reminder\",\n        description: error.message || \"An error occurred while sending the reminder.\",\n        variant: \"destructive\",\n      });\n      setProcessingSendId(null);\n    },\n  });\n\n  // Check if any reminder is being processed\n  const isAnyProcessing = () => {\n    return processingSendId !== null;\n  };\n\n  const isProcessingReminder = (appointmentId: string) => {\n    return processingSendId === appointmentId;\n  };\n\n  const sendWeeklyReminder = () => {\n    if (!selectedWeeklyReminder) {\n      toast({\n        title: \"No appointment selected\",\n        description: \"Please select an appointment to send weekly reminder.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setProcessingSendId(selectedWeeklyReminder);\n    sendRemindersMutation.mutate({ \n      appointmentIds: [selectedWeeklyReminder], \n      reminderType: 'weekly',\n      customMessage: weeklyReminderMessage\n    });\n  };\n\n  const sendDailyReminder = () => {\n    if (!selectedDailyReminder) {\n      toast({\n        title: \"No appointment selected\",\n        description: \"Please select an appointment to send daily reminder.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setProcessingSendId(selectedDailyReminder);\n    sendRemindersMutation.mutate({ \n      appointmentIds: [selectedDailyReminder], \n      reminderType: 'daily',\n      customMessage: dailyReminderMessage\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Appointments</h1>\n          <p className=\"text-muted-foreground\">Schedule and manage patient appointments</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Appointment Form */}\n        <Card className=\"lg:col-span-1\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CalendarPlus className=\"w-5 h-5\" />\n              Schedule Appointment\n            </CardTitle>\n            <CardDescription>\n              Book new appointments with automatic conflict prevention\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"patientId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Patient *</FormLabel>\n                      <div className=\"space-y-2\">\n                        {selectedPatient ? (\n                          <div className=\"flex items-center justify-between p-3 border rounded-lg bg-muted/50\">\n                            <div className=\"flex items-center gap-3\">\n                              <Avatar className=\"w-8 h-8\">\n                                {selectedPatient.photoUrl && <AvatarImage src={selectedPatient.photoUrl} />}\n                                <AvatarFallback className=\"text-sm\">\n                                  {selectedPatient.firstName.charAt(0)}{selectedPatient.lastName.charAt(0)}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <p className=\"font-medium text-sm\" data-testid=\"text-selected-patient\">\n                                  {selectedPatient.firstName} {selectedPatient.lastName}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">{selectedPatient.phone}</p>\n                              </div>\n                            </div>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={clearSelectedPatient}\n                              data-testid=\"button-clear-patient\"\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        ) : (\n                          <div className=\"relative\">\n                            <div className=\"relative\">\n                              <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n                              <Input\n                                placeholder=\"Search by name, phone, or ID number...\"\n                                value={patientSearchQuery}\n                                onChange={(e) => {\n                                  setPatientSearchQuery(e.target.value);\n                                  setShowPatientResults(e.target.value.length > 2);\n                                }}\n                                className=\"pl-10\"\n                                data-testid=\"input-patient-search\"\n                              />\n                            </div>\n                            \n                            {showPatientResults && patientSearchResults && patientSearchResults.length > 0 && (\n                              <div className=\"absolute z-50 w-full mt-1 bg-background border rounded-lg shadow-lg max-h-60 overflow-auto\">\n                                {patientSearchResults.map((patient: any) => (\n                                  <div\n                                    key={patient.id}\n                                    className=\"flex items-center gap-3 p-3 hover:bg-muted cursor-pointer border-b last:border-b-0\"\n                                    onClick={() => selectPatient(patient)}\n                                    data-testid={`patient-search-result-${patient.id}`}\n                                  >\n                                    <Avatar className=\"w-8 h-8\">\n                                      {patient.photoUrl && <AvatarImage src={patient.photoUrl} />}\n                                      <AvatarFallback className=\"text-sm\">\n                                        {patient.firstName.charAt(0)}{patient.lastName.charAt(0)}\n                                      </AvatarFallback>\n                                    </Avatar>\n                                    <div className=\"flex-1\">\n                                      <p className=\"font-medium text-sm\">\n                                        {patient.firstName} {patient.lastName}\n                                      </p>\n                                      <p className=\"text-xs text-muted-foreground\">\n                                        {patient.phone} • ID: {patient.idNumber}\n                                      </p>\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                            \n                            {showPatientResults && patientSearchResults && patientSearchResults.length === 0 && patientSearchQuery.length > 2 && (\n                              <div className=\"absolute z-50 w-full mt-1 bg-background border rounded-lg shadow-lg p-3 text-sm text-muted-foreground text-center\">\n                                No patients found matching \"{patientSearchQuery}\"\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"doctorId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Doctor *</FormLabel>\n                      {doctorsLoading && <p className=\"text-sm text-muted-foreground\">Loading doctors...</p>}\n                      {doctorsError && <p className=\"text-sm text-red-500\">Error loading doctors: {(doctorsError as Error).message}</p>}\n                      <Select \n                        onValueChange={field.onChange} \n                        value={field.value}\n                        disabled={doctorsLoading || !!doctorsError}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-doctor\">\n                            <SelectValue placeholder={doctorsLoading ? \"Loading...\" : \"Select doctor\"} />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {doctors?.map((doctor: any) => (\n                            <SelectItem key={doctor.id} value={doctor.id}>\n                              {doctor.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"appointmentDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date & Time *</FormLabel>\n                      <FormControl>\n                        <div className=\"space-y-2\">\n                          <Input\n                            {...field}\n                            type=\"datetime-local\"\n                            step=\"1800\"\n                            value={field.value instanceof Date ? \n                              dateToLocalDateTimeString(field.value) : ''}\n                            onChange={(e) => {\n                              const selectedDate = localDateTimeStringToDate(e.target.value);\n                              const roundedDate = roundToNearest30Minutes(selectedDate);\n                              field.onChange(roundedDate);\n                            }}\n                            data-testid=\"input-appointment-datetime\"\n                          />\n                          <p className=\"text-sm text-muted-foreground\">\n                            Appointments are scheduled in 30-minute intervals (e.g., 09:00, 09:30, 10:00)\n                          </p>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"appointmentType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Appointment Type *</FormLabel>\n                      <Select \n                        onValueChange={(value) => {\n                          console.log('🔍 Appointment type selected:', value);\n                          field.onChange(value);\n                        }} \n                        value={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-appointment-type\">\n                            <SelectValue placeholder=\"Select type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"General Checkup\">General Checkup</SelectItem>\n                          <SelectItem value=\"Follow-up\">Follow-up</SelectItem>\n                          <SelectItem value=\"Consultation\">Consultation</SelectItem>\n                          <SelectItem value=\"Annual Physical\">Annual Physical</SelectItem>\n                          <SelectItem value=\"Pediatric Consultation\">Pediatric Consultation</SelectItem>\n                          <SelectItem value=\"Specialist Referral\">Specialist Referral</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field}\n                          value={field.value || ''} \n                          placeholder=\"Additional notes...\"\n                          data-testid=\"input-appointment-notes\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={createAppointmentMutation.isPending}\n                  data-testid=\"button-schedule-appointment\"\n                >\n                  {createAppointmentMutation.isPending ? 'Scheduling...' : 'Schedule Appointment'}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Appointments List */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                Appointments Schedule\n              </CardTitle>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant={isToday ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={setToday}\n                    data-testid=\"button-today\"\n                    className=\"flex items-center gap-1\"\n                  >\n                    <Calendar className=\"w-4 h-4\" />\n                    Today\n                  </Button>\n                  <Button\n                    variant={isTomorrow ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={setTomorrow}\n                    data-testid=\"button-tomorrow\"\n                    className=\"flex items-center gap-1\"\n                  >\n                    <Calendar className=\"w-4 h-4\" />\n                    Tomorrow\n                  </Button>\n                </div>\n                <Input\n                  type=\"date\"\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  className=\"w-auto\"\n                  data-testid=\"input-date-filter\"\n                />\n              </div>\n            </div>\n            <CardDescription className=\"flex items-center justify-between\">\n              <span>Manage and track appointment status</span>\n              <span className=\"text-sm font-medium\">\n                Viewing: {formatDate(selectedDate)}\n                {isToday && \" (Today)\"}\n                {isTomorrow && \" (Tomorrow)\"}\n              </span>\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {appointments && appointments.length > 0 ? (\n                appointments.map((appointment: any) => (\n                  <div key={appointment.id} className=\"border rounded-lg p-4 hover:bg-muted/50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"text-center min-w-[60px]\">\n                          <div className=\"text-lg font-bold text-foreground\">\n                            {formatTime(appointment.appointmentDate)}\n                          </div>\n                        </div>\n                        <div className=\"flex-1\">\n                          {/* Patient name prominently displayed */}\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <User className=\"w-5 h-5 text-primary\" />\n                            <span className=\"text-lg font-semibold text-foreground\" data-testid={`text-patient-${appointment.id}`}>\n                              {appointment.patient?.firstName} {appointment.patient?.lastName}\n                            </span>\n                          </div>\n                          {/* Appointment type prominently displayed */}\n                          <div className=\"text-base font-medium text-foreground mb-1\">\n                            {appointment.appointmentType}\n                          </div>\n                          {/* Doctor name as secondary information */}\n                          <div className=\"text-sm text-muted-foreground\">\n                            Dr. {appointment.doctor?.name}\n                          </div>\n                          {appointment.notes && (\n                            <div className=\"text-sm text-muted-foreground mt-2 italic\">\n                              {appointment.notes}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge \n                          className={`px-2 py-1 text-xs font-medium rounded-full border ${getStatusBadgeClass(appointment.status)}`}\n                          data-testid={`badge-status-${appointment.id}`}\n                        >\n                          {appointment.status.replace('_', ' ')}\n                        </Badge>\n                        <div className=\"flex gap-1\">\n                          {appointment.status === 'scheduled' && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => updateAppointmentStatus(appointment.id, 'confirmed')}\n                              data-testid={`button-confirm-${appointment.id}`}\n                            >\n                              Confirm\n                            </Button>\n                          )}\n                          {(appointment.status === 'confirmed' || appointment.status === 'scheduled') && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => updateAppointmentStatus(appointment.id, 'cancelled')}\n                              data-testid={`button-cancel-${appointment.id}`}\n                            >\n                              Cancel\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-appointments\">\n                  No appointments scheduled for {formatDate(selectedDate)}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Appointment Reminders Section - Full Width */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5 text-blue-500\" />\n            Appointment Reminders\n          </CardTitle>\n          <CardDescription>\n            Send automatic reminders to patients with upcoming appointments\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {/* 1-Week Reminders */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4 text-blue-500\" />\n                <h3 className=\"text-lg font-semibold\">1-Week Reminders</h3>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Send reminders to patients with appointments in 7 days\n              </p>\n              \n              {/* Message field for weekly reminders */}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"weekly-message\" className=\"text-sm font-medium\">\n                  Reminder Message\n                </label>\n                <Textarea\n                  id=\"weekly-message\"\n                  value={weeklyReminderMessage}\n                  onChange={(e) => setWeeklyReminderMessage(e.target.value)}\n                  rows={3}\n                  className=\"text-sm\"\n                  data-testid=\"textarea-weekly-reminder-message\"\n                />\n              </div>\n              \n              <div className=\"border rounded-lg p-4 min-h-[200px]\">\n                {loadingWeeklyReminders ? (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <Loader2 className=\"h-6 w-6 animate-spin\" />\n                    <span className=\"ml-2\">Loading weekly reminders...</span>\n                  </div>\n                ) : weeklyReminderCandidates?.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"space-y-2\">\n                      {weeklyReminderCandidates.map((appointment: any) => (\n                        <div key={appointment.id} className={`flex items-center justify-between p-3 border rounded-lg ${selectedWeeklyReminder === appointment.id ? 'border-blue-500 bg-blue-50/50' : ''}`}>\n                          <div className=\"flex items-center gap-3\">\n                            <input\n                              type=\"radio\"\n                              id={`radio-weekly-${appointment.id}`}\n                              name=\"weekly-reminder\"\n                              checked={selectedWeeklyReminder === appointment.id}\n                              onChange={() => setSelectedWeeklyReminder(appointment.id)}\n                              disabled={isReminderSent(appointment.id, 'weekly') || isAnyProcessing()}\n                              className=\"h-4 w-4 text-blue-600\"\n                              data-testid={`radio-weekly-reminder-${appointment.id}`}\n                            />\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium text-sm\">\n                                {appointment.patient?.firstName} {appointment.patient?.lastName}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {new Date(appointment.appointmentDate).toLocaleDateString()} at {new Date(appointment.appointmentDate).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {appointment.appointmentType} • Dr. {appointment.doctor?.name}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {isReminderSent(appointment.id, 'weekly') ? (\n                              <Badge variant=\"secondary\" data-testid={`badge-sent-weekly-${appointment.id}`}>\n                                <Send className=\"h-3 w-3 mr-1\" />\n                                Sent\n                              </Badge>\n                            ) : isProcessingReminder(appointment.id) ? (\n                              <Badge variant=\"outline\" data-testid={`badge-sending-weekly-${appointment.id}`}>\n                                <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n                                Sending...\n                              </Badge>\n                            ) : null}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"flex justify-between items-center pt-3 border-t\">\n                      <div className=\"text-sm text-muted-foreground\">\n                        {selectedWeeklyReminder ? \n                          `Selected: ${weeklyReminderCandidates.find((a: any) => a.id === selectedWeeklyReminder)?.patient?.firstName} ${weeklyReminderCandidates.find((a: any) => a.id === selectedWeeklyReminder)?.patient?.lastName}` \n                          : 'No appointment selected'\n                        }\n                      </div>\n                      <Button \n                        size=\"sm\"\n                        onClick={sendWeeklyReminder}\n                        disabled={!selectedWeeklyReminder || isAnyProcessing() || Boolean(selectedWeeklyReminder && isReminderSent(selectedWeeklyReminder, 'weekly'))}\n                        data-testid=\"button-send-weekly-reminder\"\n                      >\n                        {isAnyProcessing() ? (\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        ) : (\n                          <Send className=\"h-3 w-3 mr-1\" />\n                        )}\n                        Send Weekly Reminder\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Calendar className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No appointments in 7 days</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* 24-Hour Reminders */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4 text-orange-500\" />\n                <h3 className=\"text-lg font-semibold\">24-Hour Reminders</h3>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Send reminders to patients with appointments tomorrow\n              </p>\n              \n              {/* Message field for daily reminders */}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"daily-message\" className=\"text-sm font-medium\">\n                  Reminder Message\n                </label>\n                <Textarea\n                  id=\"daily-message\"\n                  value={dailyReminderMessage}\n                  onChange={(e) => setDailyReminderMessage(e.target.value)}\n                  rows={3}\n                  className=\"text-sm\"\n                  data-testid=\"textarea-daily-reminder-message\"\n                />\n              </div>\n              \n              <div className=\"border rounded-lg p-4 min-h-[200px]\">\n                {loadingDailyReminders ? (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <Loader2 className=\"h-6 w-6 animate-spin\" />\n                    <span className=\"ml-2\">Loading daily reminders...</span>\n                  </div>\n                ) : dailyReminderCandidates?.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"space-y-2\">\n                      {dailyReminderCandidates.map((appointment: any) => (\n                        <div key={appointment.id} className={`flex items-center justify-between p-3 border rounded-lg ${selectedDailyReminder === appointment.id ? 'border-orange-500 bg-orange-50/50' : ''}`}>\n                          <div className=\"flex items-center gap-3\">\n                            <input\n                              type=\"radio\"\n                              id={`radio-daily-${appointment.id}`}\n                              name=\"daily-reminder\"\n                              checked={selectedDailyReminder === appointment.id}\n                              onChange={() => setSelectedDailyReminder(appointment.id)}\n                              disabled={isReminderSent(appointment.id, 'daily') || isAnyProcessing()}\n                              className=\"h-4 w-4 text-orange-600\"\n                              data-testid={`radio-daily-reminder-${appointment.id}`}\n                            />\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium text-sm\">\n                                {appointment.patient?.firstName} {appointment.patient?.lastName}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {new Date(appointment.appointmentDate).toLocaleDateString()} at {new Date(appointment.appointmentDate).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {appointment.appointmentType} • Dr. {appointment.doctor?.name}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {isReminderSent(appointment.id, 'daily') ? (\n                              <Badge variant=\"secondary\" data-testid={`badge-sent-daily-${appointment.id}`}>\n                                <Send className=\"h-3 w-3 mr-1\" />\n                                Sent\n                              </Badge>\n                            ) : isProcessingReminder(appointment.id) ? (\n                              <Badge variant=\"outline\" data-testid={`badge-sending-daily-${appointment.id}`}>\n                                <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n                                Sending...\n                              </Badge>\n                            ) : null}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"flex justify-between items-center pt-3 border-t\">\n                      <div className=\"text-sm text-muted-foreground\">\n                        {selectedDailyReminder ? \n                          `Selected: ${dailyReminderCandidates.find((a: any) => a.id === selectedDailyReminder)?.patient?.firstName} ${dailyReminderCandidates.find((a: any) => a.id === selectedDailyReminder)?.patient?.lastName}` \n                          : 'No appointment selected'\n                        }\n                      </div>\n                      <Button \n                        size=\"sm\"\n                        onClick={sendDailyReminder}\n                        disabled={!selectedDailyReminder || isAnyProcessing() || Boolean(selectedDailyReminder && isReminderSent(selectedDailyReminder, 'daily'))}\n                        data-testid=\"button-send-daily-reminder\"\n                      >\n                        {isAnyProcessing() ? (\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        ) : (\n                          <Send className=\"h-3 w-3 mr-1\" />\n                        )}\n                        Send Daily Reminder\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Clock className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No appointments tomorrow</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":42790},"client/src/pages/BusinessInsights.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/auth';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  TrendingUp, DollarSign, Users, Calendar,\n  CreditCard, Activity, Clock, BarChart3\n} from 'lucide-react';\n\nexport default function BusinessInsights() {\n  const [dateRange, setDateRange] = useState({\n    start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days ago\n    end: new Date().toISOString().split('T')[0]\n  });\n\n  const { data: dashboardStats } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/dashboard/stats');\n      return res.json();\n    },\n  });\n\n  const { data: revenueData } = useQuery({\n    queryKey: ['/api/payments', dateRange.start, dateRange.end],\n    queryFn: async () => {\n      const res = await apiRequest('GET', `/api/payments?date=${dateRange.end}`);\n      return res.json();\n    },\n  });\n\n  const { data: appointmentStats } = useQuery({\n    queryKey: ['/api/appointments', dateRange.end],\n    queryFn: async () => {\n      const res = await apiRequest('GET', `/api/appointments?date=${dateRange.end}`);\n      return res.json();\n    },\n  });\n\n  const { data: medicalAidClaims } = useQuery({\n    queryKey: ['/api/medical-aid-claims'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/medical-aid-claims');\n      return res.json();\n    },\n  });\n\n  // Fetch monthly comparison data\n  const { data: monthlyData } = useQuery({\n    queryKey: ['/api/dashboard/monthly-stats'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/dashboard/monthly-stats?months=6');\n      return res.json();\n    },\n  });\n\n  // Fetch patient retention data\n  const { data: patientRetentionData } = useQuery({\n    queryKey: ['/api/dashboard/patient-retention'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/dashboard/patient-retention');\n      return res.json();\n    },\n  });\n\n  // Fetch peak hours analysis data\n  const { data: peakHoursData } = useQuery({\n    queryKey: ['/api/dashboard/peak-hours'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/dashboard/peak-hours');\n      return res.json();\n    },\n  });\n\n  // Calculate approved medical aid claim revenue within date range\n  const approvedClaimsRevenue = medicalAidClaims ? \n    medicalAidClaims\n      .filter((claim: any) => {\n        if (claim.status !== 'approved' || !claim.claimAmount) return false;\n        if (!claim.approvedAt) return false;\n        \n        const approvedDate = new Date(claim.approvedAt).toISOString().split('T')[0];\n        return approvedDate >= dateRange.start && approvedDate <= dateRange.end;\n      })\n      .reduce((sum: number, claim: any) => sum + parseFloat(claim.claimAmount || 0), 0) : 0;\n\n  // Calculate revenue statistics\n  const revenueStats = revenueData ? {\n    total: revenueData.reduce((sum: number, payment: any) => sum + parseFloat(payment.amount), 0) + approvedClaimsRevenue,\n    cash: revenueData.filter((p: any) => p.paymentMethod === 'cash').reduce((sum: number, payment: any) => sum + parseFloat(payment.amount), 0),\n    medicalAid: revenueData.filter((p: any) => p.paymentMethod === 'medical_aid').reduce((sum: number, payment: any) => sum + parseFloat(payment.amount), 0),\n    both: revenueData.filter((p: any) => p.paymentMethod === 'both').reduce((sum: number, payment: any) => sum + parseFloat(payment.amount), 0),\n    approvedClaims: approvedClaimsRevenue,\n    count: revenueData.length\n  } : { total: approvedClaimsRevenue, cash: 0, medicalAid: 0, both: 0, approvedClaims: approvedClaimsRevenue, count: 0 };\n\n  // Calculate appointment statistics\n  const appointmentData = appointmentStats ? {\n    total: appointmentStats.length,\n    completed: appointmentStats.filter((a: any) => a.status === 'completed').length,\n    cancelled: appointmentStats.filter((a: any) => a.status === 'cancelled').length,\n    scheduled: appointmentStats.filter((a: any) => a.status === 'scheduled').length,\n    walkIns: 0 // This would need to be calculated from check-ins\n  } : { total: 0, completed: 0, cancelled: 0, scheduled: 0, walkIns: 0 };\n\n  const performanceMetrics = {\n    completionRate: appointmentData.total > 0 ? Math.round((appointmentData.completed / appointmentData.total) * 100) : 0,\n    cancellationRate: appointmentData.total > 0 ? Math.round((appointmentData.cancelled / appointmentData.total) * 100) : 0,\n    avgRevenuePerVisit: revenueStats.count > 0 ? Math.round(revenueStats.total / revenueStats.count) : 0\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Business Insights</h1>\n          <p className=\"text-muted-foreground\">Revenue tracking and performance analytics</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Input\n            type=\"date\"\n            value={dateRange.start}\n            onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}\n            className=\"w-auto\"\n            data-testid=\"input-date-start\"\n          />\n          <span className=\"text-muted-foreground\">to</span>\n          <Input\n            type=\"date\"\n            value={dateRange.end}\n            onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}\n            className=\"w-auto\"\n            data-testid=\"input-date-end\"\n          />\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Revenue</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-revenue\">\n                  R{revenueStats.total.toLocaleString()}\n                </p>\n                <p className=\"text-sm text-accent mt-1\">\n                  <TrendingUp className=\"inline w-3 h-3 mr-1\" />\n                  Today: R{dashboardStats?.todayRevenue || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <span className=\"text-green-600 font-bold text-xl\">R</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Visits</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-visits\">\n                  {revenueStats.count}\n                </p>\n                <p className=\"text-sm text-blue-600 mt-1\">\n                  <Calendar className=\"inline w-3 h-3 mr-1\" />\n                  Appointments: {appointmentData.total}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"text-blue-600 w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Completion Rate</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-completion-rate\">\n                  {performanceMetrics.completionRate}%\n                </p>\n                <p className=\"text-sm text-accent mt-1\">\n                  <Activity className=\"inline w-3 h-3 mr-1\" />\n                  {appointmentData.completed} completed\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"text-purple-600 w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Avg Revenue/Visit</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-avg-revenue-per-visit\">\n                  R{performanceMetrics.avgRevenuePerVisit}\n                </p>\n                <p className=\"text-sm text-orange-600 mt-1\">\n                  <Clock className=\"inline w-3 h-3 mr-1\" />\n                  Per patient\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"text-orange-600 w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Breakdown */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"w-5 h-5\" />\n              Payment Method Breakdown\n            </CardTitle>\n            <CardDescription>\n              Revenue distribution by payment method\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                  <span className=\"font-medium\">Cash Payments</span>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-semibold\" data-testid=\"text-cash-revenue\">R{revenueStats.cash.toLocaleString()}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {revenueStats.total > 0 ? Math.round((revenueStats.cash / revenueStats.total) * 100) : 0}%\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                  <span className=\"font-medium\">Medical Aid</span>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-semibold\" data-testid=\"text-medical-aid-revenue\">R{revenueStats.medicalAid.toLocaleString()}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {revenueStats.total > 0 ? Math.round((revenueStats.medicalAid / revenueStats.total) * 100) : 0}%\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\n                  <span className=\"font-medium\">Combined Payment</span>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-semibold\" data-testid=\"text-both-revenue\">R{revenueStats.both.toLocaleString()}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {revenueStats.total > 0 ? Math.round((revenueStats.both / revenueStats.total) * 100) : 0}%\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 border rounded-lg bg-green-50 dark:bg-green-950/20\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-4 h-4 bg-emerald-500 rounded\"></div>\n                  <span className=\"font-medium\">Approved Medical Aid Claims</span>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-semibold\" data-testid=\"text-approved-claims-revenue\">R{revenueStats.approvedClaims.toLocaleString()}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {revenueStats.total > 0 ? Math.round((revenueStats.approvedClaims / revenueStats.total) * 100) : 0}%\n                  </p>\n                </div>\n              </div>\n\n              {/* Revenue Progress Bar */}\n              <div className=\"mt-6\">\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span>Payment Distribution</span>\n                  <span>R{revenueStats.total.toLocaleString()}</span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-3 flex overflow-hidden\">\n                  <div \n                    className=\"bg-green-500\" \n                    style={{ width: `${revenueStats.total > 0 ? (revenueStats.cash / revenueStats.total) * 100 : 0}%` }}\n                  ></div>\n                  <div \n                    className=\"bg-blue-500\" \n                    style={{ width: `${revenueStats.total > 0 ? (revenueStats.medicalAid / revenueStats.total) * 100 : 0}%` }}\n                  ></div>\n                  <div \n                    className=\"bg-purple-500\" \n                    style={{ width: `${revenueStats.total > 0 ? (revenueStats.both / revenueStats.total) * 100 : 0}%` }}\n                  ></div>\n                  <div \n                    className=\"bg-emerald-500\" \n                    style={{ width: `${revenueStats.total > 0 ? (revenueStats.approvedClaims / revenueStats.total) * 100 : 0}%` }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Appointment Analytics */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"w-5 h-5\" />\n              Appointment Analytics\n            </CardTitle>\n            <CardDescription>\n              Visit statistics and appointment performance\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-completed-appointments\">\n                    {appointmentData.completed}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Completed</p>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-scheduled-appointments\">\n                    {appointmentData.scheduled}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Scheduled</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Completion Rate</span>\n                  <Badge className=\"badge-completed\">\n                    {performanceMetrics.completionRate}%\n                  </Badge>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div \n                    className=\"bg-green-500 h-2 rounded-full\" \n                    style={{ width: `${performanceMetrics.completionRate}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Cancellation Rate</span>\n                  <Badge className=\"badge-urgent\">\n                    {performanceMetrics.cancellationRate}%\n                  </Badge>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div \n                    className=\"bg-red-500 h-2 rounded-full\" \n                    style={{ width: `${performanceMetrics.cancellationRate}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              <div className=\"mt-6 p-4 bg-muted/30 rounded-lg\">\n                <h4 className=\"font-medium mb-2\">Performance Summary</h4>\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Total Appointments:</span>\n                    <span className=\"font-medium ml-2\">{appointmentData.total}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Cancelled:</span>\n                    <span className=\"font-medium ml-2\">{appointmentData.cancelled}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Additional Performance Metrics */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"w-5 h-5\" />\n            Clinic Efficiency Metrics\n          </CardTitle>\n          <CardDescription>\n            Monitor clinic performance and patient flow\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Users className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <h3 className=\"font-semibold text-lg\" data-testid=\"text-total-patients-served\">\n                {revenueStats.count}\n              </h3>\n              <p className=\"text-muted-foreground\">Patients Served</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <span className=\"text-green-600 font-bold text-2xl\">R</span>\n              </div>\n              <h3 className=\"font-semibold text-lg\" data-testid=\"text-efficiency-metric\">\n                R{performanceMetrics.avgRevenuePerVisit}\n              </h3>\n              <p className=\"text-muted-foreground\">Revenue per Patient</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <BarChart3 className=\"w-8 h-8 text-purple-600\" />\n              </div>\n              <h3 className=\"font-semibold text-lg\" data-testid=\"text-success-rate\">\n                {performanceMetrics.completionRate}%\n              </h3>\n              <p className=\"text-muted-foreground\">Success Rate</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Monthly Comparison - Peak Periods Analysis */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5\" />\n            Monthly Performance Comparison\n          </CardTitle>\n          <CardDescription>\n            Compare performance across months to identify peak periods\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {monthlyData && monthlyData.monthlyData?.length > 0 ? (\n            <div className=\"space-y-6\">\n              {/* Peak Periods Summary */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-muted/30 rounded-lg\">\n                <div className=\"text-center\">\n                  <h4 className=\"text-lg font-semibold text-green-600\">\n                    Peak Revenue Month\n                  </h4>\n                  {(() => {\n                    const peakRevenueMonth = monthlyData.monthlyData.reduce((max: any, month: any) => \n                      month.revenue > max.revenue ? month : max\n                    );\n                    return (\n                      <div>\n                        <p className=\"font-bold text-xl\">{peakRevenueMonth.month} {peakRevenueMonth.year}</p>\n                        <p className=\"text-sm text-muted-foreground\">R{peakRevenueMonth.revenue.toLocaleString()}</p>\n                      </div>\n                    );\n                  })()}\n                </div>\n                <div className=\"text-center\">\n                  <h4 className=\"text-lg font-semibold text-blue-600\">\n                    Busiest Month\n                  </h4>\n                  {(() => {\n                    const busiestMonth = monthlyData.monthlyData.reduce((max: any, month: any) => \n                      month.appointments > max.appointments ? month : max\n                    );\n                    return (\n                      <div>\n                        <p className=\"font-bold text-xl\">{busiestMonth.month} {busiestMonth.year}</p>\n                        <p className=\"text-sm text-muted-foreground\">{busiestMonth.appointments} appointments</p>\n                      </div>\n                    );\n                  })()}\n                </div>\n              </div>\n\n              {/* Monthly Data Table */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse\">\n                  <thead>\n                    <tr className=\"border-b\">\n                      <th className=\"text-left p-2 font-medium\">Month</th>\n                      <th className=\"text-right p-2 font-medium\">Revenue</th>\n                      <th className=\"text-right p-2 font-medium\">Appointments</th>\n                      <th className=\"text-right p-2 font-medium\">New Patients</th>\n                      <th className=\"text-right p-2 font-medium\">Success Rate</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {monthlyData.monthlyData.map((month: any, index: number) => {\n                      const isHighRevenue = month.revenue === Math.max(...monthlyData.monthlyData.map((m: any) => m.revenue));\n                      const isHighAppointments = month.appointments === Math.max(...monthlyData.monthlyData.map((m: any) => m.appointments));\n                      \n                      return (\n                        <tr \n                          key={index} \n                          className=\"border-b hover:bg-muted/20\"\n                          data-testid={`monthly-data-row-${month.month.toLowerCase()}-${month.year}`}\n                        >\n                          <td className=\"p-2 font-medium\">\n                            {month.month} {month.year}\n                          </td>\n                          <td className={`p-2 text-right font-mono ${isHighRevenue ? 'text-green-600 font-bold' : ''}`}>\n                            R{month.revenue.toLocaleString()}\n                            {isHighRevenue && <span className=\"ml-1 text-xs\">📈</span>}\n                          </td>\n                          <td className={`p-2 text-right ${isHighAppointments ? 'text-blue-600 font-bold' : ''}`}>\n                            {month.appointments}\n                            {isHighAppointments && <span className=\"ml-1 text-xs\">👥</span>}\n                          </td>\n                          <td className=\"p-2 text-right\">\n                            {month.patients}\n                          </td>\n                          <td className={`p-2 text-right ${month.completionRate >= 90 ? 'text-green-600' : month.completionRate < 70 ? 'text-red-600' : ''}`}>\n                            {month.completionRate}%\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n\n              {/* Performance Insights */}\n              <div className=\"mt-4 p-4 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                <h4 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2\">Peak Period Insights</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-700 dark:text-blue-300\">\n                  {(() => {\n                    const avgRevenue = monthlyData.monthlyData.reduce((sum: number, month: any) => sum + month.revenue, 0) / monthlyData.monthlyData.length;\n                    const avgAppointments = monthlyData.monthlyData.reduce((sum: number, month: any) => sum + month.appointments, 0) / monthlyData.monthlyData.length;\n                    \n                    return (\n                      <>\n                        <div>\n                          <p><strong>Average Monthly Revenue:</strong> R{Math.round(avgRevenue).toLocaleString()}</p>\n                          <p><strong>Average Monthly Appointments:</strong> {Math.round(avgAppointments)}</p>\n                        </div>\n                        <div>\n                          <p><strong>Total Patients (6 months):</strong> {monthlyData.monthlyData.reduce((sum: number, month: any) => sum + month.patients, 0)}</p>\n                          <p><strong>Best Success Rate:</strong> {Math.max(...monthlyData.monthlyData.map((m: any) => m.completionRate))}%</p>\n                        </div>\n                      </>\n                    );\n                  })()}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <BarChart3 className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n              <p>Loading monthly comparison data...</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* New vs. Returning Patients Analytics */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            New vs. Returning Patients\n          </CardTitle>\n          <CardDescription>\n            Registration trends and patient retention analysis\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {patientRetentionData ? (\n            <div className=\"space-y-6\">\n              {/* Overview Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 border rounded-lg bg-green-50 dark:bg-green-950\">\n                  <h4 className=\"text-lg font-semibold text-green-600\">New Patients</h4>\n                  <p className=\"text-3xl font-bold text-green-700\" data-testid=\"text-new-patients\">\n                    {patientRetentionData.newVsReturning.newPatients}\n                  </p>\n                  <p className=\"text-sm text-green-600\">\n                    {patientRetentionData.newVsReturning.newPatientRate}% of total\n                  </p>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg bg-blue-50 dark:bg-blue-950\">\n                  <h4 className=\"text-lg font-semibold text-blue-600\">Returning Patients</h4>\n                  <p className=\"text-3xl font-bold text-blue-700\" data-testid=\"text-returning-patients\">\n                    {patientRetentionData.newVsReturning.returningPatients}\n                  </p>\n                  <p className=\"text-sm text-blue-600\">\n                    {patientRetentionData.newVsReturning.returningPatientRate}% of total\n                  </p>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg bg-purple-50 dark:bg-purple-950\">\n                  <h4 className=\"text-lg font-semibold text-purple-600\">Total Active</h4>\n                  <p className=\"text-3xl font-bold text-purple-700\" data-testid=\"text-total-active-patients\">\n                    {patientRetentionData.newVsReturning.totalPatients}\n                  </p>\n                  <p className=\"text-sm text-purple-600\">Active patients</p>\n                </div>\n              </div>\n\n              {/* Retention Rates */}\n              <div className=\"bg-muted/30 rounded-lg p-4\">\n                <h4 className=\"font-semibold mb-4\">Patient Retention Rates</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-orange-600\" data-testid=\"text-30-day-retention\">\n                      {patientRetentionData.retentionRates.thirtyDay}%\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">30-Day Retention</p>\n                    <div className=\"w-full bg-muted rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-orange-500 h-2 rounded-full\" \n                        style={{ width: `${patientRetentionData.retentionRates.thirtyDay}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-60-day-retention\">\n                      {patientRetentionData.retentionRates.sixtyDay}%\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">60-Day Retention</p>\n                    <div className=\"w-full bg-muted rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-yellow-500 h-2 rounded-full\" \n                        style={{ width: `${patientRetentionData.retentionRates.sixtyDay}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-red-600\" data-testid=\"text-90-day-retention\">\n                      {patientRetentionData.retentionRates.ninetyDay}%\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">90-Day Retention</p>\n                    <div className=\"w-full bg-muted rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-red-500 h-2 rounded-full\" \n                        style={{ width: `${patientRetentionData.retentionRates.ninetyDay}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Registration Trends Table */}\n              <div>\n                <h4 className=\"font-semibold mb-3\">6-Month Registration Trends</h4>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left p-2 font-medium\">Month</th>\n                        <th className=\"text-right p-2 font-medium\">New Registrations</th>\n                        <th className=\"text-right p-2 font-medium\">Returning Patients</th>\n                        <th className=\"text-right p-2 font-medium\">Total Activity</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {patientRetentionData.registrationTrends.map((trend: any, index: number) => {\n                        const totalActivity = trend.newRegistrations + trend.returningPatients;\n                        const isHighActivity = totalActivity > 10; // Highlight months with high activity\n                        \n                        return (\n                          <tr \n                            key={index} \n                            className=\"border-b hover:bg-muted/20\"\n                            data-testid={`registration-trend-row-${trend.month.toLowerCase()}-${trend.year}`}\n                          >\n                            <td className=\"p-2 font-medium\">\n                              {trend.month} {trend.year}\n                            </td>\n                            <td className=\"p-2 text-right text-green-600 font-mono\">\n                              {trend.newRegistrations}\n                            </td>\n                            <td className=\"p-2 text-right text-blue-600 font-mono\">\n                              {trend.returningPatients}\n                            </td>\n                            <td className={`p-2 text-right font-bold ${isHighActivity ? 'text-purple-600' : ''}`}>\n                              {totalActivity}\n                              {isHighActivity && <span className=\"ml-1 text-xs\">🔥</span>}\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n\n              {/* Key Insights */}\n              <div className=\"bg-blue-50 dark:bg-blue-950 rounded-lg p-4\">\n                <h4 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2\">Patient Retention Insights</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-700 dark:text-blue-300\">\n                  {(() => {\n                    const bestRetentionRate = Math.max(\n                      patientRetentionData.retentionRates.thirtyDay,\n                      patientRetentionData.retentionRates.sixtyDay,\n                      patientRetentionData.retentionRates.ninetyDay\n                    );\n                    const totalNewRegistrations = patientRetentionData.registrationTrends.reduce(\n                      (sum: number, trend: any) => sum + trend.newRegistrations, 0\n                    );\n                    const totalReturningPatients = patientRetentionData.registrationTrends.reduce(\n                      (sum: number, trend: any) => sum + trend.returningPatients, 0\n                    );\n                    \n                    return (\n                      <>\n                        <div>\n                          <p><strong>Best Retention Rate:</strong> {bestRetentionRate}%</p>\n                          <p><strong>New Registrations (6 months):</strong> {totalNewRegistrations}</p>\n                        </div>\n                        <div>\n                          <p><strong>Returning Patients (6 months):</strong> {totalReturningPatients}</p>\n                          <p><strong>Patient Loyalty Score:</strong> {patientRetentionData.newVsReturning.returningPatientRate}%</p>\n                        </div>\n                      </>\n                    );\n                  })()}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Users className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n              <p>Loading patient retention analytics...</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Peak Hours Analysis */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"w-5 h-5\" />\n            Peak Hours Analysis\n          </CardTitle>\n          <CardDescription>\n            Busiest times of day and week (last 3 months)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {peakHoursData ? (\n            <div className=\"space-y-6\">\n              {/* Peak Summary Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 border rounded-lg bg-orange-50 dark:bg-orange-950\">\n                  <h4 className=\"text-lg font-semibold text-orange-600\">Peak Hour</h4>\n                  <p className=\"text-3xl font-bold text-orange-700\" data-testid=\"text-peak-hour\">\n                    {peakHoursData.peakHour.timeLabel}\n                  </p>\n                  <p className=\"text-sm text-orange-600\">\n                    {peakHoursData.peakHour.count} appointments\n                  </p>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg bg-indigo-50 dark:bg-indigo-950\">\n                  <h4 className=\"text-lg font-semibold text-indigo-600\">Peak Day</h4>\n                  <p className=\"text-3xl font-bold text-indigo-700\" data-testid=\"text-peak-day\">\n                    {peakHoursData.peakDay.day}\n                  </p>\n                  <p className=\"text-sm text-indigo-600\">\n                    {peakHoursData.peakDay.count} appointments\n                  </p>\n                </div>\n              </div>\n\n              {/* Hourly Distribution */}\n              <div>\n                <h4 className=\"font-semibold mb-3\">Hourly Distribution</h4>\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2\">\n                  {peakHoursData.hourlyDistribution.map((hourData: any) => {\n                    const isBusinessHour = hourData.hour >= 8 && hourData.hour <= 17;\n                    const isPeakHour = hourData.hour === peakHoursData.peakHour.hour;\n                    const formatTime = (hour: number) => {\n                      if (hour === 0) return '12 AM';\n                      if (hour < 12) return `${hour} AM`;\n                      if (hour === 12) return '12 PM';\n                      return `${hour - 12} PM`;\n                    };\n                    \n                    return (\n                      <div\n                        key={hourData.hour}\n                        className={`p-2 text-center rounded border-2 ${\n                          isPeakHour\n                            ? 'bg-orange-100 dark:bg-orange-900 border-orange-400'\n                            : isBusinessHour\n                            ? 'bg-blue-50 dark:bg-blue-950 border-blue-200'\n                            : 'bg-gray-50 dark:bg-gray-900 border-gray-200'\n                        }`}\n                        data-testid={`hour-block-${hourData.hour}`}\n                      >\n                        <div className=\"text-xs font-medium\">\n                          {formatTime(hourData.hour)}\n                        </div>\n                        <div className=\"font-bold text-sm\">\n                          {hourData.count}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {hourData.percentage}%\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                <div className=\"flex gap-4 mt-3 text-xs\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-orange-100 border-2 border-orange-400 rounded\"></div>\n                    <span>Peak Hour</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-blue-50 border-2 border-blue-200 rounded\"></div>\n                    <span>Business Hours (8 AM - 5 PM)</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-gray-50 border-2 border-gray-200 rounded\"></div>\n                    <span>After Hours</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Daily Distribution */}\n              <div>\n                <h4 className=\"font-semibold mb-3\">Daily Distribution</h4>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3\">\n                  {peakHoursData.dailyDistribution.map((dayData: any) => {\n                    const isPeakDay = dayData.day === peakHoursData.peakDay.day;\n                    const isWeekend = dayData.dayNumber === 0 || dayData.dayNumber === 6;\n                    \n                    return (\n                      <div\n                        key={dayData.day}\n                        className={`p-4 text-center rounded-lg border-2 ${\n                          isPeakDay\n                            ? 'bg-indigo-100 dark:bg-indigo-900 border-indigo-400'\n                            : isWeekend\n                            ? 'bg-purple-50 dark:bg-purple-950 border-purple-200'\n                            : 'bg-green-50 dark:bg-green-950 border-green-200'\n                        }`}\n                        data-testid={`day-block-${dayData.day.toLowerCase()}`}\n                      >\n                        <div className=\"font-semibold text-sm mb-1\">{dayData.day}</div>\n                        <div className=\"text-2xl font-bold mb-1\">{dayData.count}</div>\n                        <div className=\"text-xs text-muted-foreground\">{dayData.percentage}% of total</div>\n                        <div className=\"w-full bg-muted rounded-full h-2 mt-2\">\n                          <div \n                            className={`h-2 rounded-full ${\n                              isPeakDay ? 'bg-indigo-500' : isWeekend ? 'bg-purple-400' : 'bg-green-400'\n                            }`}\n                            style={{ width: `${Math.max(dayData.percentage, 5)}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Peak Hours Insights */}\n              <div className=\"bg-yellow-50 dark:bg-yellow-950 rounded-lg p-4\">\n                <h4 className=\"font-medium text-yellow-800 dark:text-yellow-200 mb-2\">Peak Hours Insights</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-yellow-700 dark:text-yellow-300\">\n                  {(() => {\n                    const businessHoursAppointments = peakHoursData.hourlyDistribution\n                      .filter((h: any) => h.hour >= 8 && h.hour <= 17)\n                      .reduce((sum: number, h: any) => sum + h.count, 0);\n                    \n                    const totalAppointments = peakHoursData.hourlyDistribution\n                      .reduce((sum: number, h: any) => sum + h.count, 0);\n                    \n                    const businessHoursPercentage = totalAppointments > 0 \n                      ? Math.round((businessHoursAppointments / totalAppointments) * 100) : 0;\n\n                    const weekdayAppointments = peakHoursData.dailyDistribution\n                      .filter((d: any) => d.dayNumber > 0 && d.dayNumber < 6)\n                      .reduce((sum: number, d: any) => sum + d.count, 0);\n                    \n                    const weekdayPercentage = totalAppointments > 0 \n                      ? Math.round((weekdayAppointments / totalAppointments) * 100) : 0;\n                    \n                    return (\n                      <>\n                        <div>\n                          <p><strong>Business Hours Activity:</strong> {businessHoursPercentage}% (8 AM - 5 PM)</p>\n                          <p><strong>Most Active Time:</strong> {peakHoursData.peakHour.timeLabel}</p>\n                        </div>\n                        <div>\n                          <p><strong>Weekday Activity:</strong> {weekdayPercentage}% (Mon-Fri)</p>\n                          <p><strong>Most Active Day:</strong> {peakHoursData.peakDay.day}</p>\n                        </div>\n                      </>\n                    );\n                  })()}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Clock className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n              <p>Loading peak hours analysis...</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":44102},"client/src/pages/CheckIn.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { insertCheckInSchema, type InsertCheckIn } from '@shared/schema';\nimport { apiRequest } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatTime } from '@/lib/utils';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Search, ClipboardCheck, Clock, User, AlertCircle } from 'lucide-react';\nimport { z } from 'zod';\n\nexport default function CheckIn() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedPatient, setSelectedPatient] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Extended form schema with conditional payment amount validation\n  const checkInFormSchema = insertCheckInSchema.extend({\n    doctorId: z.string().min(1, 'Doctor is required'),\n    priority: z.number().default(0),\n    paymentAmount: z.coerce.number().default(0),\n    notes: z.string().default('')\n  }).superRefine((data, ctx) => {\n    // Require payment amount for cash and both payment methods\n    if ((data.paymentMethod === 'cash' || data.paymentMethod === 'both') && (!data.paymentAmount || data.paymentAmount <= 0)) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: 'Payment amount is required for cash payments',\n        path: ['paymentAmount'],\n      });\n    }\n    \n    // Validate positive amount when provided\n    if (data.paymentAmount !== undefined && data.paymentAmount < 0) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: 'Payment amount cannot be negative',\n        path: ['paymentAmount'],\n      });\n    }\n    \n    // Validate medical aid eligibility\n    if ((data.paymentMethod === 'medical_aid' || data.paymentMethod === 'both')) {\n      const patient = selectedPatient;\n      if (!patient?.medicalAidScheme || !patient?.medicalAidNumber) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Selected patient is not eligible for medical aid payment',\n          path: ['paymentMethod'],\n        });\n      }\n    }\n  });\n\n  const form = useForm<InsertCheckIn & { doctorId: string; priority: number; paymentAmount: number; notes: string }>({\n    resolver: zodResolver(checkInFormSchema),\n    defaultValues: {\n      patientId: '',\n      appointmentId: null,\n      paymentMethod: 'cash',\n      isWalkIn: false,\n      doctorId: '',\n      priority: 0,\n      paymentAmount: 0,\n      notes: '',\n    },\n  });\n\n  const selectedPaymentMethod = form.watch('paymentMethod');\n  const showPaymentAmount = selectedPaymentMethod === 'cash' || selectedPaymentMethod === 'both';\n\n  const { data: searchResults } = useQuery({\n    queryKey: ['/api/patients/search', searchQuery],\n    queryFn: async () => {\n      if (!searchQuery.trim()) return [];\n      const res = await apiRequest('GET', `/api/patients/search?q=${encodeURIComponent(searchQuery)}`);\n      return res.json();\n    },\n    enabled: searchQuery.length > 2,\n  });\n\n  const { data: todayAppointments } = useQuery({\n    queryKey: ['/api/appointments', new Date().toISOString().split('T')[0]],\n    queryFn: async () => {\n      const today = new Date().toISOString().split('T')[0];\n      const res = await apiRequest('GET', `/api/appointments?date=${today}`);\n      return res.json();\n    },\n  });\n\n  const { data: todayCheckIns } = useQuery({\n    queryKey: ['/api/checkins', new Date().toISOString().split('T')[0]],\n    queryFn: async () => {\n      const today = new Date().toISOString().split('T')[0];\n      const res = await apiRequest('GET', `/api/checkins?date=${today}`);\n      return res.json();\n    },\n  });\n\n  const { data: doctors } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/users');\n      const users = await res.json();\n      return users.filter((user: any) => user.role === 'doctor');\n    },\n  });\n\n\n  const updateAppointmentMutation = useMutation({\n    mutationFn: async ({ appointmentId, status }: { appointmentId: string; status: string }) => {\n      const res = await apiRequest('PUT', `/api/appointments/${appointmentId}`, { status });\n      return res.json();\n    },\n  });\n\n  const checkInMutation = useMutation({\n    mutationFn: async (data: InsertCheckIn & { doctorId: string; priority: number; paymentAmount?: number; notes?: string }) => {\n      const res = await apiRequest('POST', '/api/checkins', data);\n      return res.json();\n    },\n    onSuccess: async (checkIn) => {\n      // If this was an appointment check-in, update the appointment status\n      if (checkIn.appointmentId) {\n        try {\n          await updateAppointmentMutation.mutateAsync({\n            appointmentId: checkIn.appointmentId,\n            status: 'confirmed'\n          });\n        } catch (error) {\n          console.error('Failed to update appointment status:', error);\n        }\n      }\n\n      toast({\n        title: 'Check-in Successful',\n        description: `Patient has been checked in and added to the queue.`,\n      });\n      form.reset();\n      setSelectedPatient(null);\n      setSearchQuery('');\n      queryClient.invalidateQueries({ queryKey: ['/api/checkins'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/queue'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n    },\n    onError: (error: any) => {\n      console.error('Check-in error:', error);\n      \n      // Handle specific validation errors\n      let errorMessage = error.message || 'Failed to check in patient';\n      \n      if (error.message?.includes('payment amount')) {\n        errorMessage = 'Please enter a valid payment amount for cash payments';\n      } else if (error.message?.includes('medical aid')) {\n        errorMessage = 'This patient is not eligible for medical aid payment';\n      } else if (error.message?.includes('required')) {\n        errorMessage = 'Please fill in all required fields';\n      }\n      \n      toast({\n        title: 'Check-in Failed',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const selectPatient = (patient: any, appointmentId?: string, doctorId?: string) => {\n    const previousPatient = selectedPatient;\n    setSelectedPatient(patient);\n    form.setValue('patientId', patient.id);\n    setSearchQuery('');\n\n    // Check if patient has medical aid\n    const patientHasMedicalAid = patient?.medicalAidScheme && patient?.medicalAidNumber;\n    const currentPaymentMethod = form.getValues('paymentMethod');\n    \n    // Reset payment method if switching to patient without medical aid and current method requires medical aid\n    if (!patientHasMedicalAid && (currentPaymentMethod === 'medical_aid' || currentPaymentMethod === 'both')) {\n      form.setValue('paymentMethod', 'cash');\n      form.setValue('paymentAmount', 0);\n      \n      // Show toast notification when auto-resetting payment method\n      if (previousPatient) {\n        toast({\n          title: 'Payment Method Reset',\n          description: 'Payment method changed to Cash as this patient is not eligible for medical aid.',\n          variant: 'default',\n        });\n      }\n    }\n\n    if (appointmentId && doctorId) {\n      // Selecting from appointment list\n      form.setValue('appointmentId', appointmentId);\n      form.setValue('doctorId', doctorId);\n      form.setValue('isWalkIn', false);\n    } else {\n      // Check if patient has an appointment today\n      const todayAppointment = todayAppointments?.find((apt: any) => \n        apt.patientId === patient.id && apt.status !== 'cancelled'\n      );\n\n      if (todayAppointment) {\n        form.setValue('appointmentId', todayAppointment.id);\n        form.setValue('doctorId', todayAppointment.doctorId);\n        form.setValue('isWalkIn', false);\n      } else {\n        form.setValue('appointmentId', null);\n        form.setValue('isWalkIn', true);\n      }\n    }\n  };\n\n  // Check if patient has medical aid\n  const patientHasMedicalAid = selectedPatient?.medicalAidScheme && selectedPatient?.medicalAidNumber;\n\n  const selectAppointment = (appointment: any) => {\n    selectPatient(appointment.patient, appointment.id, appointment.doctorId);\n  };\n\n  const onSubmit = (data: InsertCheckIn & { doctorId: string; priority: number; paymentAmount: number; notes: string }) => {\n    // Send paymentAmount as number - backend schema handles type conversion\n    const submitData = {\n      ...data,\n      paymentAmount: data.paymentAmount > 0 ? data.paymentAmount : undefined\n    };\n    checkInMutation.mutate(submitData);\n  };\n\n  const getPaymentMethodIcon = (method: string) => {\n    switch (method) {\n      case 'cash': return '💵';\n      case 'medical_aid': return '🏥';\n      case 'both': return '💳';\n      default: return '💵';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Patient Check-in</h1>\n          <p className=\"text-muted-foreground\">Quick check-in process with appointment linking</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-6\">\n        {/* Check-in Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <ClipboardCheck className=\"w-5 h-5\" />\n              Patient Check-in\n            </CardTitle>\n            <CardDescription>\n              Fast patient check-in process with automatic queue management\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* Patient Search */}\n            <div className=\"space-y-4 mb-6\">\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search patient by name or phone...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-patient-search\"\n                  />\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchQuery('');\n                    setSelectedPatient(null);\n                    form.reset();\n                  }}\n                  data-testid=\"button-clear-search\"\n                >\n                  Clear\n                </Button>\n              </div>\n\n              {/* Search Results */}\n              {searchResults && searchResults.length > 0 && (\n                <div className=\"border rounded-lg max-h-60 overflow-y-auto\">\n                  {searchResults.map((patient: any) => (\n                    <div\n                      key={patient.id}\n                      className=\"flex items-center justify-between p-3 hover:bg-muted/50 cursor-pointer border-b last:border-b-0\"\n                      onClick={() => selectPatient(patient)}\n                      data-testid={`patient-search-result-${patient.id}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          {patient.photoUrl && <AvatarImage src={patient.photoUrl} />}\n                          <AvatarFallback>\n                            {patient.firstName.charAt(0)}{patient.lastName.charAt(0)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium\">{patient.firstName} {patient.lastName}</p>\n                          <p className=\"text-sm text-muted-foreground\">{patient.phone}</p>\n                        </div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Select\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Today's Appointments List - Always visible */}\n              <div className=\"space-y-3\">\n                <h3 className=\"font-medium text-sm text-muted-foreground\">Today's Available Appointments</h3>\n                {todayAppointments && todayAppointments.length > 0 ? (\n                  <div className=\"border rounded-lg max-h-96 overflow-y-auto\">\n                    {todayAppointments\n                      .filter((appointment: any) => {\n                        // Filter out cancelled and completed appointments\n                        if (appointment.status === 'cancelled' || appointment.status === 'completed') {\n                          return false;\n                        }\n                        // Filter out appointments that have already been checked in today\n                        const appointmentCheckedIn = todayCheckIns?.some((checkIn: any) => \n                          checkIn.appointmentId === appointment.id\n                        );\n                        return !appointmentCheckedIn;\n                      })\n                      .map((appointment: any) => (\n                      <div\n                        key={appointment.id}\n                        className=\"flex items-center justify-between p-4 hover:bg-muted/50 cursor-pointer border-b last:border-b-0\"\n                        onClick={() => selectAppointment(appointment)}\n                        data-testid={`appointment-item-${appointment.id}`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Avatar>\n                            {appointment.patient?.photoUrl && <AvatarImage src={appointment.patient.photoUrl} />}\n                            <AvatarFallback>\n                              {appointment.patient?.firstName?.charAt(0)}{appointment.patient?.lastName?.charAt(0)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium\">\n                              {appointment.patient?.firstName} {appointment.patient?.lastName}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">{appointment.patient?.phone}</p>\n                            <div className=\"flex items-center gap-2 text-xs text-muted-foreground mt-1\">\n                              <Clock className=\"w-3 h-3\" />\n                              {formatTime(appointment.appointmentDate)}\n                              <span className=\"mx-1\">•</span>\n                              <User className=\"w-3 h-3\" />\n                              {appointment.doctor?.name}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-col items-end gap-1\">\n                          <Badge \n                            variant={appointment.status === 'scheduled' ? 'secondary' : \n                                   appointment.status === 'confirmed' ? 'default' : 'outline'}\n                            className=\"text-xs\"\n                          >\n                            {appointment.status}\n                          </Badge>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {appointment.appointmentType}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground border rounded-lg\" data-testid=\"text-no-appointments\">\n                    <Clock className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                    <p>No available appointments for today</p>\n                    <p className=\"text-xs mt-1\">(All patients may be checked in already)</p>\n                  </div>\n                )}\n              </div>\n\n              {/* Selected Patient */}\n              {selectedPatient && (\n                <div className=\"border rounded-lg p-4 bg-accent/10\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar className=\"w-12 h-12\">\n                      {selectedPatient.photoUrl && <AvatarImage src={selectedPatient.photoUrl} />}\n                      <AvatarFallback>\n                        {selectedPatient.firstName.charAt(0)}{selectedPatient.lastName.charAt(0)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <p className=\"font-semibold text-lg\" data-testid=\"text-selected-patient\">\n                        {selectedPatient.firstName} {selectedPatient.lastName}\n                      </p>\n                      <div className=\"flex items-center gap-4\">\n                        <p className=\"text-muted-foreground\">{selectedPatient.phone}</p>\n                        {form.getValues('isWalkIn') && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            🚶 Walk-in Patient\n                          </Badge>\n                        )}\n                        {!form.getValues('isWalkIn') && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            📅 Appointment Patient\n                          </Badge>\n                        )}\n                        {patientHasMedicalAid && (\n                          <Badge variant=\"default\" className=\"text-xs\">\n                            🏥 Medical Aid\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Check-in Form */}\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"doctorId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Assigned Doctor *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-doctor\">\n                            <SelectValue placeholder=\"Select doctor\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {doctors?.map((doctor: any) => (\n                            <SelectItem key={doctor.id} value={doctor.id}>\n                              {doctor.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-payment-method\">\n                            <SelectValue placeholder=\"Select payment method\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">💵 Cash</SelectItem>\n                          <SelectItem value=\"medical_aid\" disabled={!patientHasMedicalAid}>\n                            🏥 Medical Aid {!patientHasMedicalAid && '(Not Available)'}\n                          </SelectItem>\n                          <SelectItem value=\"both\" disabled={!patientHasMedicalAid}>\n                            💳 Both (Cash + Medical Aid) {!patientHasMedicalAid && '(Medical Aid Not Available)'}\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {!patientHasMedicalAid && selectedPatient && (\n                        <p className=\"text-xs text-amber-600 flex items-center gap-1 mt-1\">\n                          <AlertCircle className=\"w-3 h-3\" />\n                          Patient does not have medical aid on file\n                        </p>\n                      )}\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Payment Amount Field - Show for cash and both */}\n                {showPaymentAmount && (\n                  <FormField\n                    control={form.control}\n                    name=\"paymentAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Payment Amount (R) *</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"0.00\"\n                            {...field}\n                            value={field.value || ''}\n                            onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                            data-testid=\"input-payment-amount\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n\n                <FormField\n                  control={form.control}\n                  name=\"priority\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Priority Level</FormLabel>\n                      <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-priority\">\n                            <SelectValue placeholder=\"Select priority\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"0\">Normal</SelectItem>\n                          <SelectItem value=\"1\">High</SelectItem>\n                          <SelectItem value=\"2\">Urgent</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Notes Field */}\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Additional Notes</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Any additional information or notes...\"\n                          {...field}\n                          data-testid=\"textarea-notes\"\n                          rows={3}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={checkInMutation.isPending || !selectedPatient}\n                  data-testid=\"button-check-in\"\n                >\n                  {checkInMutation.isPending ? 'Checking In...' : 'Check In Patient'}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":24705},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Link } from 'wouter';\nimport { apiRequest } from '@/lib/auth';\nimport { useWebSocket } from '@/lib/websocket';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  CalendarDays, Users, DollarSign, UserPlus,\n  TrendingUp, ArrowUp, Clock, Calendar,\n  ClipboardCheck, UserRound, BarChart3, Settings, Shield\n} from 'lucide-react';\n\nexport default function Dashboard() {\n  const { lastMessage } = useWebSocket();\n\n  // Refresh queue data when WebSocket message received\n  const { data: stats, refetch: refetchStats } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/dashboard/stats');\n      return res.json();\n    },\n  });\n\n  const { data: queue, refetch: refetchQueue } = useQuery({\n    queryKey: ['/api/queue'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/queue');\n      return res.json();\n    },\n    retry: 2,\n    staleTime: 30000, // 30 seconds\n  });\n\n  const { data: todayAppointments } = useQuery({\n    queryKey: ['/api/appointments', new Date().toISOString().split('T')[0]],\n    queryFn: async () => {\n      const today = new Date().toISOString().split('T')[0];\n      const res = await apiRequest('GET', `/api/appointments?date=${today}`);\n      return res.json();\n    },\n  });\n\n  const { data: activityLogs } = useQuery({\n    queryKey: ['/api/activity-logs'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/activity-logs?limit=10');\n      return res.json();\n    },\n  });\n\n  // Refresh data when queue updates\n  useEffect(() => {\n    if (lastMessage?.type === 'queue_update') {\n      refetchQueue();\n      refetchStats();\n    }\n  }, [lastMessage, refetchQueue, refetchStats]);\n\n  const quickActions = [\n    { icon: UserPlus, label: 'Register Patient', path: '/patients', color: 'bg-blue-100 text-blue-600' },\n    { icon: Calendar, label: 'Book Appointment', path: '/appointments', color: 'bg-green-100 text-green-600' },\n    { icon: ClipboardCheck, label: 'Check-in Patient', path: '/checkin', color: 'bg-yellow-100 text-yellow-600' },\n    { icon: Users, label: 'View Queue', path: '/queue', color: 'bg-purple-100 text-purple-600' },\n    { icon: UserRound, label: \"Doctor's Page\", path: '/doctor', color: 'bg-indigo-100 text-indigo-600' },\n    { icon: BarChart3, label: 'View Insights', path: '/insights', color: 'bg-teal-100 text-teal-600' },\n    { icon: Settings, label: 'Manage Users', path: '/users', color: 'bg-orange-100 text-orange-600' },\n    { icon: Shield, label: 'System Admin', path: '/admin', color: 'bg-red-100 text-red-600' },\n  ];\n\n  const getStatusBadgeClass = (status: string) => {\n    switch (status) {\n      case 'waiting': return 'badge-waiting';\n      case 'in_progress': return 'badge-in-progress';\n      case 'completed': return 'badge-completed';\n      default: return 'badge-waiting';\n    }\n  };\n\n  const getAppointmentStatusClass = (status: string) => {\n    switch (status) {\n      case 'completed': return 'border-l-accent bg-accent/5';\n      case 'in_progress': return 'border-l-primary bg-primary/5';\n      case 'scheduled': return 'border-l-yellow-500 bg-yellow-500/5';\n      default: return 'border-l-secondary bg-secondary/5';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Today's Appointments</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-today-appointments\">\n                  {stats?.todayAppointments || 0}\n                </p>\n                <p className=\"text-sm text-accent mt-1\">\n                  <ArrowUp className=\"inline w-3 h-3 mr-1\" />\n                  <span>12%</span> from yesterday\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <CalendarDays className=\"text-blue-600 w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Patients in Queue</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-queue-count\">\n                  {stats?.queueCount || 0}\n                </p>\n                <p className=\"text-sm text-yellow-600 mt-1\">\n                  <Clock className=\"inline w-3 h-3 mr-1\" />\n                  Avg wait: <span>15 mins</span>\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"text-yellow-600 w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Today's Revenue</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-today-revenue\">\n                  R{stats?.todayRevenue || 0}\n                </p>\n                <p className=\"text-sm text-accent mt-1\">\n                  <TrendingUp className=\"inline w-3 h-3 mr-1\" />\n                  <span>8%</span> from yesterday\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"text-green-600 w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">New Patients</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-new-patients\">\n                  {stats?.newPatients || 0}\n                </p>\n                <p className=\"text-sm text-accent mt-1\">\n                  <ArrowUp className=\"inline w-3 h-3 mr-1\" />\n                  <span>25%</span> this week\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <UserPlus className=\"text-purple-600 w-6 h-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4\">\n            {quickActions.map((action) => {\n              const Icon = action.icon;\n              return (\n                <Link key={action.path} href={action.path}>\n                  <button \n                    className=\"flex flex-col items-center p-4 rounded-lg border border-border hover:bg-muted/50 transition-colors group w-full\"\n                    data-testid={`button-${action.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform mb-2 ${action.color}`}>\n                      <Icon className=\"w-6 h-6\" />\n                    </div>\n                    <span className=\"text-sm font-medium text-center\">{action.label}</span>\n                  </button>\n                </Link>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Current Queue */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>Current Queue</CardTitle>\n            <Link href=\"/queue\">\n              <Button variant=\"outline\" size=\"sm\">View All</Button>\n            </Link>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {queue && queue.length > 0 ? (\n              queue.slice(0, 4).map((patient: any) => (\n                <div key={patient.id} className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                      <span className=\"text-primary-foreground font-semibold\">\n                        {patient.patient?.firstName?.charAt(0) || 'P'}\n                      </span>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\" data-testid={`text-patient-name-${patient.id}`}>\n                        {patient.patient?.firstName} {patient.patient?.lastName}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {new Date(patient.enteredAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={`px-2 py-1 text-xs font-medium rounded-full border ${getStatusBadgeClass(patient.status)}`}>\n                      {patient.status.replace('_', ' ')}\n                    </Badge>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {Math.floor((Date.now() - new Date(patient.enteredAt).getTime()) / 60000)} mins\n                    </span>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-empty-queue\">\n                No patients in queue\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Today's Schedule */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>Today's Schedule</CardTitle>\n            <Link href=\"/appointments\">\n              <Button variant=\"outline\" size=\"sm\">View All</Button>\n            </Link>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {todayAppointments && todayAppointments.length > 0 ? (\n              todayAppointments.slice(0, 4).map((appointment: any) => (\n                <div key={appointment.id} className={`flex items-center justify-between p-4 border-l-4 rounded-lg ${getAppointmentStatusClass(appointment.status)}`}>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"text-center\">\n                      <p className=\"text-lg font-bold text-foreground\">\n                        {new Date(appointment.appointmentDate).getHours().toString().padStart(2, '0')}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {new Date(appointment.appointmentDate).getMinutes().toString().padStart(2, '0')}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\" data-testid={`text-appointment-patient-${appointment.id}`}>\n                        {appointment.patient?.firstName} {appointment.patient?.lastName}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">{appointment.appointmentType}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-foreground\">\n                      {appointment.doctor?.name}\n                    </p>\n                    <Badge className={`px-2 py-1 text-xs font-medium rounded-full border ${getStatusBadgeClass(appointment.status)}`}>\n                      {appointment.status.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-empty-schedule\">\n                No appointments scheduled for today\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Recent Activity</CardTitle>\n          <Link href=\"/admin\">\n            <Button variant=\"outline\" size=\"sm\">View All</Button>\n          </Link>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {activityLogs && activityLogs.length > 0 ? (\n            activityLogs.slice(0, 5).map((log: any) => (\n              <div key={log.id} className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-2 flex-shrink-0\"></div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-foreground\" data-testid={`text-activity-${log.id}`}>\n                    {log.details}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {new Date(log.timestamp).toLocaleString()}\n                  </p>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-empty-activity\">\n              No recent activity\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14164},"client/src/pages/DoctorPage.tsx":{"content":"import { useState, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertConsultationSchema, type InsertConsultation } from '@shared/schema';\nimport { apiRequest } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatDate, formatTime } from '@/lib/utils';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  UserRound, Search, Users, FileText, \n  Stethoscope, History, Pill, FileImage,\n  Upload, X, Download, Eye, Trash2, File, Plus\n} from 'lucide-react';\n\nexport default function DoctorPage() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedPatient, setSelectedPatient] = useState<any>(null);\n  const [selectedQueueItem, setSelectedQueueItem] = useState<any>(null);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [uploadedAttachments, setUploadedAttachments] = useState<any[]>([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [isEditingAllergies, setIsEditingAllergies] = useState(false);\n  const [allergiesValue, setAllergiesValue] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: currentUser } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/auth/me');\n      return res.json();\n    },\n  });\n\n  const { data: myQueue } = useQuery({\n    queryKey: ['/api/queue', currentUser?.id],\n    queryFn: async () => {\n      if (!currentUser?.id) return [];\n      const res = await apiRequest('GET', `/api/queue?doctorId=${currentUser.id}`);\n      return res.json();\n    },\n    enabled: !!currentUser?.id,\n  });\n\n  const { data: searchResults } = useQuery({\n    queryKey: ['/api/patients/search', searchQuery],\n    queryFn: async () => {\n      if (!searchQuery.trim()) return [];\n      const res = await apiRequest('GET', `/api/patients/search?q=${encodeURIComponent(searchQuery)}`);\n      return res.json();\n    },\n    enabled: searchQuery.length > 2,\n  });\n\n  const { data: patientConsultations } = useQuery({\n    queryKey: ['/api/consultations/patient', selectedPatient?.id],\n    queryFn: async () => {\n      const res = await apiRequest('GET', `/api/consultations/patient/${selectedPatient.id}`);\n      return res.json();\n    },\n    enabled: !!selectedPatient?.id,\n  });\n\n  // Query to get medical attachments for a specific consultation\n  const getMedicalAttachments = async (consultationId: string) => {\n    const res = await apiRequest('GET', `/api/medical-attachments/${consultationId}`);\n    return res.json();\n  };\n\n  const downloadAttachment = async (attachmentId: string, fileName: string) => {\n    try {\n      const response = await apiRequest('GET', `/api/medical-attachments/file/${attachmentId}`);\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      toast({\n        title: 'Download Failed',\n        description: 'Could not download the file',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const form = useForm<InsertConsultation>({\n    resolver: zodResolver(insertConsultationSchema),\n    defaultValues: {\n      patientId: '',\n      doctorId: '',\n      queueId: undefined,\n      notes: '',\n      diagnosis: '',\n      prescription: '',\n    },\n  });\n\n  const createConsultationMutation = useMutation({\n    mutationFn: async (data: InsertConsultation) => {\n      const res = await apiRequest('POST', '/api/consultations', data);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Consultation Completed',\n        description: 'Patient consultation has been recorded successfully.',\n      });\n      form.reset();\n      setSelectedPatient(null);\n      setSelectedQueueItem(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/queue'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/consultations'] });\n      // Invalidate patient consultations specifically\n      if (selectedPatient?.id) {\n        queryClient.invalidateQueries({ queryKey: ['/api/consultations/patient', selectedPatient.id] });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: 'Consultation Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const selectPatientFromQueue = (queueItem: any) => {\n    setSelectedQueueItem(queueItem);\n    setSelectedPatient(queueItem.patient);\n    form.setValue('patientId', queueItem.patientId);\n    form.setValue('doctorId', currentUser?.id || '');\n    form.setValue('queueId', queueItem.id);\n    // Reset file upload state\n    setSelectedFiles([]);\n    setUploadedAttachments([]);\n    // Reset allergies editing state\n    setIsEditingAllergies(false);\n    setAllergiesValue(queueItem.patient?.allergies || '');\n  };\n\n  // File upload handlers\n  const handleFileSelect = useCallback((files: FileList | File[]) => {\n    const fileArray = Array.from(files);\n    const validFiles = fileArray.filter(file => {\n      // Check file size (25MB limit)\n      if (file.size > 25 * 1024 * 1024) {\n        toast({\n          title: 'File too large',\n          description: `${file.name} is larger than 25MB limit`,\n          variant: 'destructive',\n        });\n        return false;\n      }\n      return true;\n    });\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  }, [toast]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    const files = e.dataTransfer.files;\n    handleFileSelect(files);\n  }, [handleFileSelect]);\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const uploadFiles = async (consultationId: string) => {\n    if (selectedFiles.length === 0) return [];\n\n    const formData = new FormData();\n    formData.append('consultationId', consultationId);\n    \n    selectedFiles.forEach(file => {\n      formData.append('files', file);\n    });\n\n    const response = await apiRequest('POST', '/api/medical-attachments', formData);\n    return response.json();\n  };\n\n  // Get file icon based on type\n  const getFileIcon = (fileName: string) => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'pdf':\n        return <File className=\"w-4 h-4 text-red-500\" />;\n      case 'doc':\n      case 'docx':\n        return <File className=\"w-4 h-4 text-blue-500\" />;\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return <FileImage className=\"w-4 h-4 text-green-500\" />;\n      default:\n        return <File className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  // Component to display attachments for a consultation\n  const AttachmentsDisplay = ({ consultationId }: { consultationId: string }) => {\n    const { data: attachments, isLoading } = useQuery({\n      queryKey: ['/api/medical-attachments', consultationId],\n      queryFn: () => getMedicalAttachments(consultationId),\n      enabled: !!consultationId,\n    });\n\n    if (isLoading) {\n      return <div className=\"text-sm text-muted-foreground\">Loading attachments...</div>;\n    }\n\n    if (!attachments || attachments.length === 0) {\n      return <div className=\"text-sm text-muted-foreground\">No attachments</div>;\n    }\n\n    return (\n      <div className=\"space-y-2\">\n        <h4 className=\"font-medium flex items-center gap-2\">\n          <FileImage className=\"w-4 h-4\" />\n          Medical Attachments ({attachments.length})\n        </h4>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n          {attachments.map((attachment: any) => (\n            <div key={attachment.id} className=\"flex items-center justify-between p-2 bg-background border rounded\" data-testid={`attachment-${attachment.id}`}>\n              <div className=\"flex items-center gap-2 flex-1\">\n                {getFileIcon(attachment.originalName)}\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-xs font-medium truncate\" title={attachment.originalName}>\n                    {attachment.originalName}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {(attachment.fileSize / 1024 / 1024).toFixed(2)} MB\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex gap-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => downloadAttachment(attachment.id, attachment.originalName)}\n                  data-testid={`button-download-${attachment.id}`}\n                >\n                  <Download className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // Update onSubmit to handle file uploads\n  const onSubmit = async (data: InsertConsultation) => {\n    try {\n      // First create the consultation\n      const consultation = await createConsultationMutation.mutateAsync(data);\n      \n      // Then upload files if any\n      if (selectedFiles.length > 0) {\n        await uploadFiles(consultation.id);\n        // Invalidate medical attachments for this consultation\n        queryClient.invalidateQueries({ queryKey: ['/api/medical-attachments', consultation.id] });\n        toast({\n          title: 'Files Uploaded',\n          description: `${selectedFiles.length} file(s) attached to consultation`,\n        });\n      }\n      \n      // Reset form and file state\n      setSelectedFiles([]);\n      setUploadedAttachments([]);\n    } catch (error) {\n      console.error('Consultation creation failed:', error);\n    }\n  };\n\n  const selectPatientFromSearch = (patient: any) => {\n    setSelectedPatient(patient);\n    setSelectedQueueItem(null);\n    form.setValue('patientId', patient.id);\n    form.setValue('doctorId', currentUser?.id || '');\n    form.setValue('queueId', undefined);\n    setSearchQuery('');\n    // Reset file upload state\n    setSelectedFiles([]);\n    setUploadedAttachments([]);\n    // Reset allergies editing state\n    setIsEditingAllergies(false);\n    setAllergiesValue(patient?.allergies || '');\n  };\n\n  // Allergies update mutation\n  const updateAllergiesMutation = useMutation({\n    mutationFn: async ({ patientId, allergies }: { patientId: string, allergies: string }) => {\n      const res = await apiRequest('PUT', `/api/patients/${patientId}`, { allergies });\n      return res.json();\n    },\n    onSuccess: (updatedPatient) => {\n      toast({\n        title: 'Allergies Updated',\n        description: 'Patient allergies have been updated successfully.',\n      });\n      setSelectedPatient({ ...selectedPatient, allergies: updatedPatient.allergies });\n      setIsEditingAllergies(false);\n      // Invalidate patient search queries to reflect the change\n      queryClient.invalidateQueries({ queryKey: ['/api/patients/search'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Update Failed',\n        description: error.message || 'Failed to update allergies',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const startEditingAllergies = () => {\n    setIsEditingAllergies(true);\n    setAllergiesValue(selectedPatient?.allergies || '');\n  };\n\n  const saveAllergies = () => {\n    if (!selectedPatient) return;\n    updateAllergiesMutation.mutate({\n      patientId: selectedPatient.id,\n      allergies: allergiesValue,\n    });\n  };\n\n  const cancelEditingAllergies = () => {\n    setIsEditingAllergies(false);\n    setAllergiesValue(selectedPatient?.allergies || '');\n  };\n\n  const getStatusBadgeClass = (status: string) => {\n    switch (status) {\n      case 'waiting': return 'badge-waiting';\n      case 'in_progress': return 'badge-in-progress';\n      case 'completed': return 'badge-completed';\n      default: return 'badge-waiting';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Doctor's Page</h1>\n          <p className=\"text-muted-foreground\">Patient consultation and medical records management</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Patient Queue */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"w-5 h-5\" />\n              My Queue\n            </CardTitle>\n            <CardDescription>\n              Patients waiting for consultation\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {myQueue && myQueue.length > 0 ? (\n                myQueue.map((queueItem: any, index: number) => (\n                  <div\n                    key={queueItem.id}\n                    className={`border rounded-lg p-3 cursor-pointer transition-colors ${\n                      selectedQueueItem?.id === queueItem.id \n                        ? 'border-primary bg-primary/5' \n                        : 'hover:bg-muted/50'\n                    }`}\n                    onClick={() => selectPatientFromQueue(queueItem)}\n                    data-testid={`queue-item-${queueItem.id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"text-sm font-bold text-primary\">\n                        #{index + 1}\n                      </div>\n                      <Avatar className=\"w-10 h-10\">\n                        {queueItem.patient?.photoUrl && <AvatarImage src={queueItem.patient.photoUrl} />}\n                        <AvatarFallback className=\"text-sm\">\n                          {queueItem.patient?.firstName?.charAt(0)}{queueItem.patient?.lastName?.charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">\n                          {queueItem.patient?.firstName} {queueItem.patient?.lastName}\n                        </p>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={`px-2 py-1 text-xs font-medium rounded-full border ${getStatusBadgeClass(queueItem.status)}`}>\n                            {queueItem.status.replace('_', ' ')}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {Math.floor((Date.now() - new Date(queueItem.enteredAt).getTime()) / 60000)}m wait\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-empty-queue\">\n                  <Users className=\"w-8 h-8 mx-auto mb-2\" />\n                  <p className=\"text-sm\">No patients in queue</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Patient Search & Details */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Search className=\"w-5 h-5\" />\n              Patient Search & Consultation\n            </CardTitle>\n            <CardDescription>\n              Search patients and manage consultations\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* Patient Search */}\n            <div className=\"space-y-4 mb-6\">\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search patients by name or phone...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-patient-search\"\n                  />\n                </div>\n              </div>\n\n              {/* Search Results */}\n              {searchResults && searchResults.length > 0 && (\n                <div className=\"border rounded-lg max-h-40 overflow-y-auto\">\n                  {searchResults.map((patient: any) => (\n                    <div\n                      key={patient.id}\n                      className=\"flex items-center justify-between p-3 hover:bg-muted/50 cursor-pointer border-b last:border-b-0\"\n                      onClick={() => selectPatientFromSearch(patient)}\n                      data-testid={`patient-search-result-${patient.id}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          {patient.photoUrl && <AvatarImage src={patient.photoUrl} />}\n                          <AvatarFallback>\n                            {patient.firstName.charAt(0)}{patient.lastName.charAt(0)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium\">{patient.firstName} {patient.lastName}</p>\n                          <p className=\"text-sm text-muted-foreground\">{patient.phone}</p>\n                        </div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Select\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Selected Patient Details */}\n            {selectedPatient && (\n              <Tabs defaultValue=\"consultation\" className=\"space-y-4\">\n                <div className=\"border rounded-lg p-4 bg-accent/10\">\n                  <div className=\"flex items-center gap-4 mb-4\">\n                    <Avatar className=\"w-16 h-16\">\n                      {selectedPatient.photoUrl && <AvatarImage src={selectedPatient.photoUrl} />}\n                      <AvatarFallback className=\"text-lg\">\n                        {selectedPatient.firstName.charAt(0)}{selectedPatient.lastName.charAt(0)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"text-xl font-semibold\" data-testid=\"text-selected-patient\">\n                        {selectedPatient.firstName} {selectedPatient.lastName}\n                      </h3>\n                      <p className=\"text-muted-foreground\">{selectedPatient.phone}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        DOB: {formatDate(selectedPatient.dateOfBirth)}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"border-t pt-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium mb-1\">Allergies:</p>\n                        {isEditingAllergies ? (\n                          <div className=\"space-y-2\">\n                            <Textarea\n                              value={allergiesValue}\n                              onChange={(e) => setAllergiesValue(e.target.value)}\n                              placeholder=\"List any known allergies or medications to avoid...\"\n                              className=\"min-h-[80px] text-sm\"\n                              data-testid=\"textarea-edit-allergies\"\n                            />\n                            <div className=\"flex gap-2\">\n                              <Button\n                                size=\"sm\"\n                                onClick={saveAllergies}\n                                disabled={updateAllergiesMutation.isPending}\n                                data-testid=\"button-save-allergies\"\n                              >\n                                {updateAllergiesMutation.isPending ? 'Saving...' : 'Save'}\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={cancelEditingAllergies}\n                                disabled={updateAllergiesMutation.isPending}\n                                data-testid=\"button-cancel-allergies\"\n                              >\n                                Cancel\n                              </Button>\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center gap-2\">\n                            <p className=\"text-sm text-muted-foreground flex-1\" data-testid=\"text-allergies-display\">\n                              {selectedPatient.allergies || 'None recorded'}\n                            </p>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={startEditingAllergies}\n                              className=\"h-auto px-2 py-1 text-xs\"\n                              data-testid=\"button-edit-allergies\"\n                            >\n                              Edit\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {selectedPatient.medicalAidScheme && (\n                    <div className=\"border-t pt-3\">\n                      <p className=\"text-sm\"><strong>Medical Aid:</strong> {selectedPatient.medicalAidScheme}</p>\n                      {selectedPatient.medicalAidNumber && (\n                        <p className=\"text-sm\"><strong>Number:</strong> {selectedPatient.medicalAidNumber}</p>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                <TabsList>\n                  <TabsTrigger value=\"consultation\">New Consultation</TabsTrigger>\n                  <TabsTrigger value=\"history\">Medical History</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"consultation\">\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"notes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Consultation Notes *</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                {...field} \n                                value={field.value || ''}\n                                placeholder=\"Patient symptoms, examination findings...\"\n                                className=\"min-h-[100px]\"\n                                data-testid=\"input-consultation-notes\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"diagnosis\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Diagnosis</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                {...field} \n                                value={field.value || ''}\n                                placeholder=\"Medical diagnosis and assessment...\"\n                                data-testid=\"input-diagnosis\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"prescription\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Prescription</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                {...field} \n                                value={field.value || ''}\n                                placeholder=\"Medications, dosage, instructions...\"\n                                data-testid=\"input-prescription\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n\n                      {/* Medical File Attachments */}\n                      <div className=\"space-y-4\">\n                        <FormLabel>Medical Attachments</FormLabel>\n                        \n                        {/* File Upload Drop Zone */}\n                        <div\n                          className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${\n                            isDragOver \n                              ? 'border-primary bg-primary/10' \n                              : 'border-muted-foreground/25 hover:border-muted-foreground/50'\n                          }`}\n                          onDragOver={handleDragOver}\n                          onDragLeave={handleDragLeave}\n                          onDrop={handleDrop}\n                          data-testid=\"file-upload-dropzone\"\n                        >\n                          <Upload className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n                          <p className=\"text-sm text-muted-foreground mb-2\">\n                            Drag and drop medical files here, or click to select\n                          </p>\n                          <p className=\"text-xs text-muted-foreground mb-4\">\n                            Supports: PDF, DOC, DOCX, Images, DICOM files (max 25MB each)\n                          </p>\n                          <input\n                            type=\"file\"\n                            multiple\n                            accept=\".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif,.tiff,.dcm,.xml,.json\"\n                            onChange={(e) => e.target.files && handleFileSelect(e.target.files)}\n                            className=\"hidden\"\n                            id=\"file-upload\"\n                            data-testid=\"file-input\"\n                          />\n                          <Button \n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => document.getElementById('file-upload')?.click()}\n                            data-testid=\"button-select-files\"\n                          >\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Select Files\n                          </Button>\n                        </div>\n\n                        {/* Selected Files List */}\n                        {selectedFiles.length > 0 && (\n                          <div className=\"space-y-2\">\n                            <p className=\"text-sm font-medium\">Selected Files ({selectedFiles.length})</p>\n                            <div className=\"space-y-2\">\n                              {selectedFiles.map((file, index) => (\n                                <div key={index} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\" data-testid={`selected-file-${index}`}>\n                                  <div className=\"flex items-center gap-3\">\n                                    {getFileIcon(file.name)}\n                                    <div className=\"flex-1\">\n                                      <p className=\"text-sm font-medium truncate max-w-[200px]\">{file.name}</p>\n                                      <p className=\"text-xs text-muted-foreground\">\n                                        {(file.size / 1024 / 1024).toFixed(2)} MB\n                                      </p>\n                                    </div>\n                                  </div>\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => removeFile(index)}\n                                    data-testid={`button-remove-file-${index}`}\n                                  >\n                                    <X className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n\n                      </div>\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={createConsultationMutation.isPending}\n                        data-testid=\"button-save-consultation\"\n                      >\n                        {createConsultationMutation.isPending ? 'Saving...' : 'Complete Consultation'}\n                      </Button>\n                    </form>\n                  </Form>\n                </TabsContent>\n\n                <TabsContent value=\"history\">\n                  <div className=\"space-y-4\">\n                    {patientConsultations && patientConsultations.length > 0 ? (\n                      patientConsultations.map((consultation: any) => (\n                        <Card key={consultation.id}>\n                          <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <CardTitle className=\"text-base\">\n                                Consultation - {formatDate(consultation.consultationDate)}\n                              </CardTitle>\n                              <span className=\"text-sm text-muted-foreground\">\n                                {formatTime(consultation.consultationDate)}\n                              </span>\n                            </div>\n                          </CardHeader>\n                          <CardContent className=\"space-y-3\">\n                            {consultation.notes && (\n                              <div>\n                                <h4 className=\"font-medium flex items-center gap-2 mb-2\">\n                                  <FileText className=\"w-4 h-4\" />\n                                  Notes\n                                </h4>\n                                <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded\">\n                                  {consultation.notes}\n                                </p>\n                              </div>\n                            )}\n\n                            {consultation.diagnosis && (\n                              <div>\n                                <h4 className=\"font-medium flex items-center gap-2 mb-2\">\n                                  <Stethoscope className=\"w-4 h-4\" />\n                                  Diagnosis\n                                </h4>\n                                <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded\">\n                                  {consultation.diagnosis}\n                                </p>\n                              </div>\n                            )}\n\n                            {consultation.prescription && (\n                              <div>\n                                <h4 className=\"font-medium flex items-center gap-2 mb-2\">\n                                  <Pill className=\"w-4 h-4\" />\n                                  Prescription\n                                </h4>\n                                <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded\">\n                                  {consultation.prescription}\n                                </p>\n                              </div>\n                            )}\n\n\n                            {/* Medical Attachments */}\n                            <AttachmentsDisplay consultationId={consultation.id} />\n\n                          </CardContent>\n                        </Card>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-history\">\n                        <History className=\"w-8 h-8 mx-auto mb-2\" />\n                        <p>No previous consultations</p>\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":34249},"client/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation } from '@tanstack/react-query';\nimport { loginSchema, type LoginRequest } from '@shared/schema';\nimport { setToken } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Eye, EyeOff } from 'lucide-react';\nimport invoTechLogo from '@assets/invotech-high-resolution-logo (1)_1757968142020.png';\n\nexport default function Login() {\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<LoginRequest>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginRequest) => {\n      const res = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error || 'Login failed');\n      }\n\n      return res.json();\n    },\n    onSuccess: (data) => {\n      setToken(data.token);\n      window.location.href = '/';\n    },\n    onError: (error) => {\n      toast({\n        title: 'Login Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginRequest) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-20 h-20 flex items-center justify-center mb-4\">\n            <img \n              src={invoTechLogo} \n              alt=\"InvoTech Logo\" \n              className=\"w-16 h-16 object-contain\"\n            />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">InvoTech Clinic</CardTitle>\n          <CardDescription>\n            Sign in to access the clinic management system\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        autoComplete=\"username\"\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showPassword ? 'text' : 'password'}\n                          placeholder=\"Enter your password\"\n                          autoComplete=\"current-password\"\n                          data-testid=\"input-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? 'Signing in...' : 'Sign In'}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"text-center mt-4\">\n            <button className=\"text-sm text-primary hover:text-primary/80\" data-testid=\"link-forgot-password\">\n              Forgot your password?\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5204},"client/src/pages/PatientRegistration.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { insertPatientSchema, type InsertPatient } from '@shared/schema';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search, Upload, UserPlus, Eye } from 'lucide-react';\n\n// Extended validation schema for the form\nconst patientFormSchema = insertPatientSchema.extend({\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  phone: z.string().min(7, 'Phone number must be at least 7 characters'),\n  idNumber: z.string().min(1, 'ID/Passport number is required'),\n  dateOfBirth: z.date().refine(\n    (date) => date <= new Date(),\n    'Date of birth cannot be in the future'\n  ),\n});\n\nexport default function PatientRegistration() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [editingPatient, setEditingPatient] = useState<any | null>(null);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertPatient>({\n    resolver: zodResolver(patientFormSchema),\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      dateOfBirth: new Date(),\n      gender: 'male' as const,\n      idNumber: '',\n      address: '',\n      medicalAidScheme: '',\n      medicalAidNumber: '',\n      allergies: '',\n    },\n  });\n\n  const { data: searchResults } = useQuery({\n    queryKey: ['/api/patients/search', searchQuery],\n    queryFn: async () => {\n      if (!searchQuery.trim()) return [];\n      const res = await apiRequest('GET', `/api/patients/search?q=${encodeURIComponent(searchQuery)}`);\n      return res.json();\n    },\n    enabled: searchQuery.length >= 2,\n  });\n\n  const createPatientMutation = useMutation({\n    mutationFn: async (data: InsertPatient & { photo?: File }) => {\n      const formData = new FormData();\n      \n      Object.entries(data).forEach(([key, value]) => {\n        if (key !== 'photo' && value !== null && value !== undefined) {\n          if (value instanceof Date) {\n            formData.append(key, value.toISOString());\n          } else {\n            formData.append(key, value.toString());\n          }\n        }\n      });\n\n      if (selectedFile) {\n        formData.append('photo', selectedFile);\n      }\n\n      const endpoint = isEditMode ? `/api/patients/${editingPatient.id}` : '/api/patients';\n      const method = isEditMode ? 'PUT' : 'POST';\n      const res = await apiRequest(method, endpoint, formData);\n      return res.json();\n    },\n    onSuccess: (patient) => {\n      toast({\n        title: isEditMode ? 'Patient Updated' : 'Patient Registered',\n        description: `${patient.firstName} ${patient.lastName} has been successfully ${isEditMode ? 'updated' : 'registered'}.`,\n      });\n      resetForm();\n      // Invalidate all patient-related queries\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/patients/search'] });\n      queryClient.invalidateQueries({ predicate: (query) => query.queryKey[0] === '/api/patients/search' });\n      \n      // Force refetch search results if there's an active search\n      if (searchQuery.length > 2) {\n        queryClient.refetchQueries({ queryKey: ['/api/patients/search', searchQuery] });\n      }\n    },\n    onError: (error: any) => {\n      let description = error.message;\n      \n      // Handle unique constraint violation for ID number\n      if (error.message?.includes('unique') || error.message?.includes('duplicate')) {\n        description = 'This ID/Passport number is already registered. Please check the number and try again.';\n      }\n      \n      toast({\n        title: isEditMode ? 'Update Failed' : 'Registration Failed',\n        description,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onload = () => {\n        setPreviewUrl(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const loadPatientData = (patient: any) => {\n    setEditingPatient(patient);\n    setIsEditMode(true);\n    \n    // Populate the form with patient data\n    form.reset({\n      firstName: patient.firstName || '',\n      lastName: patient.lastName || '',\n      email: patient.email || '',\n      phone: patient.phone || '',\n      dateOfBirth: patient.dateOfBirth ? new Date(patient.dateOfBirth) : new Date(),\n      gender: patient.gender || 'male',\n      idNumber: patient.idNumber || '',\n      address: patient.address || '',\n      medicalAidScheme: patient.medicalAidScheme || '',\n      medicalAidNumber: patient.medicalAidNumber || '',\n      allergies: patient.allergies || '',\n    });\n    \n    // Set preview URL if patient has a photo\n    if (patient.photoUrl) {\n      setPreviewUrl(patient.photoUrl);\n    }\n    \n    // Scroll to form\n    setTimeout(() => {\n      document.querySelector('#patient-form')?.scrollIntoView({ behavior: 'smooth' });\n    }, 100);\n  };\n  \n  const resetForm = () => {\n    form.reset({\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      dateOfBirth: new Date(),\n      gender: 'male' as const,\n      idNumber: '',\n      address: '',\n      medicalAidScheme: '',\n      medicalAidNumber: '',\n      allergies: '',\n    });\n    setSelectedFile(null);\n    setPreviewUrl(null);\n    setEditingPatient(null);\n    setIsEditMode(false);\n  };\n\n  const onSubmit = (data: InsertPatient) => {\n    createPatientMutation.mutate(data);\n  };\n\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Patient Registration</h1>\n          <p className=\"text-muted-foreground\">Register new patients or update existing patient information</p>\n        </div>\n      </div>\n\n      {/* Patient Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"w-5 h-5\" />\n            Quick Patient Search\n          </CardTitle>\n          <CardDescription>\n            Search for existing patients to update their information\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <Input\n              placeholder=\"Search by name or phone number...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"flex-1\"\n              data-testid=\"input-patient-search\"\n            />\n          </div>\n          \n          {searchResults && searchResults.length > 0 && (\n            <div className=\"mt-4 space-y-2\">\n              <h4 className=\"font-medium\">Search Results:</h4>\n              {searchResults.map((patient: any) => (\n                <div\n                  key={patient.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                  onClick={() => loadPatientData(patient)}\n                  data-testid={`patient-result-${patient.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar>\n                      {patient.photoUrl && <AvatarImage src={patient.photoUrl} />}\n                      <AvatarFallback>\n                        {patient.firstName.charAt(0)}{patient.lastName.charAt(0)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <p className=\"font-medium\">{patient.firstName} {patient.lastName}</p>\n                      <p className=\"text-sm text-muted-foreground\">{patient.phone}</p>\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Load Data\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Registration Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <UserPlus className=\"w-5 h-5\" />\n            {isEditMode ? 'Edit Patient Information' : 'Patient Information'}\n          </CardTitle>\n          <CardDescription>\n            {isEditMode ? `Update information for ${editingPatient?.firstName} ${editingPatient?.lastName}` : 'Complete patient profiles with personal details and medical aid information'}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isEditMode && (\n            <div className=\"mb-4 p-3 bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg\">\n              <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                <strong>Editing:</strong> {editingPatient.firstName} {editingPatient.lastName}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={resetForm}\n                  className=\"ml-2 h-auto p-1 text-blue-600 hover:text-blue-800\"\n                >\n                  Cancel Edit\n                </Button>\n              </p>\n            </div>\n          )}\n          <div id=\"patient-form\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Photo Upload */}\n              <div className=\"flex items-center gap-6\">\n                <div>\n                  <Avatar className=\"w-24 h-24\">\n                    {previewUrl && <AvatarImage src={previewUrl} />}\n                    <AvatarFallback className=\"text-lg\">\n                      <Upload className=\"w-8 h-8\" />\n                    </AvatarFallback>\n                  </Avatar>\n                </div>\n                <div>\n                  <div className=\"flex gap-2 mb-2\">\n                    <label htmlFor=\"photo-upload\" className=\"cursor-pointer\">\n                      <Button variant=\"outline\" asChild>\n                        <span>\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          Upload ID/Passport\n                        </span>\n                      </Button>\n                    </label>\n                    {previewUrl && (\n                      <Button\n                        variant=\"outline\"\n                        type=\"button\"\n                        onClick={() => window.open(previewUrl, '_blank')}\n                        data-testid=\"button-view-id\"\n                      >\n                        <Eye className=\"w-4 h-4 mr-2\" />\n                        View ID\n                      </Button>\n                    )}\n                  </div>\n                  <input\n                    id=\"photo-upload\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileChange}\n                    className=\"hidden\"\n                    data-testid=\"input-patient-photo\"\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    ID/passport photo\n                  </p>\n                </div>\n              </div>\n\n              {/* Gender Field */}\n              <FormField\n                control={form.control}\n                name=\"gender\"\n                render={({ field }) => (\n                  <FormItem className=\"max-w-xs\">\n                    <FormLabel>Gender *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-gender\">\n                          <SelectValue placeholder=\"Select gender\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"male\">Male</SelectItem>\n                        <SelectItem value=\"female\">Female</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Personal Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-first-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-last-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"email\" value={field.value || ''} data-testid=\"input-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"dateOfBirth\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date of Birth *</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"date\"\n                          value={field.value instanceof Date ? field.value.toISOString().split('T')[0] : ''}\n                          onChange={(e) => field.onChange(new Date(e.target.value))}\n                          data-testid=\"input-date-of-birth\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n\n                <FormField\n                  control={form.control}\n                  name=\"idNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>ID/Passport Number *</FormLabel>\n                      <FormControl>\n                        <Input {...field} value={field.value || ''} data-testid=\"input-id-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} value={field.value || ''} data-testid=\"input-address\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"allergies\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Allergies</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} value={field.value || ''} placeholder=\"List any known allergies or medications to avoid...\" data-testid=\"input-allergies\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Medical Aid Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Medical Aid Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"medicalAidScheme\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Medical Aid Scheme</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || ''} data-testid=\"input-medical-aid-scheme\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"medicalAidNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Medical Aid Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || ''} data-testid=\"input-medical-aid-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={createPatientMutation.isPending}\n                data-testid=\"button-register-patient\"\n              >\n{isEditMode \n                  ? (createPatientMutation.isPending ? 'Updating...' : 'Update Patient')\n                  : (createPatientMutation.isPending ? 'Registering...' : 'Register Patient')\n                }\n              </Button>\n            </form>\n          </Form>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":19669},"client/src/pages/QueueManagement.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/auth';\nimport { useWebSocket } from '@/lib/websocket';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Users, Clock, Play, Pause, CheckCircle, \n  RotateCcw, AlertCircle, User, Timer\n} from 'lucide-react';\n\nexport default function QueueManagement() {\n  const [selectedDoctor, setSelectedDoctor] = useState<string>('all');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { lastMessage } = useWebSocket();\n\n  const { data: queue, refetch: refetchQueue } = useQuery({\n    queryKey: ['/api/queue', selectedDoctor],\n    queryFn: async () => {\n      const url = selectedDoctor && selectedDoctor !== 'all' ? `/api/queue?doctorId=${selectedDoctor}` : '/api/queue';\n      const res = await apiRequest('GET', url);\n      return res.json();\n    },\n  });\n\n  const { data: doctors } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/users');\n      const users = await res.json();\n      return users.filter((user: any) => user.role === 'doctor');\n    },\n  });\n\n  // Refresh queue when WebSocket message received\n  useEffect(() => {\n    if (lastMessage?.type === 'queue_update') {\n      refetchQueue();\n    }\n  }, [lastMessage, refetchQueue]);\n\n  const updateQueueStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const res = await apiRequest('PUT', `/api/queue/${id}/status`, { status });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/queue'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Status Update Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const removeFromQueueMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest('DELETE', `/api/queue/${id}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Removed from Queue',\n        description: 'Patient has been removed from the queue.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/queue'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Remove Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateStatus = (id: string, status: string) => {\n    updateQueueStatusMutation.mutate({ id, status });\n  };\n\n  const removeFromQueue = (id: string) => {\n    removeFromQueueMutation.mutate(id);\n  };\n\n  const getStatusBadgeClass = (status: string) => {\n    switch (status) {\n      case 'waiting': return 'badge-waiting';\n      case 'in_progress': return 'badge-in-progress';\n      case 'completed': return 'badge-completed';\n      default: return 'badge-waiting';\n    }\n  };\n\n  const getPriorityBadgeClass = (priority: number) => {\n    switch (priority) {\n      case 2: return 'badge-urgent';\n      case 1: return 'bg-orange-100 text-orange-800 border-orange-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getPriorityLabel = (priority: number) => {\n    switch (priority) {\n      case 2: return 'Urgent';\n      case 1: return 'High';\n      default: return 'Normal';\n    }\n  };\n\n  const getWaitTime = (enteredAt: string) => {\n    const now = new Date();\n    const entered = new Date(enteredAt);\n    const diffMs = now.getTime() - entered.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    return diffMins;\n  };\n\n  const queueStats = queue ? {\n    total: queue.length,\n    waiting: queue.filter((item: any) => item.status === 'waiting').length,\n    inProgress: queue.filter((item: any) => item.status === 'in_progress').length,\n    avgWaitTime: queue.length > 0 ? Math.round(\n      queue.reduce((acc: number, item: any) => acc + getWaitTime(item.enteredAt), 0) / queue.length\n    ) : 0\n  } : { total: 0, waiting: 0, inProgress: 0, avgWaitTime: 0 };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Queue Management</h1>\n          <p className=\"text-muted-foreground\">Real-time patient queue monitoring and management</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Select value={selectedDoctor} onValueChange={setSelectedDoctor}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-doctor-filter\">\n              <SelectValue placeholder=\"Filter by doctor\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Doctors</SelectItem>\n              {doctors?.map((doctor: any) => (\n                <SelectItem key={doctor.id} value={doctor.id}>\n                  {doctor.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Queue Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"w-5 h-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total in Queue</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-queue\">{queueStats.total}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                <Clock className=\"w-5 h-5 text-yellow-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Waiting</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-waiting-count\">{queueStats.waiting}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                <Play className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">In Progress</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-in-progress-count\">{queueStats.inProgress}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <Timer className=\"w-5 h-5 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Avg Wait Time</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-avg-wait-time\">{queueStats.avgWaitTime}m</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Queue List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            Current Queue\n          </CardTitle>\n          <CardDescription>\n            Manage patient queue with real-time updates and status tracking\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {queue && queue.length > 0 ? (\n              queue.map((queueItem: any, index: number) => (\n                <div key={queueItem.id} className=\"border rounded-lg p-4 hover:bg-muted/50\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"text-center min-w-[40px]\">\n                        <div className=\"text-xl font-bold text-primary\">\n                          #{index + 1}\n                        </div>\n                      </div>\n                      \n                      <Avatar className=\"w-12 h-12\">\n                        {queueItem.patient?.photoUrl && <AvatarImage src={queueItem.patient.photoUrl} />}\n                        <AvatarFallback>\n                          {queueItem.patient?.firstName?.charAt(0)}{queueItem.patient?.lastName?.charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <span className=\"font-bold text-2xl text-foreground\" data-testid={`text-patient-name-${queueItem.id}`}>\n                            {queueItem.patient?.firstName} {queueItem.patient?.lastName}\n                          </span>\n                          <Badge className={`px-2 py-1 text-xs font-medium rounded-full border ${getPriorityBadgeClass(queueItem.priority)}`}>\n                            {getPriorityLabel(queueItem.priority)}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <User className=\"w-3 h-3\" />\n                            <span>Dr. {queueItem.doctor?.name}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"w-3 h-3\" />\n                            <span>Waiting {getWaitTime(queueItem.enteredAt)} mins</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <span>\n                              Entered: {new Date(queueItem.enteredAt).toLocaleTimeString([], { \n                                hour: '2-digit', \n                                minute: '2-digit' \n                              })}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <Badge className={`px-3 py-1 text-sm font-medium rounded-full border ${getStatusBadgeClass(queueItem.status)}`}>\n                        {queueItem.status.replace('_', ' ')}\n                      </Badge>\n\n                      <div className=\"flex gap-2\">\n                        {queueItem.status === 'waiting' && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => updateStatus(queueItem.id, 'in_progress')}\n                            data-testid={`button-start-${queueItem.id}`}\n                          >\n                            <Play className=\"w-4 h-4 mr-1\" />\n                            Start\n                          </Button>\n                        )}\n\n                        {queueItem.status === 'in_progress' && (\n                          <>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => updateStatus(queueItem.id, 'waiting')}\n                              data-testid={`button-pause-${queueItem.id}`}\n                            >\n                              <Pause className=\"w-4 h-4 mr-1\" />\n                              Pause\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => updateStatus(queueItem.id, 'completed')}\n                              data-testid={`button-complete-${queueItem.id}`}\n                            >\n                              <CheckCircle className=\"w-4 h-4 mr-1\" />\n                              Complete\n                            </Button>\n                          </>\n                        )}\n\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => removeFromQueue(queueItem.id)}\n                          data-testid={`button-remove-${queueItem.id}`}\n                        >\n                          <RotateCcw className=\"w-4 h-4 mr-1\" />\n                          Remove\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-12\" data-testid=\"text-empty-queue\">\n                <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">Queue is Empty</h3>\n                <p className=\"text-muted-foreground\">No patients are currently in the queue.</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13842},"client/src/pages/SystemAdmin.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/auth';\nimport { formatDate, formatDateTime } from '@/lib/utils';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  Shield, Activity, Database, Server, \n  Settings, Users, FileText, Clock,\n  CheckCircle, AlertCircle, HardDrive,\n  Wifi, Globe, Lock, Calendar\n} from 'lucide-react';\n\nexport default function SystemAdmin() {\n  const [logLimit, setLogLimit] = useState(50);\n\n  const { data: activityLogs } = useQuery({\n    queryKey: ['/api/activity-logs', logLimit],\n    queryFn: async () => {\n      const res = await apiRequest('GET', `/api/activity-logs?limit=${logLimit}`);\n      return res.json();\n    },\n  });\n\n  const { data: users } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/users');\n      return res.json();\n    },\n  });\n\n  const { data: dashboardStats } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/dashboard/stats');\n      return res.json();\n    },\n  });\n\n  // Mock system status data (in a real app, this would come from system monitoring APIs)\n  const systemStatus = {\n    server: { status: 'online', uptime: '99.9%', lastRestart: '2 days ago' },\n    database: { status: 'connected', connections: 5, queryTime: '12ms' },\n    storage: { used: 67, total: 100, lastBackup: '2 hours ago' },\n    memory: { used: 45, total: 8192, available: 4506 },\n    network: { status: 'connected', latency: '23ms', bandwidth: '1Gbps' }\n  };\n\n  const getActionIcon = (action: string) => {\n    switch (action) {\n      case 'login': return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'logout': return <Clock className=\"w-4 h-4 text-blue-600\" />;\n      case 'create_user': return <Users className=\"w-4 h-4 text-purple-600\" />;\n      case 'create_patient': return <Users className=\"w-4 h-4 text-blue-600\" />;\n      case 'patient_checkin': return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'create_appointment': return <Calendar className=\"w-4 h-4 text-orange-600\" />;\n      default: return <Activity className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getActionColor = (action: string) => {\n    switch (action) {\n      case 'login': return 'text-green-600';\n      case 'logout': return 'text-blue-600';\n      case 'create_user': return 'text-purple-600';\n      case 'delete_user': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const userActivityStats = users ? {\n    totalUsers: users.length,\n    activeToday: activityLogs?.filter((log: any) => {\n      const today = new Date().toDateString();\n      return new Date(log.timestamp).toDateString() === today;\n    }).map((log: any) => log.userId).filter((value: any, index: number, self: any[]) => self.indexOf(value) === index).length || 0,\n    recentLogins: activityLogs?.filter((log: any) => log.action === 'login').length || 0,\n  } : { totalUsers: 0, activeToday: 0, recentLogins: 0 };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">System Administration</h1>\n          <p className=\"text-muted-foreground\">Monitor system health and user activity</p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">System Overview</TabsTrigger>\n          <TabsTrigger value=\"activity\">Activity Logs</TabsTrigger>\n          <TabsTrigger value=\"users\">User Activity</TabsTrigger>\n          <TabsTrigger value=\"settings\">System Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* System Health Status */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Server Status</p>\n                    <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-server-status\">\n                      Online\n                    </p>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Uptime: {systemStatus.server.uptime}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <Server className=\"text-green-600 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Database</p>\n                    <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-database-status\">\n                      Connected\n                    </p>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {systemStatus.database.connections} active connections\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <Database className=\"text-green-600 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Storage Used</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-storage-used\">\n                      {systemStatus.storage.used}%\n                    </p>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Last backup: {systemStatus.storage.lastBackup}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <HardDrive className=\"text-blue-600 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Detailed System Metrics */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"w-5 h-5\" />\n                  System Performance\n                </CardTitle>\n                <CardDescription>\n                  Real-time system health monitoring\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Memory Usage</span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {systemStatus.memory.used}% ({systemStatus.memory.available}MB available)\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-muted rounded-full h-2\">\n                    <div \n                      className=\"bg-blue-500 h-2 rounded-full\" \n                      style={{ width: `${systemStatus.memory.used}%` }}\n                    ></div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Storage Usage</span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {systemStatus.storage.used}% of {systemStatus.storage.total}GB\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-muted rounded-full h-2\">\n                    <div \n                      className=\"bg-green-500 h-2 rounded-full\" \n                      style={{ width: `${systemStatus.storage.used}%` }}\n                    ></div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                  <div className=\"text-center p-3 border rounded-lg\">\n                    <p className=\"text-lg font-bold text-green-600\">\n                      {systemStatus.database.queryTime}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Avg Query Time</p>\n                  </div>\n                  <div className=\"text-center p-3 border rounded-lg\">\n                    <p className=\"text-lg font-bold text-blue-600\">\n                      {systemStatus.network.latency}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Network Latency</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  User Statistics\n                </CardTitle>\n                <CardDescription>\n                  Current user activity and engagement\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"text-center p-3 border rounded-lg\">\n                    <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-total-system-users\">\n                      {userActivityStats.totalUsers}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Total Users</p>\n                  </div>\n                  <div className=\"text-center p-3 border rounded-lg\">\n                    <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-active-today\">\n                      {userActivityStats.activeToday}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Active Today</p>\n                  </div>\n                  <div className=\"text-center p-3 border rounded-lg\">\n                    <p className=\"text-2xl font-bold text-purple-600\" data-testid=\"text-recent-logins\">\n                      {userActivityStats.recentLogins}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Recent Logins</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">System Health Indicators</h4>\n                  \n                  <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                      <span className=\"text-sm\">Server Connectivity</span>\n                    </div>\n                    <Badge className=\"badge-completed\">Healthy</Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <Wifi className=\"w-5 h-5 text-green-600\" />\n                      <span className=\"text-sm\">Network Status</span>\n                    </div>\n                    <Badge className=\"badge-completed\">Connected</Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <Lock className=\"w-5 h-5 text-green-600\" />\n                      <span className=\"text-sm\">Security Status</span>\n                    </div>\n                    <Badge className=\"badge-completed\">Secure</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"activity\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-semibold\">System Activity Logs</h3>\n              <p className=\"text-sm text-muted-foreground\">Monitor all user actions and system events</p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm\">Show last:</span>\n              <Input\n                type=\"number\"\n                value={logLimit}\n                onChange={(e) => setLogLimit(parseInt(e.target.value) || 50)}\n                className=\"w-20\"\n                min=\"10\"\n                max=\"1000\"\n                data-testid=\"input-log-limit\"\n              />\n              <span className=\"text-sm\">entries</span>\n            </div>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"space-y-0\">\n                {activityLogs && activityLogs.length > 0 ? (\n                  activityLogs.map((log: any) => (\n                    <div key={log.id} className=\"flex items-center gap-4 p-4 border-b last:border-b-0 hover:bg-muted/50\">\n                      <div className=\"flex items-center justify-center w-8 h-8\">\n                        {getActionIcon(log.action)}\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`font-medium ${getActionColor(log.action)}`}>\n                            {log.action.replace('_', ' ').toUpperCase()}\n                          </span>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {formatDateTime(log.timestamp)}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-foreground mt-1\" data-testid={`log-entry-${log.id}`}>\n                          {log.details}\n                        </p>\n                      </div>\n\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {log.userId?.slice(0, 8)}...\n                      </Badge>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"text-no-activity-logs\">\n                    <Activity className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-foreground mb-2\">No Activity Logs</h3>\n                    <p className=\"text-muted-foreground\">No system activity has been recorded yet.</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                User Activity Summary\n              </CardTitle>\n              <CardDescription>\n                Track user engagement and system usage patterns\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {users && users.length > 0 ? (\n                  users.map((user: any) => {\n                    const userLogs = activityLogs?.filter((log: any) => log.userId === user.id) || [];\n                    const lastActivity = userLogs.length > 0 ? userLogs[0] : null;\n                    \n                    return (\n                      <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center gap-4\">\n                          <Avatar className=\"w-12 h-12\">\n                            <AvatarFallback>\n                              {user.name.split(' ').map((n: string) => n.charAt(0)).join('').toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          \n                          <div>\n                            <p className=\"font-semibold\" data-testid={`user-activity-${user.id}`}>\n                              {user.name}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <Badge className={`px-2 py-1 text-xs font-medium rounded-full border ${\n                                user.role === 'admin' ? 'bg-red-100 text-red-800 border-red-200' :\n                                user.role === 'doctor' ? 'bg-blue-100 text-blue-800 border-blue-200' :\n                                'bg-green-100 text-green-800 border-green-200'\n                              }`}>\n                                {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                              </Badge>\n                              {!user.isActive && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  Inactive\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"text-right\">\n                          <p className=\"text-sm font-medium\">\n                            {userLogs.length} activities\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {lastActivity \n                              ? `Last: ${formatDate(lastActivity.timestamp)}`\n                              : 'No activity'\n                            }\n                          </p>\n                          {lastActivity && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              {lastActivity.action.replace('_', ' ')}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })\n                ) : (\n                  <div className=\"text-center py-8\" data-testid=\"text-no-users-activity\">\n                    <Users className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-muted-foreground\">No user data available</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"w-5 h-5\" />\n                  System Actions\n                </CardTitle>\n                <CardDescription>\n                  Perform administrative system operations\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  data-testid=\"button-manual-backup\"\n                >\n                  <Database className=\"w-4 h-4 mr-2\" />\n                  Run Manual Backup\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  data-testid=\"button-view-logs\"\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  View System Logs\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  data-testid=\"button-system-settings\"\n                >\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  System Configuration\n                </Button>\n\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  data-testid=\"button-security-audit\"\n                >\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Security Audit\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Globe className=\"w-5 h-5\" />\n                  System Information\n                </CardTitle>\n                <CardDescription>\n                  Current system configuration and environment\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Environment:</span>\n                    <span className=\"font-medium ml-2\">Production</span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Version:</span>\n                    <span className=\"font-medium ml-2\">1.0.0</span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Uptime:</span>\n                    <span className=\"font-medium ml-2\">{systemStatus.server.uptime}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Last Restart:</span>\n                    <span className=\"font-medium ml-2\">{systemStatus.server.lastRestart}</span>\n                  </div>\n                </div>\n\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-medium mb-3\">Quick Status</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Database Connections</span>\n                      <Badge className=\"badge-completed\">\n                        {systemStatus.database.connections} active\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Backup Status</span>\n                      <Badge className=\"badge-completed\">\n                        {systemStatus.storage.lastBackup}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Network</span>\n                      <Badge className=\"badge-completed\">\n                        {systemStatus.network.bandwidth}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":23968},"client/src/pages/UserManagement.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { insertUserSchema, type InsertUser } from '@shared/schema';\nimport { apiRequest } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatDate } from '@/lib/utils';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Switch } from '@/components/ui/switch';\nimport { \n  UserPlus, Users, Mail, Edit, Trash2, \n  Shield, UserCheck, UserX, Settings\n} from 'lucide-react';\n\nexport default function UserManagement() {\n  const [editingUser, setEditingUser] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      email: '',\n      passwordHash: '',\n      name: '',\n      role: 'staff',\n    },\n  });\n\n  const { data: users } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/users');\n      return res.json();\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: InsertUser) => {\n      const res = await apiRequest('POST', '/api/users', data);\n      return res.json();\n    },\n    onSuccess: (user) => {\n      toast({\n        title: 'User Created',\n        description: `${user.name} has been successfully created.`,\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Creation Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, ...data }: { id: string } & Partial<InsertUser>) => {\n      const res = await apiRequest('PUT', `/api/users/${id}`, data);\n      return res.json();\n    },\n    onSuccess: (user) => {\n      toast({\n        title: 'User Updated',\n        description: `${user.name} has been successfully updated.`,\n      });\n      setEditingUser(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Update Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest('DELETE', `/api/users/${id}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'User Deleted',\n        description: 'User has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Deletion Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertUser) => {\n    if (editingUser) {\n      updateUserMutation.mutate({ id: editingUser.id, ...data });\n    } else {\n      createUserMutation.mutate(data);\n    }\n  };\n\n  const startEditing = (user: any) => {\n    setEditingUser(user);\n    form.reset({\n      email: user.email,\n      name: user.name,\n      role: user.role,\n      passwordHash: '', // Don't pre-fill password\n    });\n  };\n\n  const cancelEditing = () => {\n    setEditingUser(null);\n    form.reset();\n  };\n\n  const toggleUserStatus = (user: any) => {\n    updateUserMutation.mutate({\n      id: user.id,\n      isActive: !user.isActive\n    });\n  };\n\n  const deleteUser = (id: string) => {\n    if (window.confirm('Are you sure you want to delete this user? This action cannot be undone.')) {\n      deleteUserMutation.mutate(id);\n    }\n  };\n\n  const getRoleBadgeClass = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-red-100 text-red-800 border-red-200';\n      case 'doctor': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'staff': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const roleStats = users ? {\n    total: users.length,\n    admins: users.filter((u: any) => u.role === 'admin').length,\n    doctors: users.filter((u: any) => u.role === 'doctor').length,\n    staff: users.filter((u: any) => u.role === 'staff').length,\n    active: users.filter((u: any) => u.isActive).length,\n  } : { total: 0, admins: 0, doctors: 0, staff: 0, active: 0 };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">User Management</h1>\n          <p className=\"text-muted-foreground\">Manage system users, roles, and permissions</p>\n        </div>\n      </div>\n\n      {/* User Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"w-5 h-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Users</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-users\">{roleStats.total}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                <Shield className=\"w-5 h-5 text-red-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Admins</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-admin-count\">{roleStats.admins}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <UserCheck className=\"w-5 h-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Doctors</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-doctor-count\">{roleStats.doctors}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Staff</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-staff-count\">{roleStats.staff}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                <UserCheck className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-active-count\">{roleStats.active}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* User Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <UserPlus className=\"w-5 h-5\" />\n              {editingUser ? 'Edit User' : 'Create New User'}\n            </CardTitle>\n            <CardDescription>\n              {editingUser ? 'Update user information and role' : 'Add new users to the system with appropriate roles'}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Full Name *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-user-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address *</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"email\" data-testid=\"input-user-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Role *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-user-role\">\n                            <SelectValue placeholder=\"Select role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"staff\">Staff</SelectItem>\n                          <SelectItem value=\"doctor\">Doctor</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"passwordHash\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {editingUser ? 'New Password (leave blank to keep current)' : 'Password *'}\n                      </FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"password\" \n                          data-testid=\"input-user-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2\">\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1\" \n                    disabled={createUserMutation.isPending || updateUserMutation.isPending}\n                    data-testid=\"button-save-user\"\n                  >\n                    {editingUser ? 'Update User' : 'Create User'}\n                  </Button>\n                  {editingUser && (\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={cancelEditing}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      Cancel\n                    </Button>\n                  )}\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Users List */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"w-5 h-5\" />\n              System Users\n            </CardTitle>\n            <CardDescription>\n              Manage existing users, roles, and account status\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {users && users.length > 0 ? (\n                users.map((user: any) => (\n                  <div key={user.id} className=\"border rounded-lg p-4 hover:bg-muted/50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4\">\n                        <Avatar className=\"w-12 h-12\">\n                          <AvatarFallback>\n                            {user.name.split(' ').map((n: string) => n.charAt(0)).join('').toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className=\"font-semibold text-lg\" data-testid={`text-user-name-${user.id}`}>\n                              {user.name}\n                            </span>\n                            {!user.isActive && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                Inactive\n                              </Badge>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                            <div className=\"flex items-center gap-1\">\n                              <Mail className=\"w-4 h-4\" />\n                              <span>{user.email}</span>\n                            </div>\n                            <Badge className={`px-2 py-1 text-xs font-medium rounded-full border ${getRoleBadgeClass(user.role)}`}>\n                              {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            Created: {formatDate(user.createdAt)}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-sm\">Active</span>\n                          <Switch\n                            checked={user.isActive}\n                            onCheckedChange={() => toggleUserStatus(user)}\n                            data-testid={`switch-user-status-${user.id}`}\n                          />\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => startEditing(user)}\n                            data-testid={`button-edit-${user.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          \n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => deleteUser(user.id)}\n                            data-testid={`button-delete-${user.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-12\" data-testid=\"text-no-users\">\n                  <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-foreground mb-2\">No Users Found</h3>\n                  <p className=\"text-muted-foreground\">Create your first user to get started.</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Role Permissions Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"w-5 h-5\" />\n            Role Permissions\n          </CardTitle>\n          <CardDescription>\n            Understanding user roles and their access levels\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                  Staff\n                </Badge>\n                <span className=\"font-medium\">Staff Members</span>\n              </div>\n              <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                <li>• Patient registration and management</li>\n                <li>• Appointment scheduling</li>\n                <li>• Patient check-in</li>\n                <li>• Queue management</li>\n                <li>• Basic reporting</li>\n              </ul>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <Badge className=\"bg-blue-100 text-blue-800 border-blue-200\">\n                  Doctor\n                </Badge>\n                <span className=\"font-medium\">Medical Doctors</span>\n              </div>\n              <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                <li>• All staff permissions</li>\n                <li>• Patient consultations</li>\n                <li>• Medical records access</li>\n                <li>• Prescription management</li>\n                <li>• Queue management for assigned patients</li>\n              </ul>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <Badge className=\"bg-red-100 text-red-800 border-red-200\">\n                  Admin\n                </Badge>\n                <span className=\"font-medium\">System Administrators</span>\n              </div>\n              <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                <li>• All system permissions</li>\n                <li>• User management</li>\n                <li>• Business insights and analytics</li>\n                <li>• System administration</li>\n                <li>• Financial reporting</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":19646},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Clinic Management App - InvoTech\n\n## Overview\n\nThis is a comprehensive clinic management application built for InvoTech. The system provides a complete solution for managing clinic operations including patient registration, appointment scheduling, check-ins, queue management, consultations, and business insights. The application supports role-based access control with three user roles: staff, admin, and doctor, each with specific permissions and functionality.\n\nThe system is designed to streamline clinic workflow from patient registration through consultation completion, with real-time queue management and comprehensive reporting capabilities. It includes features for patient photo management, medical aid tracking, appointment conflict prevention, and revenue analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and modern development\n- **UI Library**: Shadcn/UI components built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with CSS custom properties for consistent theming and responsive design\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js for RESTful API endpoints\n- **Language**: TypeScript for full-stack type safety\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **File Uploads**: Multer middleware for patient photo management with file type validation\n- **Real-time Communication**: WebSocket server for live queue updates and notifications\n- **API Design**: RESTful endpoints with proper HTTP status codes and error handling\n\n### Database Architecture\n- **Database**: PostgreSQL via Neon serverless for scalable cloud database\n- **ORM**: Drizzle ORM for type-safe database queries and migrations\n- **Schema Design**: Normalized relational schema with proper foreign key relationships\n- **Key Tables**:\n  - Users (role-based access control)\n  - Patients (comprehensive patient profiles)\n  - Appointments (scheduling with conflict prevention)\n  - Check-ins (patient arrival tracking)\n  - Queue (real-time patient flow management)\n  - Consultations (doctor notes and medical records)\n  - Payments (revenue tracking with payment methods)\n  - Activity Logs (audit trail for system actions)\n\n### Authentication & Authorization\n- **Role-Based Access Control**: Three distinct roles with granular permissions\n  - Staff: Patient registration, appointments, check-ins, queue management\n  - Admin: Full system access including all staff permissions, user management, business insights, system administration, and complete access to medical information and consultations\n  - Doctor: Queue management, patient consultations, medical records access\n- **Security**: JWT tokens with configurable expiration, password hashing with bcrypt\n- **Route Protection**: Frontend and backend route guards based on user roles\n\n### Real-time Features\n- **WebSocket Integration**: Live queue updates across all connected clients\n- **Auto-refresh**: Automatic data synchronization for critical operations\n- **Live Notifications**: Real-time status updates for appointments and queue changes\n\n### Mobile Responsiveness\n- **Touch-Friendly Interface**: Optimized for tablets and mobile devices\n- **Responsive Design**: Adaptive layout that works across all screen sizes\n- **Collapsible Navigation**: Space-efficient sidebar that can be toggled on mobile\n- **Mobile-First Approach**: Components designed with mobile usability in mind\n\n### File Management\n- **Patient Photos**: Secure upload and storage with file type validation\n- **File Processing**: Image optimization and secure file serving\n- **Storage Security**: Controlled access to uploaded patient images\n\n## External Dependencies\n\n### Database & Infrastructure\n- **Neon Database**: Serverless PostgreSQL database with connection pooling\n- **Drizzle Kit**: Database migrations and schema management\n- **WebSocket Support**: Real-time communication via native WebSocket API\n\n### Authentication & Security\n- **JWT (jsonwebtoken)**: Token-based authentication system\n- **bcrypt**: Secure password hashing and verification\n- **Multer**: File upload middleware for patient photos\n\n### Email Services\n- **SendGrid**: Email service integration for user account creation notifications\n- **Email Templates**: Automated emails for user onboarding and account setup\n\n### UI & Styling\n- **Radix UI**: Comprehensive set of accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Consistent icon library for interface elements\n- **Class Variance Authority**: Type-safe component variants\n\n### Development Tools\n- **TypeScript**: Full-stack type safety and developer experience\n- **Vite**: Fast build tool with hot module replacement\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Tailwind integration\n\n### Runtime Dependencies\n- **React Query**: Server state management and caching\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation and schema definition\n- **Wouter**: Lightweight routing solution\n\nThe application follows modern development practices with comprehensive type safety, proper error handling, and scalable architecture patterns suitable for a production clinic management system.","size_bytes":5737},"attached_assets/content-1757886484329.md":{"content":"This is a temporary development preview, and these links are not for public use. [Deploy your app](https://docs.replit.com/category/replit-deployments?ref=replit-dev-banner) for secure sharing or use an invite link.","size_bytes":215},"client/src/pages/MedicalAid.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatDate, formatTime } from '@/lib/utils';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { \n  FileText, Users, Clock, CheckCircle, XCircle, \n  Send, Calendar, Building, Phone, IdCard\n} from 'lucide-react';\n\nexport default function MedicalAid() {\n  const [editingClaim, setEditingClaim] = useState<any>(null);\n  const [updateData, setUpdateData] = useState<any>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: claims, isLoading } = useQuery({\n    queryKey: ['/api/medical-aid-claims'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/medical-aid-claims');\n      return res.json();\n    },\n  });\n\n  const updateClaimMutation = useMutation({\n    mutationFn: async ({ id, ...data }: { id: string } & any) => {\n      const res = await apiRequest('PUT', `/api/medical-aid-claims/${id}`, data);\n      return res.json();\n    },\n    onSuccess: (updatedClaim) => {\n      toast({\n        title: 'Claim Updated',\n        description: `Medical aid claim status updated successfully.`,\n      });\n      setEditingClaim(null);\n      setUpdateData({});\n      queryClient.invalidateQueries({ queryKey: ['/api/medical-aid-claims'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Update Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const startEditing = (claim: any) => {\n    setEditingClaim(claim);\n    setUpdateData({\n      status: claim.status,\n      notes: claim.notes || '',\n      submittedAt: claim.submittedAt ? new Date(claim.submittedAt).toISOString().slice(0, 16) : '',\n      approvedAt: claim.approvedAt ? new Date(claim.approvedAt).toISOString().slice(0, 16) : '',\n      claimAmount: claim.claimAmount || ''\n    });\n  };\n\n  const cancelEditing = () => {\n    setEditingClaim(null);\n    setUpdateData({});\n  };\n\n  const saveUpdate = () => {\n    if (!editingClaim) return;\n    \n    const updatePayload: any = {\n      status: updateData.status,\n      notes: updateData.notes\n    };\n\n    // Include date fields if they have values\n    if (updateData.submittedAt) {\n      updatePayload.submittedAt = new Date(updateData.submittedAt).toISOString();\n    }\n    if (updateData.approvedAt) {\n      updatePayload.approvedAt = new Date(updateData.approvedAt).toISOString();\n    }\n    \n    // Include claim amount if it has a value\n    if (updateData.claimAmount && updateData.claimAmount !== '') {\n      updatePayload.claimAmount = parseFloat(updateData.claimAmount).toString();\n    }\n\n    updateClaimMutation.mutate({ id: editingClaim.id, ...updatePayload });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\" data-testid={`status-pending`}>\n          <Clock className=\"w-3 h-3 mr-1\" />\n          Pending\n        </Badge>;\n      case 'submitted':\n        return <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\" data-testid={`status-submitted`}>\n          <Send className=\"w-3 h-3 mr-1\" />\n          Submitted\n        </Badge>;\n      case 'approved':\n        return <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\" data-testid={`status-approved`}>\n          <CheckCircle className=\"w-3 h-3 mr-1\" />\n          Approved\n        </Badge>;\n      case 'rejected':\n        return <Badge variant=\"outline\" className=\"bg-red-50 text-red-700 border-red-200\" data-testid={`status-rejected`}>\n          <XCircle className=\"w-3 h-3 mr-1\" />\n          Rejected\n        </Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid={`status-unknown`}>{status}</Badge>;\n    }\n  };\n\n  // Calculate statistics\n  const stats = claims ? {\n    total: claims.length,\n    pending: claims.filter((c: any) => c.status === 'pending').length,\n    submitted: claims.filter((c: any) => c.status === 'submitted').length,\n    approved: claims.filter((c: any) => c.status === 'approved').length,\n    rejected: claims.filter((c: any) => c.status === 'rejected').length\n  } : { total: 0, pending: 0, submitted: 0, approved: 0, rejected: 0 };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Medical Aid Claims</h1>\n            <p className=\"text-muted-foreground\">Track and manage medical aid claim submissions</p>\n          </div>\n        </div>\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"text-muted-foreground\">Loading claims...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Medical Aid Claims</h1>\n          <p className=\"text-muted-foreground\">Track and manage medical aid claim submissions</p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Claims</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-claims\">\n                  {stats.total}\n                </p>\n              </div>\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <FileText className=\"text-blue-600 w-5 h-5\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\n                <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-pending-claims\">\n                  {stats.pending}\n                </p>\n              </div>\n              <div className=\"w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                <Clock className=\"text-yellow-600 w-5 h-5\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Submitted</p>\n                <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-submitted-claims\">\n                  {stats.submitted}\n                </p>\n              </div>\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Send className=\"text-blue-600 w-5 h-5\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Approved</p>\n                <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-approved-claims\">\n                  {stats.approved}\n                </p>\n              </div>\n              <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"text-green-600 w-5 h-5\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Rejected</p>\n                <p className=\"text-2xl font-bold text-red-600\" data-testid=\"text-rejected-claims\">\n                  {stats.rejected}\n                </p>\n              </div>\n              <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                <XCircle className=\"text-red-600 w-5 h-5\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Claims List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            Medical Aid Claims ({claims?.length || 0})\n          </CardTitle>\n          <CardDescription>\n            Manage medical aid claim submissions and approvals\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {claims && claims.length > 0 ? (\n            <div className=\"space-y-4\">\n              {claims.map((claim: any) => (\n                <div key={claim.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1 space-y-2\">\n                      {/* Patient Info */}\n                      <div className=\"flex items-center gap-4\">\n                        <div>\n                          <h3 className=\"font-medium text-foreground\" data-testid={`text-patient-name-${claim.id}`}>\n                            {claim.patient.firstName} {claim.patient.lastName}\n                          </h3>\n                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground mt-1\">\n                            <span className=\"flex items-center gap-1\">\n                              <Phone className=\"w-3 h-3\" />\n                              {claim.patient.phone}\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Building className=\"w-3 h-3\" />\n                              {claim.patient.medicalAidScheme || 'No scheme'}\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <IdCard className=\"w-3 h-3\" />\n                              {claim.patient.medicalAidNumber || 'No member number'}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Claim Details */}\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-muted-foreground\">Check-in Time</p>\n                          <p className=\"font-medium\" data-testid={`text-checkin-time-${claim.id}`}>\n                            {formatDate(new Date(claim.checkIn.checkInTime))} at {formatTime(new Date(claim.checkIn.checkInTime))}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Payment Method</p>\n                          <Badge variant=\"outline\" className=\"w-fit\">\n                            {claim.checkIn.paymentMethod.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Submitted</p>\n                          <p className=\"font-medium\">\n                            {claim.submittedAt ? formatDate(new Date(claim.submittedAt)) : 'Not submitted'}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Approved</p>\n                          <p className=\"font-medium\">\n                            {claim.approvedAt ? formatDate(new Date(claim.approvedAt)) : 'Not approved'}\n                          </p>\n                        </div>\n                      </div>\n\n                      {/* Notes */}\n                      {claim.notes && (\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Notes</p>\n                          <p className=\"text-sm\" data-testid={`text-notes-${claim.id}`}>{claim.notes}</p>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Status and Actions */}\n                    <div className=\"flex items-center gap-3\">\n                      {getStatusBadge(claim.status)}\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => startEditing(claim)}\n                        data-testid={`button-edit-${claim.id}`}\n                      >\n                        Update\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <FileText className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground/50\" />\n              <p>No medical aid claims found</p>\n              <p className=\"text-sm\">Claims will appear here when patients check in with medical aid payment methods</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Modal */}\n      {editingClaim && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-md mx-4\">\n            <CardHeader>\n              <CardTitle>Update Medical Aid Claim</CardTitle>\n              <CardDescription>\n                Update claim status for {editingClaim.patient.firstName} {editingClaim.patient.lastName}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"status\">Status</Label>\n                <Select \n                  value={updateData.status} \n                  onValueChange={(value) => setUpdateData({...updateData, status: value})}\n                >\n                  <SelectTrigger data-testid=\"select-status\">\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"submitted\">Submitted</SelectItem>\n                    <SelectItem value=\"approved\">Approved</SelectItem>\n                    <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"submittedAt\">Submitted Date & Time</Label>\n                <Input\n                  id=\"submittedAt\"\n                  type=\"datetime-local\"\n                  value={updateData.submittedAt}\n                  onChange={(e) => setUpdateData({...updateData, submittedAt: e.target.value})}\n                  data-testid=\"input-submitted-at\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"approvedAt\">Approved Date & Time</Label>\n                <Input\n                  id=\"approvedAt\"\n                  type=\"datetime-local\"\n                  value={updateData.approvedAt}\n                  onChange={(e) => setUpdateData({...updateData, approvedAt: e.target.value})}\n                  data-testid=\"input-approved-at\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"claimAmount\">Claim Amount (R)</Label>\n                <Input\n                  id=\"claimAmount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  placeholder=\"0.00\"\n                  value={updateData.claimAmount}\n                  onChange={(e) => setUpdateData({...updateData, claimAmount: e.target.value})}\n                  data-testid=\"input-claim-amount\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={updateData.notes}\n                  onChange={(e) => setUpdateData({...updateData, notes: e.target.value})}\n                  placeholder=\"Add notes about this claim...\"\n                  data-testid=\"textarea-notes\"\n                />\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button \n                  onClick={saveUpdate} \n                  disabled={updateClaimMutation.isPending}\n                  data-testid=\"button-save-update\"\n                >\n                  {updateClaimMutation.isPending ? 'Saving...' : 'Save Changes'}\n                </Button>\n                <Button variant=\"outline\" onClick={cancelEditing} data-testid=\"button-cancel-update\">\n                  Cancel\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":17679},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Check localStorage first, then system preference, default to light\n    const stored = localStorage.getItem('theme');\n    if (stored === 'light' || stored === 'dark') {\n      return stored;\n    }\n    \n    // Check system preference\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    \n    return 'light';\n  });\n\n  useEffect(() => {\n    // Update document class and localStorage\n    const root = document.documentElement;\n    \n    if (theme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n    \n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}","size_bytes":1520},"client/src/pages/CustomerRelations.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Gift, Heart, Users, Send, Loader2, \n  Calendar, MessageSquare, Megaphone \n} from 'lucide-react';\n\ninterface Patient {\n  id: string;\n  firstName: string;\n  lastName: string;\n  phone: string;\n  email?: string;\n  dateOfBirth: string;\n}\n\ninterface BirthdayWish {\n  patientId: string;\n  message: string;\n  status: 'sent' | 'pending';\n  sentAt?: string;\n}\n\n\nexport default function CustomerRelations() {\n  const { toast } = useToast();\n  const [birthdayCustomMessage, setBirthdayCustomMessage] = useState<string>('');\n  const [broadcastMessage, setBroadcastMessage] = useState<string>('');\n  const [processingSendId, setProcessingSendId] = useState<string | null>(null);\n  const [selectedBirthdayPatient, setSelectedBirthdayPatient] = useState<string | null>(null);\n\n  // Get today's birthday patients\n  const { data: birthdayPatients, isLoading: loadingBirthdays } = useQuery({\n    queryKey: ['/api/patients/birthdays'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/patients/birthdays');\n      return res.json();\n    },\n    refetchInterval: 60000, // Refresh every minute to catch midnight updates\n  });\n\n\n  // Get birthday wishes sent today\n  const { data: sentWishes } = useQuery({\n    queryKey: ['/api/birthday-wishes'],\n    queryFn: async () => {\n      const res = await apiRequest('GET', '/api/birthday-wishes');\n      return res.json();\n    },\n  });\n\n  // Send birthday wish mutation\n  const sendBirthdayWishMutation = useMutation({\n    mutationFn: async ({ patientId, customMessage }: { patientId: string; customMessage?: string }) => {\n      // Set the current processing ID\n      setProcessingSendId(patientId);\n      \n      const response = await apiRequest('POST', '/api/send-birthday-wish', {\n        patientId,\n        customMessage: customMessage?.trim() || undefined\n      });\n      return { ...await response.json(), patientId };\n    },\n    onSuccess: (data) => {\n      // Clear processing ID\n      setProcessingSendId(null);\n      \n      toast({\n        title: \"Birthday Wish Sent!\",\n        description: `Message sent successfully: \"${data.message}\"`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/birthday-wishes'] });\n    },\n    onError: (error, variables) => {\n      // Clear processing ID\n      setProcessingSendId(null);\n      \n      toast({\n        title: \"Error\",\n        description: \"Failed to send birthday wish. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Send broadcast message mutation\n  const sendBroadcastMutation = useMutation({\n    mutationFn: async ({ message }: { message: string }) => {\n      const response = await apiRequest('POST', '/api/send-broadcast', {\n        message\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Broadcast Sent!\",\n        description: \"Message sent successfully to n8n workflow\",\n      });\n      setBroadcastMessage('');\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to send broadcast message. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSendBroadcast = () => {\n    if (!broadcastMessage.trim()) {\n      toast({\n        title: \"Error\", \n        description: \"Please enter a message to broadcast.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    sendBroadcastMutation.mutate({\n      message: broadcastMessage.trim()\n    });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const isWishSent = (patientId: string) => {\n    return sentWishes?.some((wish: BirthdayWish) => wish.patientId === patientId);\n  };\n\n  const isProcessingSend = (patientId: string) => {\n    return processingSendId === patientId;\n  };\n\n  const isAnyProcessing = () => {\n    return processingSendId !== null;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Customer Relations</h1>\n          <p className=\"text-muted-foreground\">Manage patient communications and engagement</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Birthday Wishes Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Gift className=\"h-5 w-5 text-pink-500\" />\n              Birthday Wishes\n            </CardTitle>\n            <CardDescription>\n              Send personalized birthday messages to patients celebrating today\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Custom Message Input */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"birthday-message\">Custom Birthday Message (Optional)</Label>\n                <Textarea\n                  id=\"birthday-message\"\n                  placeholder=\"Enter a custom birthday message, or leave blank to use the default message...\"\n                  value={birthdayCustomMessage}\n                  onChange={(e) => setBirthdayCustomMessage(e.target.value)}\n                  rows={3}\n                  data-testid=\"textarea-birthday-custom-message\"\n                />\n                <div className=\"text-sm text-muted-foreground bg-muted/50 p-3 rounded-lg border-l-4 border-blue-500\">\n                  <p className=\"font-medium text-foreground mb-1\">Default Birthday Message:</p>\n                  <p className=\"italic\">\"Happy Birthday [Name]! 🎉 Wishing you a wonderful year ahead...\"</p>\n                  <p className=\"text-xs mt-1\">Leave the custom message field empty to use this default template.</p>\n                </div>\n              </div>\n              \n              {loadingBirthdays ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"h-6 w-6 animate-spin\" />\n                  <span className=\"ml-2\">Loading birthdays...</span>\n                </div>\n              ) : birthdayPatients?.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {/* Patient Selection List */}\n                  <div className=\"space-y-3\">\n                    {birthdayPatients.map((patient: Patient) => (\n                      <div key={patient.id} className={`flex items-center justify-between p-3 border rounded-lg ${selectedBirthdayPatient === patient.id ? 'border-blue-500 bg-blue-50/50' : ''}`}>\n                        <div className=\"flex items-center gap-3\">\n                          <input\n                            type=\"radio\"\n                            id={`radio-birthday-${patient.id}`}\n                            name=\"birthday-patient\"\n                            checked={selectedBirthdayPatient === patient.id}\n                            onChange={() => setSelectedBirthdayPatient(patient.id)}\n                            disabled={isWishSent(patient.id) || isAnyProcessing()}\n                            className=\"h-4 w-4 text-blue-600\"\n                            data-testid={`radio-birthday-patient-${patient.id}`}\n                          />\n                          <Calendar className=\"h-5 w-5 text-blue-500\" />\n                          <div>\n                            <p className=\"font-medium\" data-testid={`text-birthday-patient-${patient.id}`}>\n                              {patient.firstName} {patient.lastName}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {formatDate(patient.dateOfBirth)} • {patient.phone}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {isWishSent(patient.id) ? (\n                            <Badge variant=\"secondary\" data-testid={`badge-sent-${patient.id}`}>\n                              <MessageSquare className=\"h-3 w-3 mr-1\" />\n                              Sent\n                            </Badge>\n                          ) : isProcessingSend(patient.id) ? (\n                            <Badge variant=\"outline\" data-testid={`badge-sending-${patient.id}`}>\n                              <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n                              Sending...\n                            </Badge>\n                          ) : null}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Send Button */}\n                  <div className=\"flex justify-between items-center pt-3 border-t\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      {selectedBirthdayPatient ? \n                        `Selected: ${birthdayPatients.find((p: Patient) => p.id === selectedBirthdayPatient)?.firstName} ${birthdayPatients.find((p: Patient) => p.id === selectedBirthdayPatient)?.lastName}` \n                        : 'No patient selected'\n                      }\n                    </div>\n                    <Button \n                      onClick={() => {\n                        if (selectedBirthdayPatient) {\n                          sendBirthdayWishMutation.mutate({ \n                            patientId: selectedBirthdayPatient, \n                            customMessage: birthdayCustomMessage \n                          });\n                        }\n                      }}\n                      disabled={\n                        !selectedBirthdayPatient || \n                        isAnyProcessing() ||\n                        (selectedBirthdayPatient && isWishSent(selectedBirthdayPatient))\n                      }\n                      data-testid=\"button-send-birthday-selected\"\n                    >\n                      {isAnyProcessing() ? (\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      ) : (\n                        <Send className=\"h-4 w-4 mr-2\" />\n                      )}\n                      {birthdayCustomMessage.trim() ? 'Send Custom Message' : 'Send Default Message'}\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Gift className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-muted-foreground\">No birthdays today</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Broadcast Message Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Megaphone className=\"h-5 w-5 text-blue-500\" />\n              Broadcast Message\n            </CardTitle>\n            <CardDescription>\n              Send messages to all your active users. This message will be sent in batches in the background.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Message Input */}\n              <div>\n                <Label htmlFor=\"broadcast-message\">Message</Label>\n                <Textarea\n                  id=\"broadcast-message\"\n                  placeholder=\"Enter your message to broadcast...\"\n                  value={broadcastMessage}\n                  onChange={(e) => setBroadcastMessage(e.target.value)}\n                  rows={4}\n                  data-testid=\"textarea-broadcast-message\"\n                />\n                <div className=\"text-sm text-muted-foreground mt-2\">\n                  This message will be sent to all your active users in batches through the background workflow.\n                </div>\n              </div>\n\n              {/* Send Button */}\n              <Button \n                onClick={handleSendBroadcast}\n                disabled={sendBroadcastMutation.isPending || !broadcastMessage.trim()}\n                className=\"w-full\"\n                data-testid=\"button-send-broadcast\"\n              >\n                {sendBroadcastMutation.isPending ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                ) : (\n                  <Megaphone className=\"h-4 w-4 mr-2\" />\n                )}\n                Send Broadcast Message\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Broadcast Message Preview */}\n      {broadcastMessage && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Message Preview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-muted p-4 rounded-lg\">\n              <p className=\"text-sm\">{broadcastMessage}</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":13658},"client/src/pages/PublicPatientRegistration.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertCircle, CheckCircle, UserPlus } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useState } from \"react\";\n\nconst patientRegistrationSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  phone: z.string().min(10, \"Valid phone number is required\"),\n  email: z.string().min(1, \"Email is required\").email(\"Valid email is required\"),\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n  gender: z.enum([\"male\", \"female\", \"other\"], {\n    required_error: \"Please select a gender\",\n  }),\n  idNumber: z.string().min(1, \"ID number is required\"),\n  address: z.string().optional(),\n  medicalAidScheme: z.string().optional(),\n  medicalAidNumber: z.string().optional(),\n  allergies: z.string().optional(),\n});\n\ntype PatientRegistrationForm = z.infer<typeof patientRegistrationSchema>;\n\nexport default function PublicPatientRegistration() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitResult, setSubmitResult] = useState<{\n    success: boolean;\n    message: string;\n    patientId?: string;\n  } | null>(null);\n\n  const form = useForm<PatientRegistrationForm>({\n    resolver: zodResolver(patientRegistrationSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      email: \"\",\n      dateOfBirth: \"\",\n      gender: undefined,\n      idNumber: \"\",\n      address: \"\",\n      medicalAidScheme: \"\",\n      medicalAidNumber: \"\",\n      allergies: \"\",\n    },\n  });\n\n  const onSubmit = async (data: PatientRegistrationForm) => {\n    setIsSubmitting(true);\n    setSubmitResult(null);\n\n    try {\n      const response = await fetch('/api/public/patient/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      setSubmitResult({\n        success: result.success,\n        message: result.message,\n        patientId: result.patientId,\n      });\n\n      if (result.success) {\n        form.reset();\n      }\n    } catch (error) {\n      setSubmitResult({\n        success: false,\n        message: \"Network error. Please try again.\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-8 px-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <Card>\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mb-4\">\n              <UserPlus className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Patient Registration</CardTitle>\n            <CardDescription>\n              Please fill out this form to register as a new patient at our clinic.\n              All fields marked with * are required.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {submitResult && (\n              <Alert className={`mb-6 ${submitResult.success ? 'border-green-200 bg-green-50 dark:bg-green-950' : 'border-red-200 bg-red-50 dark:bg-red-950'}`}>\n                {submitResult.success ? (\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                ) : (\n                  <AlertCircle className=\"h-4 w-4 text-red-600\" />\n                )}\n                <AlertDescription className={submitResult.success ? 'text-green-800 dark:text-green-200' : 'text-red-800 dark:text-red-200'}>\n                  {submitResult.message}\n                  {submitResult.success && submitResult.patientId && (\n                    <div className=\"mt-2 font-medium\">\n                      Your Patient ID: {submitResult.patientId}\n                    </div>\n                  )}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Personal Information */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n                    Personal Information\n                  </h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name *</FormLabel>\n                          <FormControl>\n                            <Input data-testid=\"input-firstname\" placeholder=\"Enter your first name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name *</FormLabel>\n                          <FormControl>\n                            <Input data-testid=\"input-lastname\" placeholder=\"Enter your last name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number *</FormLabel>\n                          <FormControl>\n                            <Input \n                              data-testid=\"input-phone\" \n                              placeholder=\"+27123456789\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email *</FormLabel>\n                          <FormControl>\n                            <Input \n                              data-testid=\"input-email\" \n                              type=\"email\" \n                              placeholder=\"your.email@example.com\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"dateOfBirth\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Date of Birth *</FormLabel>\n                          <FormControl>\n                            <Input \n                              data-testid=\"input-dob\" \n                              type=\"date\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"gender\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Gender *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-gender\">\n                                <SelectValue placeholder=\"Select gender\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"male\">Male</SelectItem>\n                              <SelectItem value=\"female\">Female</SelectItem>\n                              <SelectItem value=\"other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"idNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ID Number *</FormLabel>\n                        <FormControl>\n                          <Input \n                            data-testid=\"input-idnumber\" \n                            placeholder=\"Enter your ID number\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Address</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            data-testid=\"input-address\" \n                            placeholder=\"Enter your full address\" \n                            rows={3}\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Medical Information */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n                    Medical Aid Information (Optional)\n                  </h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"medicalAidScheme\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Medical Aid Scheme</FormLabel>\n                          <FormControl>\n                            <Input \n                              data-testid=\"input-medicalaid-scheme\" \n                              placeholder=\"e.g., Discovery Health\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"medicalAidNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Medical Aid Number</FormLabel>\n                          <FormControl>\n                            <Input \n                              data-testid=\"input-medicalaid-number\" \n                              placeholder=\"Enter your medical aid number\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"allergies\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Known Allergies</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            data-testid=\"input-allergies\" \n                            placeholder=\"List any known allergies (medications, foods, etc.)\" \n                            rows={3}\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isSubmitting}\n                  data-testid=\"button-register\"\n                >\n                  {isSubmitting ? \"Registering...\" : \"Register as Patient\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14014},"Changes Made to Convert Replit App to VP.md":{"content":"Changes Made to Convert Replit App to VPS Deployment\nHere's a comprehensive breakdown of what was changed to make your app VPS-ready:\n\n1. Database Connection Layer\nFile: server/db.ts\n\nWhat Changed:\n\nFrom: Neon serverless (@neondatabase/serverless)\nTo: Standard PostgreSQL (pg package)\nWhy: Neon serverless is Replit-specific. VPS needs standard PostgreSQL.\n\nKey Changes:\n\n// OLD (Replit):\nimport { neon } from '@neondatabase/serverless';\nconst sql = neon(process.env.DATABASE_URL!);\n// NEW (VPS):\nimport pg from 'pg';\nconst pool = new pg.Pool({\n  user: process.env.PGUSER,\n  password: process.env.PGPASSWORD,\n  host: process.env.PGHOST,\n  port: parseInt(process.env.PGPORT || '5432'),\n  database: process.env.PGDATABASE,\n});\nPattern for Future Apps:\n\nReplace cloud-specific DB clients with standard clients\nSupport both DATABASE_URL and individual env vars for flexibility\n2. Docker Configuration\nNew Files Created:\n\nDockerfile (containerizes your app)\n# Two-stage build:\n# 1. Builder stage: Compiles frontend + backend\n# 2. Production stage: Runs the compiled app\nKey Concepts:\n\nMulti-stage build (reduces image size)\nBuild frontend with Vite\nBuild backend with esbuild\nRun as non-root user (security)\nNamed volumes for persistent data\ndocker-compose.yml (orchestrates services)\nservices:\n  postgres:    # Database service\n  migrate:     # One-time migration service\n  app:         # Your application\nvolumes:\n  postgres_data:  # Persistent database\n  uploads_data:   # Persistent file uploads\nPattern for Future Apps:\n\nCreate Dockerfile with build + production stages\nCreate docker-compose.yml with your services\nUse named volumes for any persistent data\nAdd healthchecks for all services\n3. Production-Specific Entry Point\nNew File: server/index.production.ts\n\nWhat It Does:\n\nRemoves ALL Vite imports (dev-only dependency)\nSimplified logging (no response bodies in production)\nGeneric error messages for 500+ errors\nWhy Needed:\n\nVite is a dev tool, shouldn't be in production bundle\nProduction needs different behavior than development\nPattern for Future Apps:\n\nserver/\n  index.ts           # Development entry (with Vite)\n  index.production.ts # Production entry (no Vite)\n4. Separated Utility Modules\nNew Files:\n\nserver/logger.ts\nSimple standalone logger\nNo external dependencies\nWorks in both dev and production\nserver/static.ts\nServes static frontend files\nNo Vite dependency\nProduction-only file server\nPattern for Future Apps:\n\nExtract utilities that don't need dev tools into separate files\nMakes production builds cleaner and smaller\n5. Security & Privacy Hardening\nChanges in server/index.ts and server/index.production.ts:\n\nA. Response Body Logging\n// Only log response bodies in development\nif (app.get(\"env\") === \"development\" && capturedJsonResponse) {\n  logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n}\nB. Generic Error Messages\n// Production: hide internal error details\nconst message = status >= 500 \n  ? \"Internal Server Error\" \n  : (err.message || \"Internal Server Error\");\nC. Non-Root Container User\nRUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001\nUSER nodejs\nPattern for Future Apps:\n\nNever log sensitive data in production\nAlways return generic 500 errors\nAlways run containers as non-root\n6. Environment Configuration\nNew Files:\n\n.env.production.example\nTemplate for production environment variables\n\n.dockerignore\nPrevents unnecessary files from being copied into Docker image\n\nnode_modules/\n.git/\ndist/\n*.log\n.env\nPattern for Future Apps:\n\nCreate .env.production.example with placeholders\nAdd .dockerignore to speed up builds\n7. Build Process Changes\nUpdated: Dockerfile build order\n\n# CRITICAL: Build backend FIRST, frontend SECOND\nRUN npx esbuild server/index.production.ts --outfile=dist/index.js\nRUN npx vite build  # Creates dist/public/\nWhy This Order:\n\nVite has emptyOutDir: true which clears dist/\nBackend must be built first or it gets deleted\nPattern for Future Apps:\n\nAlways build backend before frontend\nOr configure separate output directories\nSummary: Converting ANY Replit App to VPS\nStep-by-Step Pattern:\nReplace Cloud-Specific Dependencies\n\nNeon DB → PostgreSQL\nReplit Auth → Standard auth\nAny Replit-specific packages\nCreate Docker Files\n\nDockerfile (multi-stage build)\ndocker-compose.yml (services + volumes)\n.dockerignore\nCreate Production Entry Point\n\nserver/index.production.ts\nRemove all dev dependencies (Vite, hot reload, etc.)\nSeparate Utilities\n\nExtract non-dev utilities (logger, static server)\nMake them dependency-free\nAdd Security Hardening\n\nNo sensitive data in logs\nGeneric error messages\nNon-root container user\nConfigure Environment\n\n.env.production.example\nSupport both URL and individual env vars\nTest Build Order\n\nBackend before frontend\nVerify dist/ contains both parts\nKey Takeaway\nThe core principle: Separate development tooling (Vite, HMR, detailed logging) from production runtime (lean, secure, standard dependencies).\n\nThis pattern works for any Node.js/React app moving from Replit to VPS!","size_bytes":4990},"DEPLOYMENT.md":{"content":"# VPS Deployment Guide\n\nThis guide will help you deploy the Invotech Clinic application on your VPS using Docker.\n\n## Prerequisites\n\n- A VPS with Docker and Docker Compose installed\n- SSH access to your VPS\n- Domain name pointed to your VPS (optional, for HTTPS)\n\n## Deployment Steps\n\n### 1. Install Docker on Your VPS\n\nIf Docker is not already installed on your VPS, install it:\n\n```bash\n# Update packages\nsudo apt update\n\n# Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Install Docker Compose\nsudo apt install docker-compose -y\n\n# Add your user to docker group (optional, to run without sudo)\nsudo usermod -aG docker $USER\n```\n\n### 2. Transfer Your Application to VPS\n\nClone your repository or upload your application files to the VPS:\n\n```bash\n# Using git (recommended)\ngit clone <your-repository-url>\ncd <your-project-directory>\n\n# OR using rsync from your local machine\nrsync -avz --exclude 'node_modules' --exclude '.git' ./ user@your-vps-ip:/path/to/app/\n```\n\n### 3. Configure Environment Variables\n\nCreate a `.env` file in your project root with your production configuration:\n\n```bash\n# Copy the example file\ncp .env.production.example .env\n\n# Edit with your actual values\nnano .env\n```\n\nMake sure to update these critical values:\n- `SESSION_SECRET`: Generate a secure random string (use: `openssl rand -base64 32`)\n- Database credentials (if different from defaults)\n- N8N webhook URLs (already configured in example)\n\n### 4. Initialize the Database\n\nBefore starting the application, run the database migration:\n\n```bash\n# Run database migration (this will start postgres, run migration, and exit)\ndocker-compose --profile migration run --rm migrate\n\n# Or if you need to force the migration\ndocker-compose --profile migration run --rm migrate sh -c \"npm ci && npm run db:push -- --force\"\n```\n\n### 5. Build and Start the Application\n\n```bash\n# Build and start all services\ndocker-compose up -d\n\n# View logs to ensure everything is running\ndocker-compose logs -f\n```\n\nThe application will be available at `http://your-vps-ip:50002`\n\n### 6. Create Initial Admin User\n\nYou'll need to create your first admin user directly in the database or through an API call. You can use the PostgreSQL container:\n\n```bash\n# Access PostgreSQL (replace with your actual PGUSER and PGDATABASE from .env)\ndocker-compose exec postgres psql -U <clinicadmin> -d <congokitoko1960>\n\n# Check if users table exists\n\\dt\n\n# Insert an admin user (replace with your details)\n-- You'll need to hash the password first using the API or another tool\n```\n\nAlternatively, you can create a temporary registration endpoint or use the API directly.\n\n### 7. Configure Reverse Proxy (Recommended for Production)\n\nFor production, you should use a reverse proxy like Nginx with SSL:\n\n```nginx\n# /etc/nginx/sites-available/clinic\nserver {\n    listen 80;\n    server_name your-domain.com;\n    \n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n    \n    # WebSocket support\n    location /ws {\n        proxy_pass http://localhost:5000/ws;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_read_timeout 86400;\n    }\n}\n```\n\nEnable SSL with Let's Encrypt:\n\n```bash\nsudo apt install certbot python3-certbot-nginx\nsudo certbot --nginx -d your-domain.com\n```\n\n## Useful Docker Commands\n\n```bash\n# View running containers\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f [service-name]\n\n# Restart services\ndocker-compose restart\n\n# Stop services\ndocker-compose stop\n\n# Stop and remove containers\ndocker-compose down\n\n# Rebuild and restart after code changes\ndocker-compose up -d --build\n\n# Access app container shell\ndocker-compose exec app sh\n\n# Access database (replace clinicadmin with your PGUSER)\ndocker-compose exec postgres psql -U ${PGUSER} -d ${PGDATABASE}\n\n# Run database migration\ndocker-compose --profile migration run --rm migrate\n\n# Backup database (replace with your credentials)\ndocker-compose exec postgres pg_dump -U ${PGUSER} ${PGDATABASE} > backup.sql\n\n# Restore database (replace with your credentials)\ndocker-compose exec -T postgres psql -U ${PGUSER} ${PGDATABASE} < backup.sql\n```\n\n## Updating Your Application\n\nWhen you make changes to your code:\n\n```bash\n# Pull latest changes\ngit pull\n\n# If schema changed, run migrations first\ndocker-compose --profile migration run --rm migrate\n\n# Rebuild and restart\ndocker-compose up -d --build\n```\n\n## Monitoring and Maintenance\n\n### View Application Logs\n```bash\ndocker-compose logs -f app\n```\n\n### View Database Logs\n```bash\ndocker-compose logs -f postgres\n```\n\n### Check Container Health\n```bash\ndocker-compose ps\n```\n\n### Backup Strategy\n\nSet up automated backups using a cron job:\n\n```bash\n# Create backup script (replace PGUSER and PGDATABASE with your values)\ncat > /home/user/backup-db.sh << 'EOF'\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\nPGUSER=\"your-pguser\"\nPGDATABASE=\"your-pgdatabase\"\ndocker-compose exec -T postgres pg_dump -U $PGUSER $PGDATABASE > /backups/clinic_backup_$DATE.sql\n# Keep only last 7 days of backups\nfind /backups -name \"clinic_backup_*.sql\" -mtime +7 -delete\nEOF\n\nchmod +x /home/user/backup-db.sh\n\n# Add to crontab (daily at 2 AM)\ncrontab -e\n# Add: 0 2 * * * /home/user/backup-db.sh\n```\n\n## Troubleshooting\n\n### Application won't start\n```bash\n# Check logs\ndocker-compose logs app\n\n# Common issues:\n# - Database not ready: Wait a few seconds and restart\n# - Port already in use: Change port in docker-compose.yml\n```\n\n### Database connection errors\n```bash\n# Verify database is running\ndocker-compose ps postgres\n\n# Check database logs\ndocker-compose logs postgres\n\n# Test connection (replace with your credentials)\ndocker-compose exec postgres psql -U <your-pguser> -d <your-pgdatabase> -c \"SELECT 1\"\n```\n\n### Cannot access from outside VPS\n```bash\n# Check firewall\nsudo ufw status\nsudo ufw allow 5000/tcp\n\n# Or use nginx on port 80/443\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n```\n\n## Security Checklist\n\n- [ ] **CRITICAL:** Rotate N8N webhook URLs (see SECURITY_NOTE.md)\n- [ ] Changed `SESSION_SECRET` to a strong random value (use: `openssl rand -base64 32`)\n- [ ] Changed `PGPASSWORD` to a strong random password\n- [ ] Configured firewall (ufw) to only allow necessary ports (80, 443, and SSH)\n- [ ] Set up SSL/HTTPS using Let's Encrypt\n- [ ] Regular database backups configured\n- [ ] Keep Docker images updated: `docker-compose pull && docker-compose up -d`\n- [ ] Monitor logs for suspicious activity\n- [ ] Database is not exposed to host (no port mapping in docker-compose.yml)\n- [ ] Application runs as non-root user (uid 1001) in container\n- [ ] Never commit `.env` file to version control\n- [ ] PHI/PII data is never logged (production logs only show method/path/status/duration)\n\n## Environment Variables Reference\n\n| Variable | Description | Required | Example |\n|----------|-------------|----------|---------|\n| `PGUSER` | PostgreSQL username | Yes | clinicadmin |\n| `PGPASSWORD` | PostgreSQL password | Yes | your-secure-password |\n| `PGDATABASE` | Database name | Yes | invotech_clinic_db |\n| `PGHOST` | Database host | Yes | postgres |\n| `PGPORT` | Database port | Yes | 5432 |\n| `NODE_ENV` | Environment (production/development) | Yes | production |\n| `PORT` | Application port | Yes | 5000 |\n| `SESSION_SECRET` | JWT signing secret | Yes | - |\n| `N8N_WEBHOOK_URL` | N8N WhatsApp webhook URL | Yes | - |\n| `N8N_BIRTHDAY_WEBHOOK_URL` | N8N birthday webhook URL | Yes | - |\n\n## Support\n\nFor issues or questions, refer to the application documentation or contact your development team.\n","size_bytes":8022},"SECURITY_NOTE.md":{"content":"# SECURITY NOTICE\n\n## IMPORTANT: Webhook URLs Were Exposed\n\nDuring the development process, your N8N webhook URLs were temporarily committed to the `.env.production.example` file:\n\n- N8N_WEBHOOK_URL: `https://n8n.srv937238.hstgr.cloud/webhook/226162b3-XXXX-XXXX-XXXX-XXXXXXXXXXXX` (redacted)\n- N8N_BIRTHDAY_WEBHOOK_URL: `https://n8n.srv937238.hstgr.cloud/webhook/8034999b-XXXX-XXXX-XXXX-XXXXXXXXXXXX` (redacted)\n\n**Note:** The actual webhook IDs have been redacted from this document for security reasons.\n\n## Required Actions\n\n### 1. Rotate Your Webhook URLs (CRITICAL)\n\nSince these webhook URLs have been exposed, you should regenerate them in n8n to prevent unauthorized access:\n\n1. Log in to your n8n instance at `https://n8n.srv937238.hstgr.cloud`\n2. Navigate to each webhook workflow\n3. Generate new webhook URLs for both:\n   - WhatsApp booking integration\n   - Birthday wishes automation\n4. Update your production `.env` file with the new webhook URLs\n5. Restart your application\n\n### 2. Update Your .env File\n\nAfter rotating the webhooks, update your `.env` file with the new URLs:\n\n```bash\n# New webhook URLs (after rotation)\nN8N_WEBHOOK_URL=https://n8n.srv937238.hstgr.cloud/webhook/YOUR_NEW_WEBHOOK_ID\nN8N_BIRTHDAY_WEBHOOK_URL=https://n8n.srv937238.hstgr.cloud/webhook/YOUR_NEW_WEBHOOK_ID\n```\n\n### 3. Additional Security Recommendations\n\n- **Never commit** `.env` files to version control\n- Keep `.env` in your `.gitignore` file (already configured)\n- Use strong, randomly generated values for `SESSION_SECRET` and `PGPASSWORD`\n- Regularly rotate secrets and webhook URLs\n- Monitor your n8n logs for any suspicious activity\n\n## What Was Fixed\n\nThe `.env.production.example` file has been updated to use placeholder values instead of real credentials. Future deployments should use this template and fill in actual values only in the production `.env` file (which is not committed to git).\n\n## Questions?\n\nIf you need help rotating the webhook URLs or have security concerns, please consult your n8n documentation or contact your security team.\n","size_bytes":2055},"server/logger.ts":{"content":"export function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n","size_bytes":276},"server/static.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":558}},"version":1}